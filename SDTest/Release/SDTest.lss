
SDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000015f2  00001686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000302  0080011c  0080011c  000016a2  2**0
                  ALLOC
  3 .debug_aranges 00000880  00000000  00000000  000016a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000014eb  00000000  00000000  00001f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013a12  00000000  00000000  0000340d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002896  00000000  00000000  00016e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005e74  00000000  00000000  000196b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f60  00000000  00000000  0001f52c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003ee0  00000000  00000000  0002048c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006a41  00000000  00000000  0002436c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000920  00000000  00000000  0002adad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  }

  *p_offset = offset;

  return (path[offset] != '\0');
}
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
  return true;
}
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
}
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_18>
      4c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	8d 00       	.word	0x008d	; ????
      c4:	83 09       	sbc	r24, r3

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	11 e0       	ldi	r17, 0x01	; 1
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e2 ef       	ldi	r30, 0xF2	; 242
      da:	f5 e1       	ldi	r31, 0x15	; 21
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
      e2:	ac 31       	cpi	r26, 0x1C	; 28
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
      e8:	14 e0       	ldi	r17, 0x04	; 4
      ea:	ac e1       	ldi	r26, 0x1C	; 28
      ec:	b1 e0       	ldi	r27, 0x01	; 1
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ae 31       	cpi	r26, 0x1E	; 30
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__tablejump__>

00000108 <.do_global_ctors_start>:
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
     10e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <main>
     112:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_GLOBAL__I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     11a:	10 92 21 01 	sts	0x0121, r1
     11e:	10 92 22 01 	sts	0x0122, r1
     122:	10 92 25 01 	sts	0x0125, r1
     126:	10 92 27 01 	sts	0x0127, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     12a:	82 e0       	ldi	r24, 0x02	; 2
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	80 93 28 01 	sts	0x0128, r24
     136:	90 93 29 01 	sts	0x0129, r25
     13a:	a0 93 2a 01 	sts	0x012A, r26
     13e:	b0 93 2b 01 	sts	0x012B, r27
     142:	10 92 3f 01 	sts	0x013F, r1
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     146:	10 92 49 01 	sts	0x0149, r1
     14a:	10 92 48 01 	sts	0x0148, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     14e:	88 e0       	ldi	r24, 0x08	; 8
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	90 93 47 01 	sts	0x0147, r25
     156:	80 93 46 01 	sts	0x0146, r24
     15a:	10 92 4b 01 	sts	0x014B, r1
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
     15e:	08 95       	ret

00000160 <_ZN7Sd2Card11waitNotBusyEj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
     160:	ff 92       	push	r15
     162:	0f 93       	push	r16
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	8b 01       	movw	r16, r22
  uint16_t t0 = millis();
     16c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <millis>
     170:	eb 01       	movw	r28, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     172:	ff 24       	eor	r15, r15
     174:	fa 94       	dec	r15
     176:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
     178:	0d b4       	in	r0, 0x2d	; 45
     17a:	07 fe       	sbrs	r0, 7
     17c:	fd cf       	rjmp	.-6      	; 0x178 <_ZN7Sd2Card11waitNotBusyEj+0x18>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     17e:	8e b5       	in	r24, 0x2e	; 46
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
     180:	8f 3f       	cpi	r24, 0xFF	; 255
     182:	11 f4       	brne	.+4      	; 0x188 <_ZN7Sd2Card11waitNotBusyEj+0x28>
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	08 c0       	rjmp	.+16     	; 0x198 <_ZN7Sd2Card11waitNotBusyEj+0x38>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
     188:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <millis>
     18c:	6c 1b       	sub	r22, r28
     18e:	7d 0b       	sbc	r23, r29
     190:	60 17       	cp	r22, r16
     192:	71 07       	cpc	r23, r17
     194:	80 f3       	brcs	.-32     	; 0x176 <_ZN7Sd2Card11waitNotBusyEj+0x16>
     196:	80 e0       	ldi	r24, 0x00	; 0
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	1f 91       	pop	r17
     19e:	0f 91       	pop	r16
     1a0:	ff 90       	pop	r15
     1a2:	08 95       	ret

000001a4 <_ZN7Sd2Card13chipSelectLowEv>:
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
  digitalWrite(chipSelectPin_, LOW);
     1a4:	fc 01       	movw	r30, r24
     1a6:	84 81       	ldd	r24, Z+4	; 0x04
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	0e 94 9d 0a 	call	0x153a	; 0x153a <digitalWrite>
}
     1ae:	08 95       	ret

000001b0 <_ZN7Sd2Card14chipSelectHighEv>:
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
     1b0:	fc 01       	movw	r30, r24
     1b2:	84 81       	ldd	r24, Z+4	; 0x04
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	0e 94 9d 0a 	call	0x153a	; 0x153a <digitalWrite>
}
     1ba:	08 95       	ret

000001bc <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     1bc:	dc 01       	movw	r26, r24
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
     1be:	6e bd       	out	0x2e, r22	; 46
     1c0:	fa 01       	movw	r30, r20
     1c2:	20 e0       	ldi	r18, 0x00	; 0
     1c4:	30 e0       	ldi	r19, 0x00	; 0

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
     1c6:	0d b4       	in	r0, 0x2d	; 45
     1c8:	07 fe       	sbrs	r0, 7
     1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <_ZN7Sd2Card9writeDataEhPKh+0xa>
    SPDR = src[i];
     1cc:	80 81       	ld	r24, Z
     1ce:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
     1d0:	0d b4       	in	r0, 0x2d	; 45
     1d2:	07 fe       	sbrs	r0, 7
     1d4:	fd cf       	rjmp	.-6      	; 0x1d0 <_ZN7Sd2Card9writeDataEhPKh+0x14>
    SPDR = src[i+1];
     1d6:	81 81       	ldd	r24, Z+1	; 0x01
     1d8:	8e bd       	out	0x2e, r24	; 46

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
     1da:	2e 5f       	subi	r18, 0xFE	; 254
     1dc:	3f 4f       	sbci	r19, 0xFF	; 255
     1de:	32 96       	adiw	r30, 0x02	; 2
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	20 30       	cpi	r18, 0x00	; 0
     1e4:	38 07       	cpc	r19, r24
     1e6:	79 f7       	brne	.-34     	; 0x1c6 <_ZN7Sd2Card9writeDataEhPKh+0xa>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
     1e8:	0d b4       	in	r0, 0x2d	; 45
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <_ZN7Sd2Card9writeDataEhPKh+0x2c>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     1f2:	0d b4       	in	r0, 0x2d	; 45
     1f4:	07 fe       	sbrs	r0, 7
     1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <_ZN7Sd2Card9writeDataEhPKh+0x36>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     1f8:	8f ef       	ldi	r24, 0xFF	; 255
     1fa:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     1fc:	0d b4       	in	r0, 0x2d	; 45
     1fe:	07 fe       	sbrs	r0, 7
     200:	fd cf       	rjmp	.-6      	; 0x1fc <_ZN7Sd2Card9writeDataEhPKh+0x40>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     206:	0d b4       	in	r0, 0x2d	; 45
     208:	07 fe       	sbrs	r0, 7
     20a:	fd cf       	rjmp	.-6      	; 0x206 <_ZN7Sd2Card9writeDataEhPKh+0x4a>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     20c:	8e b5       	in	r24, 0x2e	; 46
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
     20e:	1a 96       	adiw	r26, 0x0a	; 10
     210:	8c 93       	st	X, r24
     212:	1a 97       	sbiw	r26, 0x0a	; 10
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
     214:	8f 71       	andi	r24, 0x1F	; 31
     216:	85 30       	cpi	r24, 0x05	; 5
     218:	11 f4       	brne	.+4      	; 0x21e <_ZN7Sd2Card9writeDataEhPKh+0x62>
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	08 95       	ret
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
     21e:	81 e1       	ldi	r24, 0x11	; 17
     220:	15 96       	adiw	r26, 0x05	; 5
     222:	8c 93       	st	X, r24
     224:	15 97       	sbiw	r26, 0x05	; 5
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
     226:	cd 01       	movw	r24, r26
     228:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN7Sd2Card14chipSelectHighEv>
     22c:	80 e0       	ldi	r24, 0x00	; 0
    return false;
  }
  return true;
}
     22e:	08 95       	ret

00000230 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
     230:	ff 92       	push	r15
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
     23c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <millis>
     240:	8b 01       	movw	r16, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     242:	ff 24       	eor	r15, r15
     244:	fa 94       	dec	r15
     246:	09 c0       	rjmp	.+18     	; 0x25a <_ZN7Sd2Card14waitStartBlockEv+0x2a>
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
     248:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <millis>
     24c:	60 1b       	sub	r22, r16
     24e:	71 0b       	sbc	r23, r17
     250:	6d 52       	subi	r22, 0x2D	; 45
     252:	71 40       	sbci	r23, 0x01	; 1
     254:	10 f0       	brcs	.+4      	; 0x25a <_ZN7Sd2Card14waitStartBlockEv+0x2a>
     256:	8f e0       	ldi	r24, 0x0F	; 15
     258:	0d c0       	rjmp	.+26     	; 0x274 <_ZN7Sd2Card14waitStartBlockEv+0x44>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     25a:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
     25c:	0d b4       	in	r0, 0x2d	; 45
     25e:	07 fe       	sbrs	r0, 7
     260:	fd cf       	rjmp	.-6      	; 0x25c <_ZN7Sd2Card14waitStartBlockEv+0x2c>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     262:	8e b5       	in	r24, 0x2e	; 46
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
     264:	8a 87       	std	Y+10, r24	; 0x0a
     266:	8f 3f       	cpi	r24, 0xFF	; 255
     268:	79 f3       	breq	.-34     	; 0x248 <_ZN7Sd2Card14waitStartBlockEv+0x18>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
     26a:	8e 3f       	cpi	r24, 0xFE	; 254
     26c:	11 f4       	brne	.+4      	; 0x272 <_ZN7Sd2Card14waitStartBlockEv+0x42>
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	06 c0       	rjmp	.+12     	; 0x27e <_ZN7Sd2Card14waitStartBlockEv+0x4e>
     272:	8d e0       	ldi	r24, 0x0D	; 13
     274:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
     276:	ce 01       	movw	r24, r28
     278:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN7Sd2Card14chipSelectHighEv>
     27c:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	08 95       	ret

0000028a <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	ec 01       	movw	r28, r24
  if (inBlock_) {
     290:	8e 81       	ldd	r24, Y+6	; 0x06
     292:	88 23       	and	r24, r24
     294:	d1 f0       	breq	.+52     	; 0x2ca <_ZN7Sd2Card7readEndEv+0x40>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	8e bd       	out	0x2e, r24	; 46
     29a:	2f 81       	ldd	r18, Y+7	; 0x07
     29c:	38 85       	ldd	r19, Y+8	; 0x08
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
     29e:	4f ef       	ldi	r20, 0xFF	; 255
     2a0:	04 c0       	rjmp	.+8      	; 0x2aa <_ZN7Sd2Card7readEndEv+0x20>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
     2a2:	0d b4       	in	r0, 0x2d	; 45
     2a4:	07 fe       	sbrs	r0, 7
     2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <_ZN7Sd2Card7readEndEv+0x18>
      SPDR = 0XFF;
     2a8:	4e bd       	out	0x2e, r20	; 46
     2aa:	2f 5f       	subi	r18, 0xFF	; 255
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
     2ae:	c9 01       	movw	r24, r18
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	81 50       	subi	r24, 0x01	; 1
     2b4:	92 40       	sbci	r25, 0x02	; 2
     2b6:	a8 f3       	brcs	.-22     	; 0x2a2 <_ZN7Sd2Card7readEndEv+0x18>
     2b8:	38 87       	std	Y+8, r19	; 0x08
     2ba:	2f 83       	std	Y+7, r18	; 0x07
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
     2bc:	0d b4       	in	r0, 0x2d	; 45
     2be:	07 fe       	sbrs	r0, 7
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <_ZN7Sd2Card7readEndEv+0x32>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
     2c2:	ce 01       	movw	r24, r28
     2c4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
     2c8:	1e 82       	std	Y+6, r1	; 0x06
  }
}
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	ec 01       	movw	r28, r24
     2e0:	d6 2e       	mov	r13, r22
     2e2:	79 01       	movw	r14, r18
     2e4:	8a 01       	movw	r16, r20
  // end read if in partialBlockRead mode
  readEnd();
     2e6:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
     2ea:	ce 01       	movw	r24, r28
     2ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
     2f0:	ce 01       	movw	r24, r28
     2f2:	6c e2       	ldi	r22, 0x2C	; 44
     2f4:	71 e0       	ldi	r23, 0x01	; 1
     2f6:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
     2fa:	8d 2d       	mov	r24, r13
     2fc:	80 64       	ori	r24, 0x40	; 64
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     2fe:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     300:	0d b4       	in	r0, 0x2d	; 45
     302:	07 fe       	sbrs	r0, 7
     304:	fd cf       	rjmp	.-6      	; 0x300 <_ZN7Sd2Card11cardCommandEhm+0x30>
     306:	28 e1       	ldi	r18, 0x18	; 24
     308:	30 e0       	ldi	r19, 0x00	; 0

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     30a:	d8 01       	movw	r26, r16
     30c:	c7 01       	movw	r24, r14
     30e:	02 2e       	mov	r0, r18
     310:	04 c0       	rjmp	.+8      	; 0x31a <_ZN7Sd2Card11cardCommandEhm+0x4a>
     312:	b6 95       	lsr	r27
     314:	a7 95       	ror	r26
     316:	97 95       	ror	r25
     318:	87 95       	ror	r24
     31a:	0a 94       	dec	r0
     31c:	d2 f7       	brpl	.-12     	; 0x312 <_ZN7Sd2Card11cardCommandEhm+0x42>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     31e:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     320:	0d b4       	in	r0, 0x2d	; 45
     322:	07 fe       	sbrs	r0, 7
     324:	fd cf       	rjmp	.-6      	; 0x320 <_ZN7Sd2Card11cardCommandEhm+0x50>
     326:	28 50       	subi	r18, 0x08	; 8
     328:	30 40       	sbci	r19, 0x00	; 0

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	28 3f       	cpi	r18, 0xF8	; 248
     32e:	38 07       	cpc	r19, r24
     330:	61 f7       	brne	.-40     	; 0x30a <_ZN7Sd2Card11cardCommandEhm+0x3a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     332:	dd 20       	and	r13, r13
     334:	11 f4       	brne	.+4      	; 0x33a <_ZN7Sd2Card11cardCommandEhm+0x6a>
     336:	85 e9       	ldi	r24, 0x95	; 149
     338:	06 c0       	rjmp	.+12     	; 0x346 <_ZN7Sd2Card11cardCommandEhm+0x76>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
     33a:	88 e0       	ldi	r24, 0x08	; 8
     33c:	d8 16       	cp	r13, r24
     33e:	11 f4       	brne	.+4      	; 0x344 <_ZN7Sd2Card11cardCommandEhm+0x74>
     340:	87 e8       	ldi	r24, 0x87	; 135
     342:	01 c0       	rjmp	.+2      	; 0x346 <_ZN7Sd2Card11cardCommandEhm+0x76>
     344:	8f ef       	ldi	r24, 0xFF	; 255
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     346:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     348:	0d b4       	in	r0, 0x2d	; 45
     34a:	07 fe       	sbrs	r0, 7
     34c:	fd cf       	rjmp	.-6      	; 0x348 <_ZN7Sd2Card11cardCommandEhm+0x78>
     34e:	90 e0       	ldi	r25, 0x00	; 0
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & (1 << SPIF)));
     354:	0d b4       	in	r0, 0x2d	; 45
     356:	07 fe       	sbrs	r0, 7
     358:	fd cf       	rjmp	.-6      	; 0x354 <_ZN7Sd2Card11cardCommandEhm+0x84>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     35a:	8e b5       	in	r24, 0x2e	; 46
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
     35c:	87 ff       	sbrs	r24, 7
     35e:	02 c0       	rjmp	.+4      	; 0x364 <_ZN7Sd2Card11cardCommandEhm+0x94>
     360:	91 50       	subi	r25, 0x01	; 1
     362:	b9 f7       	brne	.-18     	; 0x352 <_ZN7Sd2Card11cardCommandEhm+0x82>
     364:	8a 87       	std	Y+10, r24	; 0x0a
  return status_;
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	08 95       	ret

00000376 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
     376:	cf 92       	push	r12
     378:	df 92       	push	r13
     37a:	ef 92       	push	r14
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
     388:	7a 01       	movw	r14, r20
     38a:	8b 01       	movw	r16, r22
     38c:	69 01       	movw	r12, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     38e:	41 15       	cp	r20, r1
     390:	51 05       	cpc	r21, r1
     392:	61 05       	cpc	r22, r1
     394:	71 05       	cpc	r23, r1
     396:	11 f4       	brne	.+4      	; 0x39c <_ZN7Sd2Card10writeBlockEmPKh+0x26>
     398:	82 e1       	ldi	r24, 0x12	; 18
     39a:	37 c0       	rjmp	.+110    	; 0x40a <_ZN7Sd2Card10writeBlockEmPKh+0x94>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     39c:	8b 85       	ldd	r24, Y+11	; 0x0b
     39e:	83 30       	cpi	r24, 0x03	; 3
     3a0:	39 f0       	breq	.+14     	; 0x3b0 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
     3a2:	29 e0       	ldi	r18, 0x09	; 9
     3a4:	ee 0c       	add	r14, r14
     3a6:	ff 1c       	adc	r15, r15
     3a8:	00 1f       	adc	r16, r16
     3aa:	11 1f       	adc	r17, r17
     3ac:	2a 95       	dec	r18
     3ae:	d1 f7       	brne	.-12     	; 0x3a4 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
  if (cardCommand(CMD24, blockNumber)) {
     3b0:	ce 01       	movw	r24, r28
     3b2:	68 e1       	ldi	r22, 0x18	; 24
     3b4:	a8 01       	movw	r20, r16
     3b6:	97 01       	movw	r18, r14
     3b8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN7Sd2Card11cardCommandEhm>
     3bc:	88 23       	and	r24, r24
     3be:	11 f0       	breq	.+4      	; 0x3c4 <_ZN7Sd2Card10writeBlockEmPKh+0x4e>
     3c0:	84 e0       	ldi	r24, 0x04	; 4
     3c2:	23 c0       	rjmp	.+70     	; 0x40a <_ZN7Sd2Card10writeBlockEmPKh+0x94>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
     3c4:	ce 01       	movw	r24, r28
     3c6:	6e ef       	ldi	r22, 0xFE	; 254
     3c8:	a6 01       	movw	r20, r12
     3ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <_ZN7Sd2Card9writeDataEhPKh>
     3ce:	88 23       	and	r24, r24
     3d0:	e9 f0       	breq	.+58     	; 0x40c <_ZN7Sd2Card10writeBlockEmPKh+0x96>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
     3d2:	ce 01       	movw	r24, r28
     3d4:	68 e5       	ldi	r22, 0x58	; 88
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN7Sd2Card11waitNotBusyEj>
     3dc:	88 23       	and	r24, r24
     3de:	11 f4       	brne	.+4      	; 0x3e4 <_ZN7Sd2Card10writeBlockEmPKh+0x6e>
     3e0:	85 e1       	ldi	r24, 0x15	; 21
     3e2:	13 c0       	rjmp	.+38     	; 0x40a <_ZN7Sd2Card10writeBlockEmPKh+0x94>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     3e4:	ce 01       	movw	r24, r28
     3e6:	6d e0       	ldi	r22, 0x0D	; 13
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN7Sd2Card11cardCommandEhm>
     3f4:	88 23       	and	r24, r24
     3f6:	41 f4       	brne	.+16     	; 0x408 <_ZN7Sd2Card10writeBlockEmPKh+0x92>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
     3f8:	8f ef       	ldi	r24, 0xFF	; 255
     3fa:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
     3fc:	0d b4       	in	r0, 0x2d	; 45
     3fe:	07 fe       	sbrs	r0, 7
     400:	fd cf       	rjmp	.-6      	; 0x3fc <_ZN7Sd2Card10writeBlockEmPKh+0x86>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
     402:	8e b5       	in	r24, 0x2e	; 46
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     404:	88 23       	and	r24, r24
     406:	79 f0       	breq	.+30     	; 0x426 <_ZN7Sd2Card10writeBlockEmPKh+0xb0>
     408:	84 e1       	ldi	r24, 0x14	; 20
     40a:	8d 83       	std	Y+5, r24	; 0x05
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
     40c:	ce 01       	movw	r24, r28
     40e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN7Sd2Card14chipSelectHighEv>
     412:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	cf 90       	pop	r12
     424:	08 95       	ret
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
     426:	ce 01       	movw	r24, r28
     428:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN7Sd2Card14chipSelectHighEv>
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	f2 cf       	rjmp	.-28     	; 0x414 <_ZN7Sd2Card10writeBlockEmPKh+0x9e>

00000430 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
     430:	8f 92       	push	r8
     432:	9f 92       	push	r9
     434:	af 92       	push	r10
     436:	bf 92       	push	r11
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	ec 01       	movw	r28, r24
     44a:	5a 01       	movw	r10, r20
     44c:	6b 01       	movw	r12, r22
     44e:	49 01       	movw	r8, r18
  uint16_t n;
  if (count == 0) return true;
     450:	01 15       	cp	r16, r1
     452:	11 05       	cpc	r17, r1
     454:	09 f4       	brne	.+2      	; 0x458 <_ZN7Sd2Card8readDataEmjjPh+0x28>
     456:	7b c0       	rjmp	.+246    	; 0x54e <_ZN7Sd2Card8readDataEmjjPh+0x11e>
  if ((count + offset) > 512) {
     458:	c8 01       	movw	r24, r16
     45a:	82 0f       	add	r24, r18
     45c:	93 1f       	adc	r25, r19
     45e:	81 50       	subi	r24, 0x01	; 1
     460:	92 40       	sbci	r25, 0x02	; 2
     462:	08 f0       	brcs	.+2      	; 0x466 <_ZN7Sd2Card8readDataEmjjPh+0x36>
     464:	6f c0       	rjmp	.+222    	; 0x544 <_ZN7Sd2Card8readDataEmjjPh+0x114>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
     466:	8e 81       	ldd	r24, Y+6	; 0x06
     468:	88 23       	and	r24, r24
     46a:	71 f0       	breq	.+28     	; 0x488 <_ZN7Sd2Card8readDataEmjjPh+0x58>
     46c:	88 81       	ld	r24, Y
     46e:	99 81       	ldd	r25, Y+1	; 0x01
     470:	aa 81       	ldd	r26, Y+2	; 0x02
     472:	bb 81       	ldd	r27, Y+3	; 0x03
     474:	48 17       	cp	r20, r24
     476:	59 07       	cpc	r21, r25
     478:	6a 07       	cpc	r22, r26
     47a:	7b 07       	cpc	r23, r27
     47c:	29 f4       	brne	.+10     	; 0x488 <_ZN7Sd2Card8readDataEmjjPh+0x58>
     47e:	8f 81       	ldd	r24, Y+7	; 0x07
     480:	98 85       	ldd	r25, Y+8	; 0x08
     482:	88 16       	cp	r8, r24
     484:	99 06       	cpc	r9, r25
     486:	18 f5       	brcc	.+70     	; 0x4ce <_ZN7Sd2Card8readDataEmjjPh+0x9e>
    block_ = block;
     488:	a8 82       	st	Y, r10
     48a:	b9 82       	std	Y+1, r11	; 0x01
     48c:	ca 82       	std	Y+2, r12	; 0x02
     48e:	db 82       	std	Y+3, r13	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
     490:	8b 85       	ldd	r24, Y+11	; 0x0b
     492:	83 30       	cpi	r24, 0x03	; 3
     494:	39 f0       	breq	.+14     	; 0x4a4 <_ZN7Sd2Card8readDataEmjjPh+0x74>
     496:	69 e0       	ldi	r22, 0x09	; 9
     498:	aa 0c       	add	r10, r10
     49a:	bb 1c       	adc	r11, r11
     49c:	cc 1c       	adc	r12, r12
     49e:	dd 1c       	adc	r13, r13
     4a0:	6a 95       	dec	r22
     4a2:	d1 f7       	brne	.-12     	; 0x498 <_ZN7Sd2Card8readDataEmjjPh+0x68>
    if (cardCommand(CMD17, block)) {
     4a4:	ce 01       	movw	r24, r28
     4a6:	61 e1       	ldi	r22, 0x11	; 17
     4a8:	a6 01       	movw	r20, r12
     4aa:	95 01       	movw	r18, r10
     4ac:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN7Sd2Card11cardCommandEhm>
     4b0:	88 23       	and	r24, r24
     4b2:	19 f0       	breq	.+6      	; 0x4ba <_ZN7Sd2Card8readDataEmjjPh+0x8a>
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	8d 83       	std	Y+5, r24	; 0x05
     4b8:	45 c0       	rjmp	.+138    	; 0x544 <_ZN7Sd2Card8readDataEmjjPh+0x114>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
     4ba:	ce 01       	movw	r24, r28
     4bc:	0e 94 18 01 	call	0x230	; 0x230 <_ZN7Sd2Card14waitStartBlockEv>
     4c0:	88 23       	and	r24, r24
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <_ZN7Sd2Card8readDataEmjjPh+0x96>
     4c4:	3f c0       	rjmp	.+126    	; 0x544 <_ZN7Sd2Card8readDataEmjjPh+0x114>
      goto fail;
    }
    offset_ = 0;
     4c6:	18 86       	std	Y+8, r1	; 0x08
     4c8:	1f 82       	std	Y+7, r1	; 0x07
    inBlock_ = 1;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	8e 83       	std	Y+6, r24	; 0x06
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	8e bd       	out	0x2e, r24	; 46
     4d2:	8f 81       	ldd	r24, Y+7	; 0x07
     4d4:	98 85       	ldd	r25, Y+8	; 0x08

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <_ZN7Sd2Card8readDataEmjjPh+0xb4>
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
     4da:	0d b4       	in	r0, 0x2d	; 45
     4dc:	07 fe       	sbrs	r0, 7
     4de:	fd cf       	rjmp	.-6      	; 0x4da <_ZN7Sd2Card8readDataEmjjPh+0xaa>
    SPDR = 0XFF;
     4e0:	2e bd       	out	0x2e, r18	; 46
     4e2:	01 96       	adiw	r24, 0x01	; 1
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
     4e4:	88 15       	cp	r24, r8
     4e6:	99 05       	cpc	r25, r9
     4e8:	c0 f3       	brcs	.-16     	; 0x4da <_ZN7Sd2Card8readDataEmjjPh+0xaa>
     4ea:	98 87       	std	Y+8, r25	; 0x08
     4ec:	8f 83       	std	Y+7, r24	; 0x07
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
     4ee:	d8 01       	movw	r26, r16
     4f0:	11 97       	sbiw	r26, 0x01	; 1
     4f2:	20 e0       	ldi	r18, 0x00	; 0
     4f4:	30 e0       	ldi	r19, 0x00	; 0
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
     4f6:	9f ef       	ldi	r25, 0xFF	; 255
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <_ZN7Sd2Card8readDataEmjjPh+0xe0>
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
     4fa:	0d b4       	in	r0, 0x2d	; 45
     4fc:	07 fe       	sbrs	r0, 7
     4fe:	fd cf       	rjmp	.-6      	; 0x4fa <_ZN7Sd2Card8readDataEmjjPh+0xca>
    dst[i] = SPDR;
     500:	8e b5       	in	r24, 0x2e	; 46
     502:	f7 01       	movw	r30, r14
     504:	e2 0f       	add	r30, r18
     506:	f3 1f       	adc	r31, r19
     508:	80 83       	st	Z, r24
    SPDR = 0XFF;
     50a:	9e bd       	out	0x2e, r25	; 46
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
     50c:	2f 5f       	subi	r18, 0xFF	; 255
     50e:	3f 4f       	sbci	r19, 0xFF	; 255
     510:	2a 17       	cp	r18, r26
     512:	3b 07       	cpc	r19, r27
     514:	90 f3       	brcs	.-28     	; 0x4fa <_ZN7Sd2Card8readDataEmjjPh+0xca>
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
     516:	0d b4       	in	r0, 0x2d	; 45
     518:	07 fe       	sbrs	r0, 7
     51a:	fd cf       	rjmp	.-6      	; 0x516 <_ZN7Sd2Card8readDataEmjjPh+0xe6>
  dst[n] = SPDR;
     51c:	8e b5       	in	r24, 0x2e	; 46
     51e:	ae 0d       	add	r26, r14
     520:	bf 1d       	adc	r27, r15
     522:	8c 93       	st	X, r24
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
     524:	2f 81       	ldd	r18, Y+7	; 0x07
     526:	38 85       	ldd	r19, Y+8	; 0x08
     528:	20 0f       	add	r18, r16
     52a:	31 1f       	adc	r19, r17
     52c:	38 87       	std	Y+8, r19	; 0x08
     52e:	2f 83       	std	Y+7, r18	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
     530:	89 85       	ldd	r24, Y+9	; 0x09
     532:	88 23       	and	r24, r24
     534:	19 f0       	breq	.+6      	; 0x53c <_ZN7Sd2Card8readDataEmjjPh+0x10c>
     536:	20 50       	subi	r18, 0x00	; 0
     538:	32 40       	sbci	r19, 0x02	; 2
     53a:	48 f0       	brcs	.+18     	; 0x54e <_ZN7Sd2Card8readDataEmjjPh+0x11e>
    // read rest of data, checksum and set chip select high
    readEnd();
     53c:	ce 01       	movw	r24, r28
     53e:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN7Sd2Card7readEndEv>
     542:	05 c0       	rjmp	.+10     	; 0x54e <_ZN7Sd2Card8readDataEmjjPh+0x11e>
  }
  return true;

 fail:
  chipSelectHigh();
     544:	ce 01       	movw	r24, r28
     546:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_ZN7Sd2Card14chipSelectHighEv>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	01 c0       	rjmp	.+2      	; 0x550 <_ZN7Sd2Card8readDataEmjjPh+0x120>
  return false;
     54e:	81 e0       	ldi	r24, 0x01	; 1
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	bf 90       	pop	r11
     562:	af 90       	pop	r10
     564:	9f 90       	pop	r9
     566:	8f 90       	pop	r8
     568:	08 95       	ret

0000056a <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	00 e0       	ldi	r16, 0x00	; 0
     57a:	12 e0       	ldi	r17, 0x02	; 2
     57c:	0e 94 18 02 	call	0x430	; 0x430 <_ZN7Sd2Card8readDataEmjjPh>
}
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	08 95       	ret

0000058a <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
     58a:	6f 92       	push	r6
     58c:	7f 92       	push	r7
     58e:	8f 92       	push	r8
     590:	9f 92       	push	r9
     592:	af 92       	push	r10
     594:	bf 92       	push	r11
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	7a 01       	movw	r14, r20
     5aa:	8b 01       	movw	r16, r22
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
     5ac:	2d 81       	ldd	r18, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
     5ae:	22 23       	and	r18, r18
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <_ZN6SdFile7seekSetEm+0x2a>
     5b2:	80 c0       	rjmp	.+256    	; 0x6b4 <_ZN6SdFile7seekSetEm+0x12a>
     5b4:	8b 89       	ldd	r24, Y+19	; 0x13
     5b6:	9c 89       	ldd	r25, Y+20	; 0x14
     5b8:	ad 89       	ldd	r26, Y+21	; 0x15
     5ba:	be 89       	ldd	r27, Y+22	; 0x16
     5bc:	84 17       	cp	r24, r20
     5be:	95 07       	cpc	r25, r21
     5c0:	a6 07       	cpc	r26, r22
     5c2:	b7 07       	cpc	r27, r23
     5c4:	08 f4       	brcc	.+2      	; 0x5c8 <_ZN6SdFile7seekSetEm+0x3e>
     5c6:	76 c0       	rjmp	.+236    	; 0x6b4 <_ZN6SdFile7seekSetEm+0x12a>
     5c8:	85 c0       	rjmp	.+266    	; 0x6d4 <_ZN6SdFile7seekSetEm+0x14a>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
     5ca:	e1 14       	cp	r14, r1
     5cc:	f1 04       	cpc	r15, r1
     5ce:	01 05       	cpc	r16, r1
     5d0:	11 05       	cpc	r17, r1
     5d2:	49 f4       	brne	.+18     	; 0x5e6 <_ZN6SdFile7seekSetEm+0x5c>
    // set position to start of file
    curCluster_ = 0;
     5d4:	1e 82       	std	Y+6, r1	; 0x06
     5d6:	1f 82       	std	Y+7, r1	; 0x07
     5d8:	18 86       	std	Y+8, r1	; 0x08
     5da:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
     5dc:	1a 86       	std	Y+10, r1	; 0x0a
     5de:	1b 86       	std	Y+11, r1	; 0x0b
     5e0:	1c 86       	std	Y+12, r1	; 0x0c
     5e2:	1d 86       	std	Y+13, r1	; 0x0d
     5e4:	65 c0       	rjmp	.+202    	; 0x6b0 <_ZN6SdFile7seekSetEm+0x126>
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
     5e6:	2a 85       	ldd	r18, Y+10	; 0x0a
     5e8:	3b 85       	ldd	r19, Y+11	; 0x0b
     5ea:	4c 85       	ldd	r20, Y+12	; 0x0c
     5ec:	5d 85       	ldd	r21, Y+13	; 0x0d
     5ee:	eb 8d       	ldd	r30, Y+27	; 0x1b
     5f0:	fc 8d       	ldd	r31, Y+28	; 0x1c
     5f2:	85 85       	ldd	r24, Z+13	; 0x0d
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	09 96       	adiw	r24, 0x09	; 9
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	30 40       	sbci	r19, 0x00	; 0
     5fc:	40 40       	sbci	r20, 0x00	; 0
     5fe:	50 40       	sbci	r21, 0x00	; 0
     600:	39 01       	movw	r6, r18
     602:	4a 01       	movw	r8, r20
     604:	08 2e       	mov	r0, r24
     606:	04 c0       	rjmp	.+8      	; 0x610 <_ZN6SdFile7seekSetEm+0x86>
     608:	96 94       	lsr	r9
     60a:	87 94       	ror	r8
     60c:	77 94       	ror	r7
     60e:	67 94       	ror	r6
     610:	0a 94       	dec	r0
     612:	d2 f7       	brpl	.-12     	; 0x608 <_ZN6SdFile7seekSetEm+0x7e>
     614:	2f 5f       	subi	r18, 0xFF	; 255
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	4f 4f       	sbci	r20, 0xFF	; 255
     61a:	5f 4f       	sbci	r21, 0xFF	; 255
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
     61c:	08 94       	sec
     61e:	e1 08       	sbc	r14, r1
     620:	f1 08       	sbc	r15, r1
     622:	01 09       	sbc	r16, r1
     624:	11 09       	sbc	r17, r1
     626:	57 01       	movw	r10, r14
     628:	68 01       	movw	r12, r16
     62a:	04 c0       	rjmp	.+8      	; 0x634 <_ZN6SdFile7seekSetEm+0xaa>
     62c:	d6 94       	lsr	r13
     62e:	c7 94       	ror	r12
     630:	b7 94       	ror	r11
     632:	a7 94       	ror	r10
     634:	8a 95       	dec	r24
     636:	d2 f7       	brpl	.-12     	; 0x62c <_ZN6SdFile7seekSetEm+0xa2>
     638:	08 94       	sec
     63a:	e1 1c       	adc	r14, r1
     63c:	f1 1c       	adc	r15, r1
     63e:	01 1d       	adc	r16, r1
     640:	11 1d       	adc	r17, r1

  if (nNew < nCur || curPosition_ == 0) {
     642:	a6 14       	cp	r10, r6
     644:	b7 04       	cpc	r11, r7
     646:	c8 04       	cpc	r12, r8
     648:	d9 04       	cpc	r13, r9
     64a:	28 f0       	brcs	.+10     	; 0x656 <_ZN6SdFile7seekSetEm+0xcc>
     64c:	21 15       	cp	r18, r1
     64e:	31 05       	cpc	r19, r1
     650:	41 05       	cpc	r20, r1
     652:	51 05       	cpc	r21, r1
     654:	49 f4       	brne	.+18     	; 0x668 <_ZN6SdFile7seekSetEm+0xde>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
     656:	8f 89       	ldd	r24, Y+23	; 0x17
     658:	98 8d       	ldd	r25, Y+24	; 0x18
     65a:	a9 8d       	ldd	r26, Y+25	; 0x19
     65c:	ba 8d       	ldd	r27, Y+26	; 0x1a
     65e:	8e 83       	std	Y+6, r24	; 0x06
     660:	9f 83       	std	Y+7, r25	; 0x07
     662:	a8 87       	std	Y+8, r26	; 0x08
     664:	b9 87       	std	Y+9, r27	; 0x09
     666:	16 c0       	rjmp	.+44     	; 0x694 <_ZN6SdFile7seekSetEm+0x10a>
  } else {
    // advance from curPosition
    nNew -= nCur;
     668:	a6 18       	sub	r10, r6
     66a:	b7 08       	sbc	r11, r7
     66c:	c8 08       	sbc	r12, r8
     66e:	d9 08       	sbc	r13, r9
     670:	11 c0       	rjmp	.+34     	; 0x694 <_ZN6SdFile7seekSetEm+0x10a>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
     672:	4e 81       	ldd	r20, Y+6	; 0x06
     674:	5f 81       	ldd	r21, Y+7	; 0x07
     676:	68 85       	ldd	r22, Y+8	; 0x08
     678:	79 85       	ldd	r23, Y+9	; 0x09
     67a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     67c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     67e:	94 01       	movw	r18, r8
     680:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZNK8SdVolume6fatGetEmPm>
     684:	08 94       	sec
     686:	a1 08       	sbc	r10, r1
     688:	b1 08       	sbc	r11, r1
     68a:	c1 08       	sbc	r12, r1
     68c:	d1 08       	sbc	r13, r1
     68e:	88 23       	and	r24, r24
     690:	31 f4       	brne	.+12     	; 0x69e <_ZN6SdFile7seekSetEm+0x114>
     692:	10 c0       	rjmp	.+32     	; 0x6b4 <_ZN6SdFile7seekSetEm+0x12a>
     694:	86 e0       	ldi	r24, 0x06	; 6
     696:	88 2e       	mov	r8, r24
     698:	91 2c       	mov	r9, r1
     69a:	8c 0e       	add	r8, r28
     69c:	9d 1e       	adc	r9, r29
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
     69e:	a1 14       	cp	r10, r1
     6a0:	b1 04       	cpc	r11, r1
     6a2:	c1 04       	cpc	r12, r1
     6a4:	d1 04       	cpc	r13, r1
     6a6:	29 f7       	brne	.-54     	; 0x672 <_ZN6SdFile7seekSetEm+0xe8>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
     6a8:	ea 86       	std	Y+10, r14	; 0x0a
     6aa:	fb 86       	std	Y+11, r15	; 0x0b
     6ac:	0c 87       	std	Y+12, r16	; 0x0c
     6ae:	1d 87       	std	Y+13, r17	; 0x0d
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <_ZN6SdFile7seekSetEm+0x12c>
  return true;
     6b4:	80 e0       	ldi	r24, 0x00	; 0
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	bf 90       	pop	r11
     6c8:	af 90       	pop	r10
     6ca:	9f 90       	pop	r9
     6cc:	8f 90       	pop	r8
     6ce:	7f 90       	pop	r7
     6d0:	6f 90       	pop	r6
     6d2:	08 95       	ret
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
     6d4:	22 30       	cpi	r18, 0x02	; 2
     6d6:	09 f0       	breq	.+2      	; 0x6da <_ZN6SdFile7seekSetEm+0x150>
     6d8:	78 cf       	rjmp	.-272    	; 0x5ca <_ZN6SdFile7seekSetEm+0x40>
     6da:	e6 cf       	rjmp	.-52     	; 0x6a8 <_ZN6SdFile7seekSetEm+0x11e>

000006dc <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	ec 01       	movw	r28, r24
     6e2:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
     6e4:	6e 85       	ldd	r22, Y+14	; 0x0e
     6e6:	7f 85       	ldd	r23, Y+15	; 0x0f
     6e8:	88 89       	ldd	r24, Y+16	; 0x10
     6ea:	99 89       	ldd	r25, Y+17	; 0x11
     6ec:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN8SdVolume13cacheRawBlockEmh>
     6f0:	88 23       	and	r24, r24
     6f2:	19 f4       	brne	.+6      	; 0x6fa <_ZN6SdFile13cacheDirEntryEh+0x1e>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	0a c0       	rjmp	.+20     	; 0x70e <_ZN6SdFile13cacheDirEntryEh+0x32>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
     6fa:	8a 89       	ldd	r24, Y+18	; 0x12
     6fc:	28 2f       	mov	r18, r24
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	95 e0       	ldi	r25, 0x05	; 5
     702:	22 0f       	add	r18, r18
     704:	33 1f       	adc	r19, r19
     706:	9a 95       	dec	r25
     708:	e1 f7       	brne	.-8      	; 0x702 <_ZN6SdFile13cacheDirEntryEh+0x26>
     70a:	29 59       	subi	r18, 0x99	; 153
     70c:	3e 4f       	sbci	r19, 0xFE	; 254
}
     70e:	c9 01       	movw	r24, r18
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) return false;
     720:	fc 01       	movw	r30, r24
     722:	85 81       	ldd	r24, Z+5	; 0x05
     724:	88 23       	and	r24, r24
     726:	d9 f1       	breq	.+118    	; 0x79e <_ZN6SdFile4syncEv+0x88>

  if (flags_ & F_FILE_DIR_DIRTY) {
     728:	84 81       	ldd	r24, Z+4	; 0x04
     72a:	87 ff       	sbrs	r24, 7
     72c:	35 c0       	rjmp	.+106    	; 0x798 <_ZN6SdFile4syncEv+0x82>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
     72e:	c8 01       	movw	r24, r16
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_ZN6SdFile13cacheDirEntryEh>
     736:	ec 01       	movw	r28, r24
    if (!d) return false;
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	89 f1       	breq	.+98     	; 0x79e <_ZN6SdFile4syncEv+0x88>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
     73c:	f8 01       	movw	r30, r16
     73e:	85 81       	ldd	r24, Z+5	; 0x05
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	40 f4       	brcc	.+16     	; 0x754 <_ZN6SdFile4syncEv+0x3e>
     744:	83 89       	ldd	r24, Z+19	; 0x13
     746:	94 89       	ldd	r25, Z+20	; 0x14
     748:	a5 89       	ldd	r26, Z+21	; 0x15
     74a:	b6 89       	ldd	r27, Z+22	; 0x16
     74c:	8c 8f       	std	Y+28, r24	; 0x1c
     74e:	9d 8f       	std	Y+29, r25	; 0x1d
     750:	ae 8f       	std	Y+30, r26	; 0x1e
     752:	bf 8f       	std	Y+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
     754:	f8 01       	movw	r30, r16
     756:	87 89       	ldd	r24, Z+23	; 0x17
     758:	90 8d       	ldd	r25, Z+24	; 0x18
     75a:	9b 8f       	std	Y+27, r25	; 0x1b
     75c:	8a 8f       	std	Y+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
     75e:	87 89       	ldd	r24, Z+23	; 0x17
     760:	90 8d       	ldd	r25, Z+24	; 0x18
     762:	a1 8d       	ldd	r26, Z+25	; 0x19
     764:	b2 8d       	ldd	r27, Z+26	; 0x1a
     766:	cd 01       	movw	r24, r26
     768:	aa 27       	eor	r26, r26
     76a:	bb 27       	eor	r27, r27
     76c:	9d 8b       	std	Y+21, r25	; 0x15
     76e:	8c 8b       	std	Y+20, r24	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
     770:	e0 91 65 01 	lds	r30, 0x0165
     774:	f0 91 66 01 	lds	r31, 0x0166
     778:	30 97       	sbiw	r30, 0x00	; 0
     77a:	51 f0       	breq	.+20     	; 0x790 <_ZN6SdFile4syncEv+0x7a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
     77c:	be 01       	movw	r22, r28
     77e:	6a 5e       	subi	r22, 0xEA	; 234
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	ce 01       	movw	r24, r28
     784:	48 96       	adiw	r24, 0x18	; 24
     786:	09 95       	icall
      d->lastAccessDate = d->lastWriteDate;
     788:	88 8d       	ldd	r24, Y+24	; 0x18
     78a:	99 8d       	ldd	r25, Y+25	; 0x19
     78c:	9b 8b       	std	Y+19, r25	; 0x13
     78e:	8a 8b       	std	Y+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
     790:	f8 01       	movw	r30, r16
     792:	84 81       	ldd	r24, Z+4	; 0x04
     794:	8f 77       	andi	r24, 0x7F	; 127
     796:	84 83       	std	Z+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
     798:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN8SdVolume10cacheFlushEv>
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <_ZN6SdFile4syncEv+0x8a>
     79e:	80 e0       	ldi	r24, 0x00	; 0
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
     7b0:	9c 01       	movw	r18, r24
     7b2:	2a 5f       	subi	r18, 0xFA	; 250
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	0e 94 4a 07 	call	0xe94	; 0xe94 <_ZN8SdVolume15allocContiguousEmPm>
     7c6:	88 23       	and	r24, r24
     7c8:	a1 f0       	breq	.+40     	; 0x7f2 <_ZN6SdFile10addClusterEv+0x48>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
     7ca:	8f 89       	ldd	r24, Y+23	; 0x17
     7cc:	98 8d       	ldd	r25, Y+24	; 0x18
     7ce:	a9 8d       	ldd	r26, Y+25	; 0x19
     7d0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	a1 05       	cpc	r26, r1
     7d6:	b1 05       	cpc	r27, r1
     7d8:	59 f4       	brne	.+22     	; 0x7f0 <_ZN6SdFile10addClusterEv+0x46>
    firstCluster_ = curCluster_;
     7da:	8e 81       	ldd	r24, Y+6	; 0x06
     7dc:	9f 81       	ldd	r25, Y+7	; 0x07
     7de:	a8 85       	ldd	r26, Y+8	; 0x08
     7e0:	b9 85       	ldd	r27, Y+9	; 0x09
     7e2:	8f 8b       	std	Y+23, r24	; 0x17
     7e4:	98 8f       	std	Y+24, r25	; 0x18
     7e6:	a9 8f       	std	Y+25, r26	; 0x19
     7e8:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
     7ea:	8c 81       	ldd	r24, Y+4	; 0x04
     7ec:	80 68       	ori	r24, 0x80	; 128
     7ee:	8c 83       	std	Y+4, r24	; 0x04
     7f0:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
     7f8:	2f 92       	push	r2
     7fa:	3f 92       	push	r3
     7fc:	4f 92       	push	r4
     7fe:	5f 92       	push	r5
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	df 93       	push	r29
     818:	cf 93       	push	r28
     81a:	00 d0       	rcall	.+0      	; 0x81c <_ZN6SdFile5writeEPKvj+0x24>
     81c:	00 d0       	rcall	.+0      	; 0x81e <_ZN6SdFile5writeEPKvj+0x26>
     81e:	00 d0       	rcall	.+0      	; 0x820 <_ZN6SdFile5writeEPKvj+0x28>
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	6c 01       	movw	r12, r24
     826:	16 2f       	mov	r17, r22
     828:	07 2f       	mov	r16, r23
     82a:	5e 83       	std	Y+6, r21	; 0x06
     82c:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
     82e:	dc 01       	movw	r26, r24
     830:	15 96       	adiw	r26, 0x05	; 5
     832:	8c 91       	ld	r24, X
     834:	15 97       	sbiw	r26, 0x05	; 5
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	09 f0       	breq	.+2      	; 0x83c <_ZN6SdFile5writeEPKvj+0x44>
     83a:	70 c1       	rjmp	.+736    	; 0xb1c <__stack+0x21d>
     83c:	14 96       	adiw	r26, 0x04	; 4
     83e:	8c 91       	ld	r24, X
     840:	81 ff       	sbrs	r24, 1
     842:	6c c1       	rjmp	.+728    	; 0xb1c <__stack+0x21d>
     844:	8e c1       	rjmp	.+796    	; 0xb62 <__stack+0x263>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
     846:	f6 01       	movw	r30, r12
     848:	43 89       	ldd	r20, Z+19	; 0x13
     84a:	54 89       	ldd	r21, Z+20	; 0x14
     84c:	65 89       	ldd	r22, Z+21	; 0x15
     84e:	76 89       	ldd	r23, Z+22	; 0x16
     850:	82 85       	ldd	r24, Z+10	; 0x0a
     852:	93 85       	ldd	r25, Z+11	; 0x0b
     854:	a4 85       	ldd	r26, Z+12	; 0x0c
     856:	b5 85       	ldd	r27, Z+13	; 0x0d
     858:	84 17       	cp	r24, r20
     85a:	95 07       	cpc	r25, r21
     85c:	a6 07       	cpc	r26, r22
     85e:	b7 07       	cpc	r27, r23
     860:	31 f0       	breq	.+12     	; 0x86e <_ZN6SdFile5writeEPKvj+0x76>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
     862:	c6 01       	movw	r24, r12
     864:	0e 94 c5 02 	call	0x58a	; 0x58a <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
     868:	88 23       	and	r24, r24
     86a:	09 f4       	brne	.+2      	; 0x86e <_ZN6SdFile5writeEPKvj+0x76>
     86c:	57 c1       	rjmp	.+686    	; 0xb1c <__stack+0x21d>
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
     86e:	81 2f       	mov	r24, r17
     870:	90 2f       	mov	r25, r16
     872:	9c 01       	movw	r18, r24
     874:	29 01       	movw	r4, r18
     876:	2d 80       	ldd	r2, Y+5	; 0x05
     878:	3e 80       	ldd	r3, Y+6	; 0x06
     87a:	17 c1       	rjmp	.+558    	; 0xaaa <__stack+0x1ab>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
     87c:	d6 01       	movw	r26, r12
     87e:	5b 96       	adiw	r26, 0x1b	; 27
     880:	ed 91       	ld	r30, X+
     882:	fc 91       	ld	r31, X
     884:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
     886:	da 01       	movw	r26, r20
     888:	c9 01       	movw	r24, r18
     88a:	19 e0       	ldi	r17, 0x09	; 9
     88c:	b6 95       	lsr	r27
     88e:	a7 95       	ror	r26
     890:	97 95       	ror	r25
     892:	87 95       	ror	r24
     894:	1a 95       	dec	r17
     896:	d1 f7       	brne	.-12     	; 0x88c <_ZN6SdFile5writeEPKvj+0x94>
     898:	74 80       	ldd	r7, Z+4	; 0x04
     89a:	7a 94       	dec	r7
     89c:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
     89e:	7f ef       	ldi	r23, 0xFF	; 255
     8a0:	87 2e       	mov	r8, r23
     8a2:	71 e0       	ldi	r23, 0x01	; 1
     8a4:	97 2e       	mov	r9, r23
     8a6:	82 22       	and	r8, r18
     8a8:	93 22       	and	r9, r19
    if (blockOfCluster == 0 && blockOffset == 0) {
     8aa:	77 20       	and	r7, r7
     8ac:	09 f0       	breq	.+2      	; 0x8b0 <_ZN6SdFile5writeEPKvj+0xb8>
     8ae:	4e c0       	rjmp	.+156    	; 0x94c <__stack+0x4d>
     8b0:	81 14       	cp	r8, r1
     8b2:	91 04       	cpc	r9, r1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <_ZN6SdFile5writeEPKvj+0xc0>
     8b6:	4a c0       	rjmp	.+148    	; 0x94c <__stack+0x4d>
      // start of new cluster
      if (curCluster_ == 0) {
     8b8:	d6 01       	movw	r26, r12
     8ba:	16 96       	adiw	r26, 0x06	; 6
     8bc:	4d 91       	ld	r20, X+
     8be:	5d 91       	ld	r21, X+
     8c0:	6d 91       	ld	r22, X+
     8c2:	7c 91       	ld	r23, X
     8c4:	19 97       	sbiw	r26, 0x09	; 9
     8c6:	41 15       	cp	r20, r1
     8c8:	51 05       	cpc	r21, r1
     8ca:	61 05       	cpc	r22, r1
     8cc:	71 05       	cpc	r23, r1
     8ce:	81 f4       	brne	.+32     	; 0x8f0 <_ZN6SdFile5writeEPKvj+0xf8>
        if (firstCluster_ == 0) {
     8d0:	57 96       	adiw	r26, 0x17	; 23
     8d2:	8d 91       	ld	r24, X+
     8d4:	9d 91       	ld	r25, X+
     8d6:	0d 90       	ld	r0, X+
     8d8:	bc 91       	ld	r27, X
     8da:	a0 2d       	mov	r26, r0
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	a1 05       	cpc	r26, r1
     8e0:	b1 05       	cpc	r27, r1
     8e2:	49 f1       	breq	.+82     	; 0x936 <__stack+0x37>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
     8e4:	f6 01       	movw	r30, r12
     8e6:	86 83       	std	Z+6, r24	; 0x06
     8e8:	97 83       	std	Z+7, r25	; 0x07
     8ea:	a0 87       	std	Z+8, r26	; 0x08
     8ec:	b1 87       	std	Z+9, r27	; 0x09
     8ee:	2e c0       	rjmp	.+92     	; 0x94c <__stack+0x4d>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
     8f0:	cf 01       	movw	r24, r30
     8f2:	9e 01       	movw	r18, r28
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZNK8SdVolume6fatGetEmPm>
     8fc:	88 23       	and	r24, r24
     8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
     900:	14 c1       	rjmp	.+552    	; 0xb2a <__stack+0x22b>
        if (vol_->isEOC(next)) {
     902:	29 81       	ldd	r18, Y+1	; 0x01
     904:	3a 81       	ldd	r19, Y+2	; 0x02
     906:	4b 81       	ldd	r20, Y+3	; 0x03
     908:	5c 81       	ldd	r21, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
     90a:	d6 01       	movw	r26, r12
     90c:	5b 96       	adiw	r26, 0x1b	; 27
     90e:	ed 91       	ld	r30, X+
     910:	fc 91       	ld	r31, X
     912:	5c 97       	sbiw	r26, 0x1c	; 28
     914:	87 89       	ldd	r24, Z+23	; 0x17
     916:	80 31       	cpi	r24, 0x10	; 16
     918:	29 f0       	breq	.+10     	; 0x924 <__stack+0x25>
     91a:	88 ef       	ldi	r24, 0xF8	; 248
     91c:	9f ef       	ldi	r25, 0xFF	; 255
     91e:	af ef       	ldi	r26, 0xFF	; 255
     920:	bf e0       	ldi	r27, 0x0F	; 15
     922:	04 c0       	rjmp	.+8      	; 0x92c <__stack+0x2d>
     924:	88 ef       	ldi	r24, 0xF8	; 248
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	28 17       	cp	r18, r24
     92e:	39 07       	cpc	r19, r25
     930:	4a 07       	cpc	r20, r26
     932:	5b 07       	cpc	r21, r27
     934:	30 f0       	brcs	.+12     	; 0x942 <__stack+0x43>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
     936:	c6 01       	movw	r24, r12
     938:	0e 94 d5 03 	call	0x7aa	; 0x7aa <_ZN6SdFile10addClusterEv>
     93c:	88 23       	and	r24, r24
     93e:	31 f4       	brne	.+12     	; 0x94c <__stack+0x4d>
     940:	ed c0       	rjmp	.+474    	; 0xb1c <__stack+0x21d>
        } else {
          curCluster_ = next;
     942:	f6 01       	movw	r30, r12
     944:	26 83       	std	Z+6, r18	; 0x06
     946:	37 83       	std	Z+7, r19	; 0x07
     948:	40 87       	std	Z+8, r20	; 0x08
     94a:	51 87       	std	Z+9, r21	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	88 19       	sub	r24, r8
     952:	99 09       	sbc	r25, r9
     954:	51 01       	movw	r10, r2
     956:	82 15       	cp	r24, r2
     958:	93 05       	cpc	r25, r3
     95a:	08 f4       	brcc	.+2      	; 0x95e <__stack+0x5f>
     95c:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
     95e:	d6 01       	movw	r26, r12
     960:	5b 96       	adiw	r26, 0x1b	; 27
     962:	ed 91       	ld	r30, X+
     964:	fc 91       	ld	r31, X
     966:	5c 97       	sbiw	r26, 0x1c	; 28
     968:	16 96       	adiw	r26, 0x06	; 6
     96a:	ed 90       	ld	r14, X+
     96c:	fd 90       	ld	r15, X+
     96e:	0d 91       	ld	r16, X+
     970:	1c 91       	ld	r17, X
     972:	19 97       	sbiw	r26, 0x09	; 9
     974:	8e ef       	ldi	r24, 0xFE	; 254
     976:	9f ef       	ldi	r25, 0xFF	; 255
     978:	af ef       	ldi	r26, 0xFF	; 255
     97a:	bf ef       	ldi	r27, 0xFF	; 255
     97c:	e8 0e       	add	r14, r24
     97e:	f9 1e       	adc	r15, r25
     980:	0a 1f       	adc	r16, r26
     982:	1b 1f       	adc	r17, r27
     984:	05 84       	ldd	r0, Z+13	; 0x0d
     986:	04 c0       	rjmp	.+8      	; 0x990 <__stack+0x91>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__stack+0x89>
     994:	86 85       	ldd	r24, Z+14	; 0x0e
     996:	97 85       	ldd	r25, Z+15	; 0x0f
     998:	a0 89       	ldd	r26, Z+16	; 0x10
     99a:	b1 89       	ldd	r27, Z+17	; 0x11
     99c:	e8 0e       	add	r14, r24
     99e:	f9 1e       	adc	r15, r25
     9a0:	0a 1f       	adc	r16, r26
     9a2:	1b 1f       	adc	r17, r27
     9a4:	e7 0c       	add	r14, r7
     9a6:	f1 1c       	adc	r15, r1
     9a8:	01 1d       	adc	r16, r1
     9aa:	11 1d       	adc	r17, r1
    if (n == 512) {
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a9 16       	cp	r10, r25
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	b9 06       	cpc	r11, r25
     9b4:	51 f5       	brne	.+84     	; 0xa0a <__stack+0x10b>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
     9b6:	80 91 00 01 	lds	r24, 0x0100
     9ba:	90 91 01 01 	lds	r25, 0x0101
     9be:	a0 91 02 01 	lds	r26, 0x0102
     9c2:	b0 91 03 01 	lds	r27, 0x0103
     9c6:	8e 15       	cp	r24, r14
     9c8:	9f 05       	cpc	r25, r15
     9ca:	a0 07       	cpc	r26, r16
     9cc:	b1 07       	cpc	r27, r17
     9ce:	61 f4       	brne	.+24     	; 0x9e8 <__stack+0xe9>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	9f ef       	ldi	r25, 0xFF	; 255
     9d4:	af ef       	ldi	r26, 0xFF	; 255
     9d6:	bf ef       	ldi	r27, 0xFF	; 255
     9d8:	80 93 00 01 	sts	0x0100, r24
     9dc:	90 93 01 01 	sts	0x0101, r25
     9e0:	a0 93 02 01 	sts	0x0102, r26
     9e4:	b0 93 03 01 	sts	0x0103, r27
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
     9e8:	80 91 67 03 	lds	r24, 0x0367
     9ec:	90 91 68 03 	lds	r25, 0x0368
     9f0:	b8 01       	movw	r22, r16
     9f2:	a7 01       	movw	r20, r14
     9f4:	92 01       	movw	r18, r4
     9f6:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
     9fa:	88 23       	and	r24, r24
     9fc:	09 f4       	brne	.+2      	; 0xa00 <__stack+0x101>
     9fe:	8e c0       	rjmp	.+284    	; 0xb1c <__stack+0x21d>
      src += 512;
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	b2 e0       	ldi	r27, 0x02	; 2
     a04:	4a 0e       	add	r4, r26
     a06:	5b 1e       	adc	r5, r27
     a08:	3e c0       	rjmp	.+124    	; 0xa86 <__stack+0x187>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
     a0a:	81 14       	cp	r8, r1
     a0c:	91 04       	cpc	r9, r1
     a0e:	09 f5       	brne	.+66     	; 0xa52 <__stack+0x153>
     a10:	f6 01       	movw	r30, r12
     a12:	22 85       	ldd	r18, Z+10	; 0x0a
     a14:	33 85       	ldd	r19, Z+11	; 0x0b
     a16:	44 85       	ldd	r20, Z+12	; 0x0c
     a18:	55 85       	ldd	r21, Z+13	; 0x0d
     a1a:	83 89       	ldd	r24, Z+19	; 0x13
     a1c:	94 89       	ldd	r25, Z+20	; 0x14
     a1e:	a5 89       	ldd	r26, Z+21	; 0x15
     a20:	b6 89       	ldd	r27, Z+22	; 0x16
     a22:	28 17       	cp	r18, r24
     a24:	39 07       	cpc	r19, r25
     a26:	4a 07       	cpc	r20, r26
     a28:	5b 07       	cpc	r21, r27
     a2a:	98 f0       	brcs	.+38     	; 0xa52 <__stack+0x153>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
     a2c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN8SdVolume10cacheFlushEv>
     a30:	88 23       	and	r24, r24
     a32:	09 f4       	brne	.+2      	; 0xa36 <__stack+0x137>
     a34:	73 c0       	rjmp	.+230    	; 0xb1c <__stack+0x21d>
        SdVolume::cacheBlockNumber_ = block;
     a36:	e0 92 00 01 	sts	0x0100, r14
     a3a:	f0 92 01 01 	sts	0x0101, r15
     a3e:	00 93 02 01 	sts	0x0102, r16
     a42:	10 93 03 01 	sts	0x0103, r17
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
     a46:	80 91 69 03 	lds	r24, 0x0369
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	80 93 69 03 	sts	0x0369, r24
     a50:	08 c0       	rjmp	.+16     	; 0xa62 <__stack+0x163>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
     a52:	c8 01       	movw	r24, r16
     a54:	b7 01       	movw	r22, r14
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN8SdVolume13cacheRawBlockEmh>
     a5c:	88 23       	and	r24, r24
     a5e:	09 f4       	brne	.+2      	; 0xa62 <__stack+0x163>
     a60:	5d c0       	rjmp	.+186    	; 0xb1c <__stack+0x21d>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
     a62:	94 01       	movw	r18, r8
     a64:	29 59       	subi	r18, 0x99	; 153
     a66:	3e 4f       	sbci	r19, 0xFE	; 254
      uint8_t* end = dst + n;
     a68:	a9 01       	movw	r20, r18
     a6a:	4a 0d       	add	r20, r10
     a6c:	5b 1d       	adc	r21, r11
     a6e:	d2 01       	movw	r26, r4
     a70:	f9 01       	movw	r30, r18
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x179>
      while (dst != end) *dst++ = *src++;
     a74:	8d 91       	ld	r24, X+
     a76:	81 93       	st	Z+, r24
     a78:	e4 17       	cp	r30, r20
     a7a:	f5 07       	cpc	r31, r21
     a7c:	d9 f7       	brne	.-10     	; 0xa74 <__stack+0x175>
     a7e:	e2 1b       	sub	r30, r18
     a80:	f3 0b       	sbc	r31, r19
     a82:	4e 0e       	add	r4, r30
     a84:	5f 1e       	adc	r5, r31
    }
    nToWrite -= n;
     a86:	2a 18       	sub	r2, r10
     a88:	3b 08       	sbc	r3, r11
    curPosition_ += n;
     a8a:	95 01       	movw	r18, r10
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
     a90:	f6 01       	movw	r30, r12
     a92:	82 85       	ldd	r24, Z+10	; 0x0a
     a94:	93 85       	ldd	r25, Z+11	; 0x0b
     a96:	a4 85       	ldd	r26, Z+12	; 0x0c
     a98:	b5 85       	ldd	r27, Z+13	; 0x0d
     a9a:	82 0f       	add	r24, r18
     a9c:	93 1f       	adc	r25, r19
     a9e:	a4 1f       	adc	r26, r20
     aa0:	b5 1f       	adc	r27, r21
     aa2:	82 87       	std	Z+10, r24	; 0x0a
     aa4:	93 87       	std	Z+11, r25	; 0x0b
     aa6:	a4 87       	std	Z+12, r26	; 0x0c
     aa8:	b5 87       	std	Z+13, r27	; 0x0d
     aaa:	d6 01       	movw	r26, r12
     aac:	1a 96       	adiw	r26, 0x0a	; 10
     aae:	2d 91       	ld	r18, X+
     ab0:	3d 91       	ld	r19, X+
     ab2:	4d 91       	ld	r20, X+
     ab4:	5c 91       	ld	r21, X
     ab6:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
     ab8:	21 14       	cp	r2, r1
     aba:	31 04       	cpc	r3, r1
     abc:	09 f0       	breq	.+2      	; 0xac0 <__stack+0x1c1>
     abe:	de ce       	rjmp	.-580    	; 0x87c <_ZN6SdFile5writeEPKvj+0x84>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
     ac0:	53 96       	adiw	r26, 0x13	; 19
     ac2:	8d 91       	ld	r24, X+
     ac4:	9d 91       	ld	r25, X+
     ac6:	0d 90       	ld	r0, X+
     ac8:	bc 91       	ld	r27, X
     aca:	a0 2d       	mov	r26, r0
     acc:	82 17       	cp	r24, r18
     ace:	93 07       	cpc	r25, r19
     ad0:	a4 07       	cpc	r26, r20
     ad2:	b5 07       	cpc	r27, r21
     ad4:	48 f4       	brcc	.+18     	; 0xae8 <__stack+0x1e9>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
     ad6:	f6 01       	movw	r30, r12
     ad8:	23 8b       	std	Z+19, r18	; 0x13
     ada:	34 8b       	std	Z+20, r19	; 0x14
     adc:	45 8b       	std	Z+21, r20	; 0x15
     ade:	56 8b       	std	Z+22, r21	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	80 68       	ori	r24, 0x80	; 128
     ae4:	84 83       	std	Z+4, r24	; 0x04
     ae6:	11 c0       	rjmp	.+34     	; 0xb0a <__stack+0x20b>
  } else if (dateTime_ && nbyte) {
     ae8:	80 91 65 01 	lds	r24, 0x0165
     aec:	90 91 66 01 	lds	r25, 0x0166
     af0:	89 2b       	or	r24, r25
     af2:	59 f0       	breq	.+22     	; 0xb0a <__stack+0x20b>
     af4:	8d 81       	ldd	r24, Y+5	; 0x05
     af6:	9e 81       	ldd	r25, Y+6	; 0x06
     af8:	89 2b       	or	r24, r25
     afa:	39 f0       	breq	.+14     	; 0xb0a <__stack+0x20b>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
     afc:	d6 01       	movw	r26, r12
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8c 91       	ld	r24, X
     b02:	14 97       	sbiw	r26, 0x04	; 4
     b04:	80 68       	ori	r24, 0x80	; 128
     b06:	14 96       	adiw	r26, 0x04	; 4
     b08:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
     b0a:	f6 01       	movw	r30, r12
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	83 ff       	sbrs	r24, 3
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <__stack+0x22f>
    if (!sync()) goto writeErrorReturn;
     b12:	c6 01       	movw	r24, r12
     b14:	0e 94 8b 03 	call	0x716	; 0x716 <_ZN6SdFile4syncEv>
     b18:	88 23       	and	r24, r24
     b1a:	49 f4       	brne	.+18     	; 0xb2e <__stack+0x22f>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	d6 01       	movw	r26, r12
     b22:	13 96       	adiw	r26, 0x03	; 3
     b24:	9c 93       	st	X, r25
     b26:	8e 93       	st	-X, r24
     b28:	12 97       	sbiw	r26, 0x02	; 2
     b2a:	1e 82       	std	Y+6, r1	; 0x06
     b2c:	1d 82       	std	Y+5, r1	; 0x05
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
     b2e:	8d 81       	ldd	r24, Y+5	; 0x05
     b30:	9e 81       	ldd	r25, Y+6	; 0x06
     b32:	26 96       	adiw	r28, 0x06	; 6
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	cf 91       	pop	r28
     b40:	df 91       	pop	r29
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	9f 90       	pop	r9
     b54:	8f 90       	pop	r8
     b56:	7f 90       	pop	r7
     b58:	5f 90       	pop	r5
     b5a:	4f 90       	pop	r4
     b5c:	3f 90       	pop	r3
     b5e:	2f 90       	pop	r2
     b60:	08 95       	ret

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
     b62:	82 fd       	sbrc	r24, 2
     b64:	70 ce       	rjmp	.-800    	; 0x846 <_ZN6SdFile5writeEPKvj+0x4e>
     b66:	83 ce       	rjmp	.-762    	; 0x86e <_ZN6SdFile5writeEPKvj+0x76>

00000b68 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
     b74:	be 01       	movw	r22, r28
     b76:	6f 5f       	subi	r22, 0xFF	; 255
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_ZN6SdFile5writeEPKvj>
}
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
     b8a:	80 91 69 03 	lds	r24, 0x0369
     b8e:	88 23       	and	r24, r24
     b90:	99 f1       	breq	.+102    	; 0xbf8 <_ZN8SdVolume10cacheFlushEv+0x6e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
     b92:	40 91 00 01 	lds	r20, 0x0100
     b96:	50 91 01 01 	lds	r21, 0x0101
     b9a:	60 91 02 01 	lds	r22, 0x0102
     b9e:	70 91 03 01 	lds	r23, 0x0103
     ba2:	80 91 67 03 	lds	r24, 0x0367
     ba6:	90 91 68 03 	lds	r25, 0x0368
     baa:	27 e6       	ldi	r18, 0x67	; 103
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN7Sd2Card10writeBlockEmPKh>
     bb2:	88 23       	and	r24, r24
     bb4:	19 f1       	breq	.+70     	; 0xbfc <_ZN8SdVolume10cacheFlushEv+0x72>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
     bb6:	40 91 6a 03 	lds	r20, 0x036A
     bba:	50 91 6b 03 	lds	r21, 0x036B
     bbe:	60 91 6c 03 	lds	r22, 0x036C
     bc2:	70 91 6d 03 	lds	r23, 0x036D
     bc6:	41 15       	cp	r20, r1
     bc8:	51 05       	cpc	r21, r1
     bca:	61 05       	cpc	r22, r1
     bcc:	71 05       	cpc	r23, r1
     bce:	91 f0       	breq	.+36     	; 0xbf4 <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
     bd0:	80 91 67 03 	lds	r24, 0x0367
     bd4:	90 91 68 03 	lds	r25, 0x0368
     bd8:	27 e6       	ldi	r18, 0x67	; 103
     bda:	31 e0       	ldi	r19, 0x01	; 1
     bdc:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN7Sd2Card10writeBlockEmPKh>
     be0:	88 23       	and	r24, r24
     be2:	61 f0       	breq	.+24     	; 0xbfc <_ZN8SdVolume10cacheFlushEv+0x72>
        return false;
      }
      cacheMirrorBlock_ = 0;
     be4:	10 92 6a 03 	sts	0x036A, r1
     be8:	10 92 6b 03 	sts	0x036B, r1
     bec:	10 92 6c 03 	sts	0x036C, r1
     bf0:	10 92 6d 03 	sts	0x036D, r1
    }
    cacheDirty_ = 0;
     bf4:	10 92 69 03 	sts	0x0369, r1
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	08 95       	ret
     bfc:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
     bfe:	08 95       	ret

00000c00 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	7b 01       	movw	r14, r22
     c0c:	8c 01       	movw	r16, r24
     c0e:	d4 2e       	mov	r13, r20
  if (cacheBlockNumber_ != blockNumber) {
     c10:	80 91 00 01 	lds	r24, 0x0100
     c14:	90 91 01 01 	lds	r25, 0x0101
     c18:	a0 91 02 01 	lds	r26, 0x0102
     c1c:	b0 91 03 01 	lds	r27, 0x0103
     c20:	8e 15       	cp	r24, r14
     c22:	9f 05       	cpc	r25, r15
     c24:	a0 07       	cpc	r26, r16
     c26:	b1 07       	cpc	r27, r17
     c28:	c1 f0       	breq	.+48     	; 0xc5a <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
     c2a:	0e 94 c5 05 	call	0xb8a	; 0xb8a <_ZN8SdVolume10cacheFlushEv>
     c2e:	88 23       	and	r24, r24
     c30:	d9 f0       	breq	.+54     	; 0xc68 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
     c32:	80 91 67 03 	lds	r24, 0x0367
     c36:	90 91 68 03 	lds	r25, 0x0368
     c3a:	b8 01       	movw	r22, r16
     c3c:	a7 01       	movw	r20, r14
     c3e:	27 e6       	ldi	r18, 0x67	; 103
     c40:	31 e0       	ldi	r19, 0x01	; 1
     c42:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7Sd2Card9readBlockEmPh>
     c46:	88 23       	and	r24, r24
     c48:	79 f0       	breq	.+30     	; 0xc68 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    cacheBlockNumber_ = blockNumber;
     c4a:	e0 92 00 01 	sts	0x0100, r14
     c4e:	f0 92 01 01 	sts	0x0101, r15
     c52:	00 93 02 01 	sts	0x0102, r16
     c56:	10 93 03 01 	sts	0x0103, r17
  }
  cacheDirty_ |= action;
     c5a:	80 91 69 03 	lds	r24, 0x0369
     c5e:	8d 29       	or	r24, r13
     c60:	80 93 69 03 	sts	0x0369, r24
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
  return true;
     c68:	80 e0       	ldi	r24, 0x00	; 0
}
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	08 95       	ret

00000c76 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
     c76:	4f 92       	push	r4
     c78:	5f 92       	push	r5
     c7a:	6f 92       	push	r6
     c7c:	7f 92       	push	r7
     c7e:	8f 92       	push	r8
     c80:	9f 92       	push	r9
     c82:	af 92       	push	r10
     c84:	bf 92       	push	r11
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	ec 01       	movw	r28, r24
     c98:	6a 01       	movw	r12, r20
     c9a:	7b 01       	movw	r14, r22
     c9c:	28 01       	movw	r4, r16
     c9e:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
     ca0:	42 30       	cpi	r20, 0x02	; 2
     ca2:	51 05       	cpc	r21, r1
     ca4:	61 05       	cpc	r22, r1
     ca6:	71 05       	cpc	r23, r1
     ca8:	08 f4       	brcc	.+2      	; 0xcac <_ZN8SdVolume6fatPutEmm+0x36>
     caa:	6f c0       	rjmp	.+222    	; 0xd8a <_ZN8SdVolume6fatPutEmm+0x114>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
     cac:	89 85       	ldd	r24, Y+9	; 0x09
     cae:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb0:	ab 85       	ldd	r26, Y+11	; 0x0b
     cb2:	bc 85       	ldd	r27, Y+12	; 0x0c
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	a1 1d       	adc	r26, r1
     cb8:	b1 1d       	adc	r27, r1
     cba:	84 17       	cp	r24, r20
     cbc:	95 07       	cpc	r25, r21
     cbe:	a6 07       	cpc	r26, r22
     cc0:	b7 07       	cpc	r27, r23
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <_ZN8SdVolume6fatPutEmm+0x50>
     cc4:	62 c0       	rjmp	.+196    	; 0xd8a <_ZN8SdVolume6fatPutEmm+0x114>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
     cc6:	2b 89       	ldd	r18, Y+19	; 0x13
     cc8:	3c 89       	ldd	r19, Y+20	; 0x14
     cca:	4d 89       	ldd	r20, Y+21	; 0x15
     ccc:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     cce:	8f 89       	ldd	r24, Y+23	; 0x17
     cd0:	80 31       	cpi	r24, 0x10	; 16
     cd2:	29 f4       	brne	.+10     	; 0xcde <_ZN8SdVolume6fatPutEmm+0x68>
     cd4:	99 27       	eor	r25, r25
     cd6:	8f 2d       	mov	r24, r15
     cd8:	7e 2d       	mov	r23, r14
     cda:	6d 2d       	mov	r22, r13
     cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <_ZN8SdVolume6fatPutEmm+0x7a>
     cde:	c7 01       	movw	r24, r14
     ce0:	b6 01       	movw	r22, r12
     ce2:	17 e0       	ldi	r17, 0x07	; 7
     ce4:	96 95       	lsr	r25
     ce6:	87 95       	ror	r24
     ce8:	77 95       	ror	r23
     cea:	67 95       	ror	r22
     cec:	1a 95       	dec	r17
     cee:	d1 f7       	brne	.-12     	; 0xce4 <_ZN8SdVolume6fatPutEmm+0x6e>
     cf0:	4b 01       	movw	r8, r22
     cf2:	5c 01       	movw	r10, r24
     cf4:	82 0e       	add	r8, r18
     cf6:	93 1e       	adc	r9, r19
     cf8:	a4 1e       	adc	r10, r20
     cfa:	b5 1e       	adc	r11, r21

  if (lba != cacheBlockNumber_) {
     cfc:	80 91 00 01 	lds	r24, 0x0100
     d00:	90 91 01 01 	lds	r25, 0x0101
     d04:	a0 91 02 01 	lds	r26, 0x0102
     d08:	b0 91 03 01 	lds	r27, 0x0103
     d0c:	88 16       	cp	r8, r24
     d0e:	99 06       	cpc	r9, r25
     d10:	aa 06       	cpc	r10, r26
     d12:	bb 06       	cpc	r11, r27
     d14:	39 f0       	breq	.+14     	; 0xd24 <_ZN8SdVolume6fatPutEmm+0xae>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     d16:	c5 01       	movw	r24, r10
     d18:	b4 01       	movw	r22, r8
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN8SdVolume13cacheRawBlockEmh>
     d20:	88 23       	and	r24, r24
     d22:	99 f1       	breq	.+102    	; 0xd8a <_ZN8SdVolume6fatPutEmm+0x114>
  }
  // store entry
  if (fatType_ == 16) {
     d24:	8f 89       	ldd	r24, Y+23	; 0x17
     d26:	80 31       	cpi	r24, 0x10	; 16
     d28:	49 f4       	brne	.+18     	; 0xd3c <_ZN8SdVolume6fatPutEmm+0xc6>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
     d2a:	f6 01       	movw	r30, r12
     d2c:	f0 70       	andi	r31, 0x00	; 0
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	e9 59       	subi	r30, 0x99	; 153
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	51 82       	std	Z+1, r5	; 0x01
     d38:	40 82       	st	Z, r4
     d3a:	0d c0       	rjmp	.+26     	; 0xd56 <_ZN8SdVolume6fatPutEmm+0xe0>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
     d3c:	f6 01       	movw	r30, r12
     d3e:	ef 77       	andi	r30, 0x7F	; 127
     d40:	f0 70       	andi	r31, 0x00	; 0
     d42:	ee 0f       	add	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	e9 59       	subi	r30, 0x99	; 153
     d4c:	fe 4f       	sbci	r31, 0xFE	; 254
     d4e:	40 82       	st	Z, r4
     d50:	51 82       	std	Z+1, r5	; 0x01
     d52:	62 82       	std	Z+2, r6	; 0x02
     d54:	73 82       	std	Z+3, r7	; 0x03
     d56:	80 91 69 03 	lds	r24, 0x0369
     d5a:	81 60       	ori	r24, 0x01	; 1
     d5c:	80 93 69 03 	sts	0x0369, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
     d60:	8a 89       	ldd	r24, Y+18	; 0x12
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	80 f0       	brcs	.+32     	; 0xd86 <_ZN8SdVolume6fatPutEmm+0x110>
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	af 81       	ldd	r26, Y+7	; 0x07
     d6c:	b8 85       	ldd	r27, Y+8	; 0x08
     d6e:	88 0e       	add	r8, r24
     d70:	99 1e       	adc	r9, r25
     d72:	aa 1e       	adc	r10, r26
     d74:	bb 1e       	adc	r11, r27
     d76:	80 92 6a 03 	sts	0x036A, r8
     d7a:	90 92 6b 03 	sts	0x036B, r9
     d7e:	a0 92 6c 03 	sts	0x036C, r10
     d82:	b0 92 6d 03 	sts	0x036D, r11
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <_ZN8SdVolume6fatPutEmm+0x116>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
  return true;
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	9f 90       	pop	r9
     da2:	8f 90       	pop	r8
     da4:	7f 90       	pop	r7
     da6:	6f 90       	pop	r6
     da8:	5f 90       	pop	r5
     daa:	4f 90       	pop	r4
     dac:	08 95       	ret

00000dae <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
     dae:	cf 92       	push	r12
     db0:	df 92       	push	r13
     db2:	ef 92       	push	r14
     db4:	ff 92       	push	r15
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	ec 01       	movw	r28, r24
     dc0:	7a 01       	movw	r14, r20
     dc2:	8b 01       	movw	r16, r22
     dc4:	69 01       	movw	r12, r18
  if (cluster > (clusterCount_ + 1)) return false;
     dc6:	89 85       	ldd	r24, Y+9	; 0x09
     dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dca:	ab 85       	ldd	r26, Y+11	; 0x0b
     dcc:	bc 85       	ldd	r27, Y+12	; 0x0c
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	a1 1d       	adc	r26, r1
     dd2:	b1 1d       	adc	r27, r1
     dd4:	84 17       	cp	r24, r20
     dd6:	95 07       	cpc	r25, r21
     dd8:	a6 07       	cpc	r26, r22
     dda:	b7 07       	cpc	r27, r23
     ddc:	08 f4       	brcc	.+2      	; 0xde0 <_ZNK8SdVolume6fatGetEmPm+0x32>
     dde:	50 c0       	rjmp	.+160    	; 0xe80 <_ZNK8SdVolume6fatGetEmPm+0xd2>
  uint32_t lba = fatStartBlock_;
     de0:	2b 89       	ldd	r18, Y+19	; 0x13
     de2:	3c 89       	ldd	r19, Y+20	; 0x14
     de4:	4d 89       	ldd	r20, Y+21	; 0x15
     de6:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
     de8:	8f 89       	ldd	r24, Y+23	; 0x17
     dea:	80 31       	cpi	r24, 0x10	; 16
     dec:	29 f4       	brne	.+10     	; 0xdf8 <_ZNK8SdVolume6fatGetEmPm+0x4a>
     dee:	99 27       	eor	r25, r25
     df0:	81 2f       	mov	r24, r17
     df2:	70 2f       	mov	r23, r16
     df4:	6f 2d       	mov	r22, r15
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <_ZNK8SdVolume6fatGetEmPm+0x5c>
     df8:	c8 01       	movw	r24, r16
     dfa:	b7 01       	movw	r22, r14
     dfc:	e7 e0       	ldi	r30, 0x07	; 7
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	ea 95       	dec	r30
     e08:	d1 f7       	brne	.-12     	; 0xdfe <_ZNK8SdVolume6fatGetEmPm+0x50>
     e0a:	26 0f       	add	r18, r22
     e0c:	37 1f       	adc	r19, r23
     e0e:	48 1f       	adc	r20, r24
     e10:	59 1f       	adc	r21, r25
  if (lba != cacheBlockNumber_) {
     e12:	80 91 00 01 	lds	r24, 0x0100
     e16:	90 91 01 01 	lds	r25, 0x0101
     e1a:	a0 91 02 01 	lds	r26, 0x0102
     e1e:	b0 91 03 01 	lds	r27, 0x0103
     e22:	28 17       	cp	r18, r24
     e24:	39 07       	cpc	r19, r25
     e26:	4a 07       	cpc	r20, r26
     e28:	5b 07       	cpc	r21, r27
     e2a:	39 f0       	breq	.+14     	; 0xe3a <_ZNK8SdVolume6fatGetEmPm+0x8c>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
     e2c:	ca 01       	movw	r24, r20
     e2e:	b9 01       	movw	r22, r18
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 00 06 	call	0xc00	; 0xc00 <_ZN8SdVolume13cacheRawBlockEmh>
     e36:	88 23       	and	r24, r24
     e38:	19 f1       	breq	.+70     	; 0xe80 <_ZNK8SdVolume6fatGetEmPm+0xd2>
  }
  if (fatType_ == 16) {
     e3a:	8f 89       	ldd	r24, Y+23	; 0x17
     e3c:	80 31       	cpi	r24, 0x10	; 16
     e3e:	59 f4       	brne	.+22     	; 0xe56 <_ZNK8SdVolume6fatGetEmPm+0xa8>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
     e40:	f7 01       	movw	r30, r14
     e42:	f0 70       	andi	r31, 0x00	; 0
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	e9 59       	subi	r30, 0x99	; 153
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	0e c0       	rjmp	.+28     	; 0xe72 <_ZNK8SdVolume6fatGetEmPm+0xc4>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
     e56:	f7 01       	movw	r30, r14
     e58:	ef 77       	andi	r30, 0x7F	; 127
     e5a:	f0 70       	andi	r31, 0x00	; 0
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	ee 0f       	add	r30, r30
     e62:	ff 1f       	adc	r31, r31
     e64:	e9 59       	subi	r30, 0x99	; 153
     e66:	fe 4f       	sbci	r31, 0xFE	; 254
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	a2 81       	ldd	r26, Z+2	; 0x02
     e6e:	b3 81       	ldd	r27, Z+3	; 0x03
     e70:	bf 70       	andi	r27, 0x0F	; 15
     e72:	f6 01       	movw	r30, r12
     e74:	80 83       	st	Z, r24
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	a2 83       	std	Z+2, r26	; 0x02
     e7a:	b3 83       	std	Z+3, r27	; 0x03
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <_ZNK8SdVolume6fatGetEmPm+0xd4>
     e80:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	08 95       	ret

00000e94 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
     e94:	2f 92       	push	r2
     e96:	3f 92       	push	r3
     e98:	4f 92       	push	r4
     e9a:	5f 92       	push	r5
     e9c:	6f 92       	push	r6
     e9e:	7f 92       	push	r7
     ea0:	8f 92       	push	r8
     ea2:	9f 92       	push	r9
     ea4:	af 92       	push	r10
     ea6:	bf 92       	push	r11
     ea8:	cf 92       	push	r12
     eaa:	df 92       	push	r13
     eac:	ef 92       	push	r14
     eae:	ff 92       	push	r15
     eb0:	0f 93       	push	r16
     eb2:	1f 93       	push	r17
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	2f 97       	sbiw	r28, 0x0f	; 15
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	1c 01       	movw	r2, r24
     eca:	4a 87       	std	Y+10, r20	; 0x0a
     ecc:	5b 87       	std	Y+11, r21	; 0x0b
     ece:	6c 87       	std	Y+12, r22	; 0x0c
     ed0:	7d 87       	std	Y+13, r23	; 0x0d
     ed2:	3f 87       	std	Y+15, r19	; 0x0f
     ed4:	2e 87       	std	Y+14, r18	; 0x0e

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
     ed6:	d9 01       	movw	r26, r18
     ed8:	0d 91       	ld	r16, X+
     eda:	1d 91       	ld	r17, X+
     edc:	2d 91       	ld	r18, X+
     ede:	3c 91       	ld	r19, X
     ee0:	01 15       	cp	r16, r1
     ee2:	11 05       	cpc	r17, r1
     ee4:	21 05       	cpc	r18, r1
     ee6:	31 05       	cpc	r19, r1
     ee8:	49 f0       	breq	.+18     	; 0xefc <_ZN8SdVolume15allocContiguousEmPm+0x68>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
     eea:	48 01       	movw	r8, r16
     eec:	59 01       	movw	r10, r18
     eee:	08 94       	sec
     ef0:	81 1c       	adc	r8, r1
     ef2:	91 1c       	adc	r9, r1
     ef4:	a1 1c       	adc	r10, r1
     ef6:	b1 1c       	adc	r11, r1
     ef8:	19 86       	std	Y+9, r1	; 0x09
     efa:	10 c0       	rjmp	.+32     	; 0xf1c <_ZN8SdVolume15allocContiguousEmPm+0x88>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
     efc:	fc 01       	movw	r30, r24
     efe:	80 80       	ld	r8, Z
     f00:	91 80       	ldd	r9, Z+1	; 0x01
     f02:	a2 80       	ldd	r10, Z+2	; 0x02
     f04:	b3 80       	ldd	r11, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
     f06:	19 86       	std	Y+9, r1	; 0x09
     f08:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0c:	ac 85       	ldd	r26, Y+12	; 0x0c
     f0e:	bd 85       	ldd	r27, Y+13	; 0x0d
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	a1 05       	cpc	r26, r1
     f14:	b1 05       	cpc	r27, r1
     f16:	11 f4       	brne	.+4      	; 0xf1c <_ZN8SdVolume15allocContiguousEmPm+0x88>
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	99 87       	std	Y+9, r25	; 0x09
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
     f1c:	d1 01       	movw	r26, r2
     f1e:	19 96       	adiw	r26, 0x09	; 9
     f20:	8d 91       	ld	r24, X+
     f22:	9d 91       	ld	r25, X+
     f24:	0d 90       	ld	r0, X+
     f26:	bc 91       	ld	r27, X
     f28:	a0 2d       	mov	r26, r0
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	a1 1d       	adc	r26, r1
     f2e:	b1 1d       	adc	r27, r1
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	af 83       	std	Y+7, r26	; 0x07
     f36:	b8 87       	std	Y+8, r27	; 0x08
     f38:	75 01       	movw	r14, r10
     f3a:	64 01       	movw	r12, r8
     f3c:	44 24       	eor	r4, r4
     f3e:	55 24       	eor	r5, r5
     f40:	32 01       	movw	r6, r4
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
     f42:	8e 01       	movw	r16, r28
     f44:	0f 5f       	subi	r16, 0xFF	; 255
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
     f48:	f1 01       	movw	r30, r2
     f4a:	81 85       	ldd	r24, Z+9	; 0x09
     f4c:	92 85       	ldd	r25, Z+10	; 0x0a
     f4e:	a3 85       	ldd	r26, Z+11	; 0x0b
     f50:	b4 85       	ldd	r27, Z+12	; 0x0c
     f52:	48 16       	cp	r4, r24
     f54:	59 06       	cpc	r5, r25
     f56:	6a 06       	cpc	r6, r26
     f58:	7b 06       	cpc	r7, r27
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <_ZN8SdVolume15allocContiguousEmPm+0xca>
     f5c:	90 c0       	rjmp	.+288    	; 0x107e <_ZN8SdVolume15allocContiguousEmPm+0x1ea>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	af 81       	ldd	r26, Y+7	; 0x07
     f64:	b8 85       	ldd	r27, Y+8	; 0x08
     f66:	8c 15       	cp	r24, r12
     f68:	9d 05       	cpc	r25, r13
     f6a:	ae 05       	cpc	r26, r14
     f6c:	bf 05       	cpc	r27, r15
     f6e:	50 f4       	brcc	.+20     	; 0xf84 <_ZN8SdVolume15allocContiguousEmPm+0xf0>
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	88 2e       	mov	r8, r24
     f74:	91 2c       	mov	r9, r1
     f76:	a1 2c       	mov	r10, r1
     f78:	b1 2c       	mov	r11, r1
     f7a:	b2 e0       	ldi	r27, 0x02	; 2
     f7c:	cb 2e       	mov	r12, r27
     f7e:	d1 2c       	mov	r13, r1
     f80:	e1 2c       	mov	r14, r1
     f82:	f1 2c       	mov	r15, r1
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
     f84:	c1 01       	movw	r24, r2
     f86:	b7 01       	movw	r22, r14
     f88:	a6 01       	movw	r20, r12
     f8a:	98 01       	movw	r18, r16
     f8c:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZNK8SdVolume6fatGetEmPm>
     f90:	88 23       	and	r24, r24
     f92:	09 f4       	brne	.+2      	; 0xf96 <_ZN8SdVolume15allocContiguousEmPm+0x102>
     f94:	74 c0       	rjmp	.+232    	; 0x107e <_ZN8SdVolume15allocContiguousEmPm+0x1ea>

    if (f != 0) {
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	ab 81       	ldd	r26, Y+3	; 0x03
     f9c:	bc 81       	ldd	r27, Y+4	; 0x04
     f9e:	a7 01       	movw	r20, r14
     fa0:	96 01       	movw	r18, r12
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	4f 4f       	sbci	r20, 0xFF	; 255
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	a1 05       	cpc	r26, r1
     fae:	b1 05       	cpc	r27, r1
     fb0:	19 f0       	breq	.+6      	; 0xfb8 <_ZN8SdVolume15allocContiguousEmPm+0x124>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
     fb2:	49 01       	movw	r8, r18
     fb4:	5a 01       	movw	r10, r20
     fb6:	0d c0       	rjmp	.+26     	; 0xfd2 <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
     fb8:	28 19       	sub	r18, r8
     fba:	39 09       	sbc	r19, r9
     fbc:	4a 09       	sbc	r20, r10
     fbe:	5b 09       	sbc	r21, r11
     fc0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc4:	ac 85       	ldd	r26, Y+12	; 0x0c
     fc6:	bd 85       	ldd	r27, Y+13	; 0x0d
     fc8:	28 17       	cp	r18, r24
     fca:	39 07       	cpc	r19, r25
     fcc:	4a 07       	cpc	r20, r26
     fce:	5b 07       	cpc	r21, r27
     fd0:	59 f0       	breq	.+22     	; 0xfe8 <_ZN8SdVolume15allocContiguousEmPm+0x154>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
     fd2:	08 94       	sec
     fd4:	41 1c       	adc	r4, r1
     fd6:	51 1c       	adc	r5, r1
     fd8:	61 1c       	adc	r6, r1
     fda:	71 1c       	adc	r7, r1
     fdc:	08 94       	sec
     fde:	c1 1c       	adc	r12, r1
     fe0:	d1 1c       	adc	r13, r1
     fe2:	e1 1c       	adc	r14, r1
     fe4:	f1 1c       	adc	r15, r1
     fe6:	b0 cf       	rjmp	.-160    	; 0xf48 <_ZN8SdVolume15allocContiguousEmPm+0xb4>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
     fe8:	c1 01       	movw	r24, r2
     fea:	a6 01       	movw	r20, r12
     fec:	b7 01       	movw	r22, r14
     fee:	0f ef       	ldi	r16, 0xFF	; 255
     ff0:	1f ef       	ldi	r17, 0xFF	; 255
     ff2:	2f ef       	ldi	r18, 0xFF	; 255
     ff4:	3f e0       	ldi	r19, 0x0F	; 15
     ff6:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
     ffa:	88 23       	and	r24, r24
     ffc:	99 f4       	brne	.+38     	; 0x1024 <_ZN8SdVolume15allocContiguousEmPm+0x190>
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <_ZN8SdVolume15allocContiguousEmPm+0x1ea>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    1000:	26 01       	movw	r4, r12
    1002:	37 01       	movw	r6, r14
    1004:	08 94       	sec
    1006:	41 08       	sbc	r4, r1
    1008:	51 08       	sbc	r5, r1
    100a:	61 08       	sbc	r6, r1
    100c:	71 08       	sbc	r7, r1
    100e:	c1 01       	movw	r24, r2
    1010:	b3 01       	movw	r22, r6
    1012:	a2 01       	movw	r20, r4
    1014:	97 01       	movw	r18, r14
    1016:	86 01       	movw	r16, r12
    1018:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN8SdVolume6fatPutEmm>
    101c:	88 23       	and	r24, r24
    101e:	79 f1       	breq	.+94     	; 0x107e <_ZN8SdVolume15allocContiguousEmPm+0x1ea>
    1020:	73 01       	movw	r14, r6
    1022:	62 01       	movw	r12, r4
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    1024:	8c 14       	cp	r8, r12
    1026:	9d 04       	cpc	r9, r13
    1028:	ae 04       	cpc	r10, r14
    102a:	bf 04       	cpc	r11, r15
    102c:	48 f3       	brcs	.-46     	; 0x1000 <_ZN8SdVolume15allocContiguousEmPm+0x16c>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    102e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1030:	bf 85       	ldd	r27, Y+15	; 0x0f
    1032:	4d 91       	ld	r20, X+
    1034:	5d 91       	ld	r21, X+
    1036:	6d 91       	ld	r22, X+
    1038:	7c 91       	ld	r23, X
    103a:	41 15       	cp	r20, r1
    103c:	51 05       	cpc	r21, r1
    103e:	61 05       	cpc	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	39 f0       	breq	.+14     	; 0x1052 <_ZN8SdVolume15allocContiguousEmPm+0x1be>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    1044:	c1 01       	movw	r24, r2
    1046:	95 01       	movw	r18, r10
    1048:	84 01       	movw	r16, r8
    104a:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN8SdVolume6fatPutEmm>
    104e:	88 23       	and	r24, r24
    1050:	b1 f0       	breq	.+44     	; 0x107e <_ZN8SdVolume15allocContiguousEmPm+0x1ea>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    1052:	ee 85       	ldd	r30, Y+14	; 0x0e
    1054:	ff 85       	ldd	r31, Y+15	; 0x0f
    1056:	80 82       	st	Z, r8
    1058:	91 82       	std	Z+1, r9	; 0x01
    105a:	a2 82       	std	Z+2, r10	; 0x02
    105c:	b3 82       	std	Z+3, r11	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    105e:	f9 85       	ldd	r31, Y+9	; 0x09
    1060:	ff 23       	and	r31, r31
    1062:	59 f0       	breq	.+22     	; 0x107a <_ZN8SdVolume15allocContiguousEmPm+0x1e6>
    1064:	08 94       	sec
    1066:	81 1c       	adc	r8, r1
    1068:	91 1c       	adc	r9, r1
    106a:	a1 1c       	adc	r10, r1
    106c:	b1 1c       	adc	r11, r1
    106e:	d1 01       	movw	r26, r2
    1070:	8d 92       	st	X+, r8
    1072:	9d 92       	st	X+, r9
    1074:	ad 92       	st	X+, r10
    1076:	bc 92       	st	X, r11
    1078:	13 97       	sbiw	r26, 0x03	; 3
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <_ZN8SdVolume15allocContiguousEmPm+0x1ec>
    107e:	80 e0       	ldi	r24, 0x00	; 0

  return true;
}
    1080:	2f 96       	adiw	r28, 0x0f	; 15
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	bf 90       	pop	r11
    109e:	af 90       	pop	r10
    10a0:	9f 90       	pop	r9
    10a2:	8f 90       	pop	r8
    10a4:	7f 90       	pop	r7
    10a6:	6f 90       	pop	r6
    10a8:	5f 90       	pop	r5
    10aa:	4f 90       	pop	r4
    10ac:	3f 90       	pop	r3
    10ae:	2f 90       	pop	r2
    10b0:	08 95       	ret

000010b2 <setup>:

//The setup function is called once at startup of the sketch
void setup()
{
// Add your initialization code here
}
    10b2:	08 95       	ret

000010b4 <loop>:

// The loop function is called in an endless loop
void loop()
{
//Add your repeated code here
}
    10b4:	08 95       	ret

000010b6 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    10b6:	08 95       	ret

000010b8 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	8f 93       	push	r24
    10ca:	9f 93       	push	r25
    10cc:	ef 93       	push	r30
    10ce:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    10d0:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    10d4:	20 91 ae 03 	lds	r18, 0x03AE
    10d8:	30 91 af 03 	lds	r19, 0x03AF

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	2f 73       	andi	r18, 0x3F	; 63
    10e2:	30 70       	andi	r19, 0x00	; 0
    10e4:	80 91 b0 03 	lds	r24, 0x03B0
    10e8:	90 91 b1 03 	lds	r25, 0x03B1
    10ec:	28 17       	cp	r18, r24
    10ee:	39 07       	cpc	r19, r25
    10f0:	59 f0       	breq	.+22     	; 0x1108 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    10f2:	e0 91 ae 03 	lds	r30, 0x03AE
    10f6:	f0 91 af 03 	lds	r31, 0x03AF
    10fa:	e2 59       	subi	r30, 0x92	; 146
    10fc:	fc 4f       	sbci	r31, 0xFC	; 252
    10fe:	40 83       	st	Z, r20
    buffer->head = i;
    1100:	30 93 af 03 	sts	0x03AF, r19
    1104:	20 93 ae 03 	sts	0x03AE, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    1108:	ff 91       	pop	r31
    110a:	ef 91       	pop	r30
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	4f 91       	pop	r20
    1112:	3f 91       	pop	r19
    1114:	2f 91       	pop	r18
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1120:	e0 91 02 04 	lds	r30, 0x0402
    1124:	f0 91 03 04 	lds	r31, 0x0403
    1128:	e0 5c       	subi	r30, 0xC0	; 192
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	81 91       	ld	r24, Z+
    112e:	91 91       	ld	r25, Z+
    1130:	20 81       	ld	r18, Z
    1132:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1134:	82 1b       	sub	r24, r18
    1136:	93 0b       	sbc	r25, r19
    1138:	8f 73       	andi	r24, 0x3F	; 63
    113a:	90 70       	andi	r25, 0x00	; 0
    113c:	89 2b       	or	r24, r25
    113e:	11 f0       	breq	.+4      	; 0x1144 <_Z14serialEventRunv+0x24>
    1140:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z11serialEventv>
    1144:	08 95       	ret

00001146 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	2f 93       	push	r18
    1152:	3f 93       	push	r19
    1154:	8f 93       	push	r24
    1156:	9f 93       	push	r25
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    115c:	20 91 f2 03 	lds	r18, 0x03F2
    1160:	30 91 f3 03 	lds	r19, 0x03F3
    1164:	80 91 f4 03 	lds	r24, 0x03F4
    1168:	90 91 f5 03 	lds	r25, 0x03F5
    116c:	28 17       	cp	r18, r24
    116e:	39 07       	cpc	r19, r25
    1170:	31 f4       	brne	.+12     	; 0x117e <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1172:	80 91 c1 00 	lds	r24, 0x00C1
    1176:	8f 7d       	andi	r24, 0xDF	; 223
    1178:	80 93 c1 00 	sts	0x00C1, r24
    117c:	14 c0       	rjmp	.+40     	; 0x11a6 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    117e:	e0 91 f4 03 	lds	r30, 0x03F4
    1182:	f0 91 f5 03 	lds	r31, 0x03F5
    1186:	ee 54       	subi	r30, 0x4E	; 78
    1188:	fc 4f       	sbci	r31, 0xFC	; 252
    118a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    118c:	80 91 f4 03 	lds	r24, 0x03F4
    1190:	90 91 f5 03 	lds	r25, 0x03F5
    1194:	01 96       	adiw	r24, 0x01	; 1
    1196:	8f 73       	andi	r24, 0x3F	; 63
    1198:	90 70       	andi	r25, 0x00	; 0
    119a:	90 93 f5 03 	sts	0x03F5, r25
    119e:	80 93 f4 03 	sts	0x03F4, r24
	
  #if defined(UDR0)
    UDR0 = c;
    11a2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    11a6:	ff 91       	pop	r31
    11a8:	ef 91       	pop	r30
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    11bc:	dc 01       	movw	r26, r24
    11be:	1c 96       	adiw	r26, 0x0c	; 12
    11c0:	ed 91       	ld	r30, X+
    11c2:	fc 91       	ld	r31, X
    11c4:	1d 97       	sbiw	r26, 0x0d	; 13
    11c6:	e0 5c       	subi	r30, 0xC0	; 192
    11c8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ca:	21 91       	ld	r18, Z+
    11cc:	31 91       	ld	r19, Z+
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	28 1b       	sub	r18, r24
    11d4:	39 0b       	sbc	r19, r25
    11d6:	2f 73       	andi	r18, 0x3F	; 63
    11d8:	30 70       	andi	r19, 0x00	; 0
}
    11da:	c9 01       	movw	r24, r18
    11dc:	08 95       	ret

000011de <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    11de:	dc 01       	movw	r26, r24
    11e0:	1c 96       	adiw	r26, 0x0c	; 12
    11e2:	ed 91       	ld	r30, X+
    11e4:	fc 91       	ld	r31, X
    11e6:	1d 97       	sbiw	r26, 0x0d	; 13
    11e8:	e0 5c       	subi	r30, 0xC0	; 192
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	20 81       	ld	r18, Z
    11ee:	31 81       	ldd	r19, Z+1	; 0x01
    11f0:	e0 54       	subi	r30, 0x40	; 64
    11f2:	f0 40       	sbci	r31, 0x00	; 0
    11f4:	df 01       	movw	r26, r30
    11f6:	ae 5b       	subi	r26, 0xBE	; 190
    11f8:	bf 4f       	sbci	r27, 0xFF	; 255
    11fa:	8d 91       	ld	r24, X+
    11fc:	9c 91       	ld	r25, X
    11fe:	11 97       	sbiw	r26, 0x01	; 1
    1200:	28 17       	cp	r18, r24
    1202:	39 07       	cpc	r19, r25
    1204:	19 f4       	brne	.+6      	; 0x120c <_ZN14HardwareSerial4peekEv+0x2e>
    1206:	2f ef       	ldi	r18, 0xFF	; 255
    1208:	3f ef       	ldi	r19, 0xFF	; 255
    120a:	07 c0       	rjmp	.+14     	; 0x121a <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    120c:	8d 91       	ld	r24, X+
    120e:	9c 91       	ld	r25, X
    1210:	e8 0f       	add	r30, r24
    1212:	f9 1f       	adc	r31, r25
    1214:	80 81       	ld	r24, Z
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    121a:	c9 01       	movw	r24, r18
    121c:	08 95       	ret

0000121e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    121e:	dc 01       	movw	r26, r24
    1220:	1c 96       	adiw	r26, 0x0c	; 12
    1222:	ed 91       	ld	r30, X+
    1224:	fc 91       	ld	r31, X
    1226:	1d 97       	sbiw	r26, 0x0d	; 13
    1228:	e0 5c       	subi	r30, 0xC0	; 192
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	20 81       	ld	r18, Z
    122e:	31 81       	ldd	r19, Z+1	; 0x01
    1230:	e0 54       	subi	r30, 0x40	; 64
    1232:	f0 40       	sbci	r31, 0x00	; 0
    1234:	df 01       	movw	r26, r30
    1236:	ae 5b       	subi	r26, 0xBE	; 190
    1238:	bf 4f       	sbci	r27, 0xFF	; 255
    123a:	8d 91       	ld	r24, X+
    123c:	9c 91       	ld	r25, X
    123e:	11 97       	sbiw	r26, 0x01	; 1
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	19 f4       	brne	.+6      	; 0x124c <_ZN14HardwareSerial4readEv+0x2e>
    1246:	2f ef       	ldi	r18, 0xFF	; 255
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	10 c0       	rjmp	.+32     	; 0x126c <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    124c:	8d 91       	ld	r24, X+
    124e:	9c 91       	ld	r25, X
    1250:	11 97       	sbiw	r26, 0x01	; 1
    1252:	e8 0f       	add	r30, r24
    1254:	f9 1f       	adc	r31, r25
    1256:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1258:	8d 91       	ld	r24, X+
    125a:	9c 91       	ld	r25, X
    125c:	11 97       	sbiw	r26, 0x01	; 1
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	8f 73       	andi	r24, 0x3F	; 63
    1262:	90 70       	andi	r25, 0x00	; 0
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	9c 93       	st	X, r25
    1268:	8e 93       	st	-X, r24
    return c;
    126a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    126c:	c9 01       	movw	r24, r18
    126e:	08 95       	ret

00001270 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1270:	fc 01       	movw	r30, r24
    1272:	86 85       	ldd	r24, Z+14	; 0x0e
    1274:	97 85       	ldd	r25, Z+15	; 0x0f
    1276:	dc 01       	movw	r26, r24
    1278:	a0 5c       	subi	r26, 0xC0	; 192
    127a:	bf 4f       	sbci	r27, 0xFF	; 255
    127c:	fc 01       	movw	r30, r24
    127e:	ee 5b       	subi	r30, 0xBE	; 190
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	2d 91       	ld	r18, X+
    1284:	3c 91       	ld	r19, X
    1286:	11 97       	sbiw	r26, 0x01	; 1
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	28 17       	cp	r18, r24
    128e:	39 07       	cpc	r19, r25
    1290:	c1 f7       	brne	.-16     	; 0x1282 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    1292:	08 95       	ret

00001294 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    129a:	ee 85       	ldd	r30, Y+14	; 0x0e
    129c:	ff 85       	ldd	r31, Y+15	; 0x0f
    129e:	e0 5c       	subi	r30, 0xC0	; 192
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	20 81       	ld	r18, Z
    12a4:	31 81       	ldd	r19, Z+1	; 0x01
    12a6:	e0 54       	subi	r30, 0x40	; 64
    12a8:	f0 40       	sbci	r31, 0x00	; 0
    12aa:	2f 5f       	subi	r18, 0xFF	; 255
    12ac:	3f 4f       	sbci	r19, 0xFF	; 255
    12ae:	2f 73       	andi	r18, 0x3F	; 63
    12b0:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    12b2:	df 01       	movw	r26, r30
    12b4:	ae 5b       	subi	r26, 0xBE	; 190
    12b6:	bf 4f       	sbci	r27, 0xFF	; 255
    12b8:	8d 91       	ld	r24, X+
    12ba:	9c 91       	ld	r25, X
    12bc:	11 97       	sbiw	r26, 0x01	; 1
    12be:	28 17       	cp	r18, r24
    12c0:	39 07       	cpc	r19, r25
    12c2:	d1 f3       	breq	.-12     	; 0x12b8 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    12c4:	e0 5c       	subi	r30, 0xC0	; 192
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	e0 54       	subi	r30, 0x40	; 64
    12ce:	f0 40       	sbci	r31, 0x00	; 0
    12d0:	e8 0f       	add	r30, r24
    12d2:	f9 1f       	adc	r31, r25
    12d4:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    12d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    12d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    12da:	e0 5c       	subi	r30, 0xC0	; 192
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	31 83       	std	Z+1, r19	; 0x01
    12e0:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    12e2:	ee 89       	ldd	r30, Y+22	; 0x16
    12e4:	ff 89       	ldd	r31, Y+23	; 0x17
    12e6:	20 81       	ld	r18, Z
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0d 8c       	ldd	r0, Y+29	; 0x1d
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <_ZN14HardwareSerial5writeEh+0x60>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <_ZN14HardwareSerial5writeEh+0x5c>
    12f8:	28 2b       	or	r18, r24
    12fa:	20 83       	st	Z, r18
  
  return 1;
}
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1306:	10 92 f9 03 	sts	0x03F9, r1
    130a:	10 92 f8 03 	sts	0x03F8, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    130e:	88 ee       	ldi	r24, 0xE8	; 232
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	80 93 fa 03 	sts	0x03FA, r24
    131a:	90 93 fb 03 	sts	0x03FB, r25
    131e:	a0 93 fc 03 	sts	0x03FC, r26
    1322:	b0 93 fd 03 	sts	0x03FD, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1326:	80 e1       	ldi	r24, 0x10	; 16
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	90 93 f7 03 	sts	0x03F7, r25
    132e:	80 93 f6 03 	sts	0x03F6, r24
{
  _rx_buffer = rx_buffer;
    1332:	8e e6       	ldi	r24, 0x6E	; 110
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	90 93 03 04 	sts	0x0403, r25
    133a:	80 93 02 04 	sts	0x0402, r24
  _tx_buffer = tx_buffer;
    133e:	82 eb       	ldi	r24, 0xB2	; 178
    1340:	93 e0       	ldi	r25, 0x03	; 3
    1342:	90 93 05 04 	sts	0x0405, r25
    1346:	80 93 04 04 	sts	0x0404, r24
  _ubrrh = ubrrh;
    134a:	85 ec       	ldi	r24, 0xC5	; 197
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	90 93 07 04 	sts	0x0407, r25
    1352:	80 93 06 04 	sts	0x0406, r24
  _ubrrl = ubrrl;
    1356:	84 ec       	ldi	r24, 0xC4	; 196
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	90 93 09 04 	sts	0x0409, r25
    135e:	80 93 08 04 	sts	0x0408, r24
  _ucsra = ucsra;
    1362:	80 ec       	ldi	r24, 0xC0	; 192
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	90 93 0b 04 	sts	0x040B, r25
    136a:	80 93 0a 04 	sts	0x040A, r24
  _ucsrb = ucsrb;
    136e:	81 ec       	ldi	r24, 0xC1	; 193
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	90 93 0d 04 	sts	0x040D, r25
    1376:	80 93 0c 04 	sts	0x040C, r24
  _udr = udr;
    137a:	86 ec       	ldi	r24, 0xC6	; 198
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	90 93 0f 04 	sts	0x040F, r25
    1382:	80 93 0e 04 	sts	0x040E, r24
  _rxen = rxen;
    1386:	84 e0       	ldi	r24, 0x04	; 4
    1388:	80 93 10 04 	sts	0x0410, r24
  _txen = txen;
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	80 93 11 04 	sts	0x0411, r24
  _rxcie = rxcie;
    1392:	87 e0       	ldi	r24, 0x07	; 7
    1394:	80 93 12 04 	sts	0x0412, r24
  _udrie = udrie;
    1398:	85 e0       	ldi	r24, 0x05	; 5
    139a:	80 93 13 04 	sts	0x0413, r24
  _u2x = u2x;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	80 93 14 04 	sts	0x0414, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    13a4:	08 95       	ret

000013a6 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	7c 01       	movw	r14, r24
    13b8:	6b 01       	movw	r12, r22
    13ba:	8a 01       	movw	r16, r20
    13bc:	c0 e0       	ldi	r28, 0x00	; 0
    13be:	d0 e0       	ldi	r29, 0x00	; 0
    13c0:	0f c0       	rjmp	.+30     	; 0x13e0 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    13c2:	d6 01       	movw	r26, r12
    13c4:	6d 91       	ld	r22, X+
    13c6:	6d 01       	movw	r12, r26
    13c8:	d7 01       	movw	r26, r14
    13ca:	ed 91       	ld	r30, X+
    13cc:	fc 91       	ld	r31, X
    13ce:	01 90       	ld	r0, Z+
    13d0:	f0 81       	ld	r31, Z
    13d2:	e0 2d       	mov	r30, r0
    13d4:	c7 01       	movw	r24, r14
    13d6:	09 95       	icall
    13d8:	c8 0f       	add	r28, r24
    13da:	d9 1f       	adc	r29, r25
    13dc:	01 50       	subi	r16, 0x01	; 1
    13de:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    13e0:	01 15       	cp	r16, r1
    13e2:	11 05       	cpc	r17, r1
    13e4:	71 f7       	brne	.-36     	; 0x13c2 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    13e6:	ce 01       	movw	r24, r28
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	08 95       	ret

000013fa <main>:
#include <Arduino.h>

int main(void)
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
{
	init();
    13fe:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1402:	0e 94 59 08 	call	0x10b2	; 0x10b2 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1406:	c0 e9       	ldi	r28, 0x90	; 144
    1408:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    140a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <loop>
		if (serialEventRun) serialEventRun();
    140e:	20 97       	sbiw	r28, 0x00	; 0
    1410:	e1 f3       	breq	.-8      	; 0x140a <main+0x10>
    1412:	0e 94 90 08 	call	0x1120	; 0x1120 <_Z14serialEventRunv>
    1416:	f9 cf       	rjmp	.-14     	; 0x140a <main+0x10>

00001418 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	2f 93       	push	r18
    1424:	3f 93       	push	r19
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	af 93       	push	r26
    142c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    142e:	80 91 19 04 	lds	r24, 0x0419
    1432:	90 91 1a 04 	lds	r25, 0x041A
    1436:	a0 91 1b 04 	lds	r26, 0x041B
    143a:	b0 91 1c 04 	lds	r27, 0x041C
	unsigned char f = timer0_fract;
    143e:	30 91 1d 04 	lds	r19, 0x041D

	m += MILLIS_INC;
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	a1 1d       	adc	r26, r1
    1446:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1448:	23 2f       	mov	r18, r19
    144a:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    144c:	2d 37       	cpi	r18, 0x7D	; 125
    144e:	20 f0       	brcs	.+8      	; 0x1458 <__vector_16+0x40>
		f -= FRACT_MAX;
    1450:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	a1 1d       	adc	r26, r1
    1456:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1458:	20 93 1d 04 	sts	0x041D, r18
	timer0_millis = m;
    145c:	80 93 19 04 	sts	0x0419, r24
    1460:	90 93 1a 04 	sts	0x041A, r25
    1464:	a0 93 1b 04 	sts	0x041B, r26
    1468:	b0 93 1c 04 	sts	0x041C, r27
	timer0_overflow_count++;
    146c:	80 91 15 04 	lds	r24, 0x0415
    1470:	90 91 16 04 	lds	r25, 0x0416
    1474:	a0 91 17 04 	lds	r26, 0x0417
    1478:	b0 91 18 04 	lds	r27, 0x0418
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	a1 1d       	adc	r26, r1
    1480:	b1 1d       	adc	r27, r1
    1482:	80 93 15 04 	sts	0x0415, r24
    1486:	90 93 16 04 	sts	0x0416, r25
    148a:	a0 93 17 04 	sts	0x0417, r26
    148e:	b0 93 18 04 	sts	0x0418, r27
}
    1492:	bf 91       	pop	r27
    1494:	af 91       	pop	r26
    1496:	9f 91       	pop	r25
    1498:	8f 91       	pop	r24
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    14a8:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    14aa:	f8 94       	cli
	m = timer0_millis;
    14ac:	20 91 19 04 	lds	r18, 0x0419
    14b0:	30 91 1a 04 	lds	r19, 0x041A
    14b4:	40 91 1b 04 	lds	r20, 0x041B
    14b8:	50 91 1c 04 	lds	r21, 0x041C
	SREG = oldSREG;
    14bc:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    14be:	b9 01       	movw	r22, r18
    14c0:	ca 01       	movw	r24, r20
    14c2:	08 95       	ret

000014c4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    14c4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    14c6:	84 b5       	in	r24, 0x24	; 36
    14c8:	82 60       	ori	r24, 0x02	; 2
    14ca:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    14cc:	84 b5       	in	r24, 0x24	; 36
    14ce:	81 60       	ori	r24, 0x01	; 1
    14d0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    14d2:	85 b5       	in	r24, 0x25	; 37
    14d4:	82 60       	ori	r24, 0x02	; 2
    14d6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    14d8:	85 b5       	in	r24, 0x25	; 37
    14da:	81 60       	ori	r24, 0x01	; 1
    14dc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    14de:	ee e6       	ldi	r30, 0x6E	; 110
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	81 60       	ori	r24, 0x01	; 1
    14e6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    14e8:	e1 e8       	ldi	r30, 0x81	; 129
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    14ee:	80 81       	ld	r24, Z
    14f0:	82 60       	ori	r24, 0x02	; 2
    14f2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    14f4:	80 81       	ld	r24, Z
    14f6:	81 60       	ori	r24, 0x01	; 1
    14f8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    14fa:	e0 e8       	ldi	r30, 0x80	; 128
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	81 60       	ori	r24, 0x01	; 1
    1502:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1504:	e1 eb       	ldi	r30, 0xB1	; 177
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	84 60       	ori	r24, 0x04	; 4
    150c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    150e:	e0 eb       	ldi	r30, 0xB0	; 176
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	81 60       	ori	r24, 0x01	; 1
    1516:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1518:	ea e7       	ldi	r30, 0x7A	; 122
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	84 60       	ori	r24, 0x04	; 4
    1520:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1522:	80 81       	ld	r24, Z
    1524:	82 60       	ori	r24, 0x02	; 2
    1526:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1528:	80 81       	ld	r24, Z
    152a:	81 60       	ori	r24, 0x01	; 1
    152c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    152e:	80 81       	ld	r24, Z
    1530:	80 68       	ori	r24, 0x80	; 128
    1532:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1534:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1538:	08 95       	ret

0000153a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    153a:	48 2f       	mov	r20, r24
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	ca 01       	movw	r24, r20
    1540:	82 55       	subi	r24, 0x52	; 82
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	fc 01       	movw	r30, r24
    1546:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1548:	ca 01       	movw	r24, r20
    154a:	86 56       	subi	r24, 0x66	; 102
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	fc 01       	movw	r30, r24
    1550:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    1552:	4a 57       	subi	r20, 0x7A	; 122
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	fa 01       	movw	r30, r20
    1558:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    155a:	33 23       	and	r19, r19
    155c:	09 f4       	brne	.+2      	; 0x1560 <digitalWrite+0x26>
    155e:	40 c0       	rjmp	.+128    	; 0x15e0 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1560:	22 23       	and	r18, r18
    1562:	51 f1       	breq	.+84     	; 0x15b8 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1564:	23 30       	cpi	r18, 0x03	; 3
    1566:	71 f0       	breq	.+28     	; 0x1584 <digitalWrite+0x4a>
    1568:	24 30       	cpi	r18, 0x04	; 4
    156a:	28 f4       	brcc	.+10     	; 0x1576 <digitalWrite+0x3c>
    156c:	21 30       	cpi	r18, 0x01	; 1
    156e:	a1 f0       	breq	.+40     	; 0x1598 <digitalWrite+0x5e>
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	11 f5       	brne	.+68     	; 0x15b8 <digitalWrite+0x7e>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <digitalWrite+0x64>
    1576:	26 30       	cpi	r18, 0x06	; 6
    1578:	b1 f0       	breq	.+44     	; 0x15a6 <digitalWrite+0x6c>
    157a:	27 30       	cpi	r18, 0x07	; 7
    157c:	c1 f0       	breq	.+48     	; 0x15ae <digitalWrite+0x74>
    157e:	24 30       	cpi	r18, 0x04	; 4
    1580:	d9 f4       	brne	.+54     	; 0x15b8 <digitalWrite+0x7e>
    1582:	04 c0       	rjmp	.+8      	; 0x158c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1584:	80 91 80 00 	lds	r24, 0x0080
    1588:	8f 77       	andi	r24, 0x7F	; 127
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    158c:	80 91 80 00 	lds	r24, 0x0080
    1590:	8f 7d       	andi	r24, 0xDF	; 223
    1592:	80 93 80 00 	sts	0x0080, r24
    1596:	10 c0       	rjmp	.+32     	; 0x15b8 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1598:	84 b5       	in	r24, 0x24	; 36
    159a:	8f 77       	andi	r24, 0x7F	; 127
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    159e:	84 b5       	in	r24, 0x24	; 36
    15a0:	8f 7d       	andi	r24, 0xDF	; 223
    15a2:	84 bd       	out	0x24, r24	; 36
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    15a6:	80 91 b0 00 	lds	r24, 0x00B0
    15aa:	8f 77       	andi	r24, 0x7F	; 127
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    15ae:	80 91 b0 00 	lds	r24, 0x00B0
    15b2:	8f 7d       	andi	r24, 0xDF	; 223
    15b4:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    15b8:	e3 2f       	mov	r30, r19
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	ee 58       	subi	r30, 0x8E	; 142
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	a5 91       	lpm	r26, Z+
    15c6:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    15c8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    15ca:	f8 94       	cli

	if (val == LOW) {
    15cc:	66 23       	and	r22, r22
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <digitalWrite+0x9e>
		*out &= ~bit;
    15d0:	8c 91       	ld	r24, X
    15d2:	90 95       	com	r25
    15d4:	89 23       	and	r24, r25
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <digitalWrite+0xa2>
	} else {
		*out |= bit;
    15d8:	8c 91       	ld	r24, X
    15da:	89 2b       	or	r24, r25
    15dc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    15de:	2f bf       	out	0x3f, r18	; 63
    15e0:	08 95       	ret

000015e2 <__tablejump2__>:
    15e2:	ee 0f       	add	r30, r30
    15e4:	ff 1f       	adc	r31, r31

000015e6 <__tablejump__>:
    15e6:	05 90       	lpm	r0, Z+
    15e8:	f4 91       	lpm	r31, Z+
    15ea:	e0 2d       	mov	r30, r0
    15ec:	09 94       	ijmp

000015ee <_exit>:
    15ee:	f8 94       	cli

000015f0 <__stop_program>:
    15f0:	ff cf       	rjmp	.-2      	; 0x15f0 <__stop_program>
