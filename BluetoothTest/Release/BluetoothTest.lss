
BluetoothTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001262  000012f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  0080013a  0080013a  00001330  2**0
                  ALLOC
  3 .debug_aranges 00000588  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d39  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007430  00000000  00000000  000025f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000129f  00000000  00000000  00009a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003090  00000000  00000000  0000acc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009f0  00000000  00000000  0000dd50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001668  00000000  00000000  0000e740  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003bfd  00000000  00000000  0000fda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000558  00000000  00000000  000139a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
}
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	if (index >= len || !buffer) {
		dummy_writable_char = 0;
		return dummy_writable_char;
	}
	return buffer[index];
}
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 73 07 	jmp	0xee6	; 0xee6 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_18>
      4c:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	92 04       	cpc	r9, r2

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e2 e6       	ldi	r30, 0x62	; 98
      d8:	f2 e1       	ldi	r31, 0x12	; 18
      da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
      e0:	aa 33       	cpi	r26, 0x3A	; 58
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
      e6:	11 e0       	ldi	r17, 0x01	; 1
      e8:	aa e3       	ldi	r26, 0x3A	; 58
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a1 3f       	cpi	r26, 0xF1	; 241
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__tablejump__>

00000106 <.do_global_ctors_start>:
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
     10c:	0e 94 64 07 	call	0xec8	; 0xec8 <main>
     110:	0c 94 2f 09 	jmp	0x125e	; 0x125e <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <malloc>:
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	bc 01       	movw	r22, r24
     11e:	82 30       	cpi	r24, 0x02	; 2
     120:	91 05       	cpc	r25, r1
     122:	10 f4       	brcc	.+4      	; 0x128 <malloc+0x10>
     124:	62 e0       	ldi	r22, 0x02	; 2
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	a0 91 ef 01 	lds	r26, 0x01EF
     12c:	b0 91 f0 01 	lds	r27, 0x01F0
     130:	ed 01       	movw	r28, r26
     132:	e0 e0       	ldi	r30, 0x00	; 0
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	21 c0       	rjmp	.+66     	; 0x17e <malloc+0x66>
     13c:	88 81       	ld	r24, Y
     13e:	99 81       	ldd	r25, Y+1	; 0x01
     140:	86 17       	cp	r24, r22
     142:	97 07       	cpc	r25, r23
     144:	69 f4       	brne	.+26     	; 0x160 <malloc+0x48>
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	9b 81       	ldd	r25, Y+3	; 0x03
     14a:	30 97       	sbiw	r30, 0x00	; 0
     14c:	19 f0       	breq	.+6      	; 0x154 <malloc+0x3c>
     14e:	93 83       	std	Z+3, r25	; 0x03
     150:	82 83       	std	Z+2, r24	; 0x02
     152:	04 c0       	rjmp	.+8      	; 0x15c <malloc+0x44>
     154:	90 93 f0 01 	sts	0x01F0, r25
     158:	80 93 ef 01 	sts	0x01EF, r24
     15c:	fe 01       	movw	r30, r28
     15e:	34 c0       	rjmp	.+104    	; 0x1c8 <malloc+0xb0>
     160:	68 17       	cp	r22, r24
     162:	79 07       	cpc	r23, r25
     164:	38 f4       	brcc	.+14     	; 0x174 <malloc+0x5c>
     166:	41 15       	cp	r20, r1
     168:	51 05       	cpc	r21, r1
     16a:	19 f0       	breq	.+6      	; 0x172 <malloc+0x5a>
     16c:	84 17       	cp	r24, r20
     16e:	95 07       	cpc	r25, r21
     170:	08 f4       	brcc	.+2      	; 0x174 <malloc+0x5c>
     172:	ac 01       	movw	r20, r24
     174:	fe 01       	movw	r30, r28
     176:	8a 81       	ldd	r24, Y+2	; 0x02
     178:	9b 81       	ldd	r25, Y+3	; 0x03
     17a:	9c 01       	movw	r18, r24
     17c:	e9 01       	movw	r28, r18
     17e:	20 97       	sbiw	r28, 0x00	; 0
     180:	e9 f6       	brne	.-70     	; 0x13c <malloc+0x24>
     182:	41 15       	cp	r20, r1
     184:	51 05       	cpc	r21, r1
     186:	a9 f1       	breq	.+106    	; 0x1f2 <malloc+0xda>
     188:	ca 01       	movw	r24, r20
     18a:	86 1b       	sub	r24, r22
     18c:	97 0b       	sbc	r25, r23
     18e:	04 97       	sbiw	r24, 0x04	; 4
     190:	08 f4       	brcc	.+2      	; 0x194 <malloc+0x7c>
     192:	ba 01       	movw	r22, r20
     194:	e0 e0       	ldi	r30, 0x00	; 0
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	2a c0       	rjmp	.+84     	; 0x1ee <malloc+0xd6>
     19a:	8d 91       	ld	r24, X+
     19c:	9c 91       	ld	r25, X
     19e:	11 97       	sbiw	r26, 0x01	; 1
     1a0:	84 17       	cp	r24, r20
     1a2:	95 07       	cpc	r25, r21
     1a4:	f9 f4       	brne	.+62     	; 0x1e4 <malloc+0xcc>
     1a6:	64 17       	cp	r22, r20
     1a8:	75 07       	cpc	r23, r21
     1aa:	81 f4       	brne	.+32     	; 0x1cc <malloc+0xb4>
     1ac:	12 96       	adiw	r26, 0x02	; 2
     1ae:	8d 91       	ld	r24, X+
     1b0:	9c 91       	ld	r25, X
     1b2:	13 97       	sbiw	r26, 0x03	; 3
     1b4:	30 97       	sbiw	r30, 0x00	; 0
     1b6:	19 f0       	breq	.+6      	; 0x1be <malloc+0xa6>
     1b8:	93 83       	std	Z+3, r25	; 0x03
     1ba:	82 83       	std	Z+2, r24	; 0x02
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <malloc+0xae>
     1be:	90 93 f0 01 	sts	0x01F0, r25
     1c2:	80 93 ef 01 	sts	0x01EF, r24
     1c6:	fd 01       	movw	r30, r26
     1c8:	32 96       	adiw	r30, 0x02	; 2
     1ca:	4c c0       	rjmp	.+152    	; 0x264 <malloc+0x14c>
     1cc:	ca 01       	movw	r24, r20
     1ce:	86 1b       	sub	r24, r22
     1d0:	97 0b       	sbc	r25, r23
     1d2:	fd 01       	movw	r30, r26
     1d4:	e8 0f       	add	r30, r24
     1d6:	f9 1f       	adc	r31, r25
     1d8:	61 93       	st	Z+, r22
     1da:	71 93       	st	Z+, r23
     1dc:	02 97       	sbiw	r24, 0x02	; 2
     1de:	8d 93       	st	X+, r24
     1e0:	9c 93       	st	X, r25
     1e2:	40 c0       	rjmp	.+128    	; 0x264 <malloc+0x14c>
     1e4:	fd 01       	movw	r30, r26
     1e6:	82 81       	ldd	r24, Z+2	; 0x02
     1e8:	93 81       	ldd	r25, Z+3	; 0x03
     1ea:	9c 01       	movw	r18, r24
     1ec:	d9 01       	movw	r26, r18
     1ee:	10 97       	sbiw	r26, 0x00	; 0
     1f0:	a1 f6       	brne	.-88     	; 0x19a <malloc+0x82>
     1f2:	80 91 ed 01 	lds	r24, 0x01ED
     1f6:	90 91 ee 01 	lds	r25, 0x01EE
     1fa:	89 2b       	or	r24, r25
     1fc:	41 f4       	brne	.+16     	; 0x20e <malloc+0xf6>
     1fe:	80 91 24 01 	lds	r24, 0x0124
     202:	90 91 25 01 	lds	r25, 0x0125
     206:	90 93 ee 01 	sts	0x01EE, r25
     20a:	80 93 ed 01 	sts	0x01ED, r24
     20e:	40 91 26 01 	lds	r20, 0x0126
     212:	50 91 27 01 	lds	r21, 0x0127
     216:	41 15       	cp	r20, r1
     218:	51 05       	cpc	r21, r1
     21a:	41 f4       	brne	.+16     	; 0x22c <malloc+0x114>
     21c:	4d b7       	in	r20, 0x3d	; 61
     21e:	5e b7       	in	r21, 0x3e	; 62
     220:	80 91 22 01 	lds	r24, 0x0122
     224:	90 91 23 01 	lds	r25, 0x0123
     228:	48 1b       	sub	r20, r24
     22a:	59 0b       	sbc	r21, r25
     22c:	20 91 ed 01 	lds	r18, 0x01ED
     230:	30 91 ee 01 	lds	r19, 0x01EE
     234:	ca 01       	movw	r24, r20
     236:	82 1b       	sub	r24, r18
     238:	93 0b       	sbc	r25, r19
     23a:	86 17       	cp	r24, r22
     23c:	97 07       	cpc	r25, r23
     23e:	80 f0       	brcs	.+32     	; 0x260 <malloc+0x148>
     240:	ab 01       	movw	r20, r22
     242:	4e 5f       	subi	r20, 0xFE	; 254
     244:	5f 4f       	sbci	r21, 0xFF	; 255
     246:	84 17       	cp	r24, r20
     248:	95 07       	cpc	r25, r21
     24a:	50 f0       	brcs	.+20     	; 0x260 <malloc+0x148>
     24c:	42 0f       	add	r20, r18
     24e:	53 1f       	adc	r21, r19
     250:	50 93 ee 01 	sts	0x01EE, r21
     254:	40 93 ed 01 	sts	0x01ED, r20
     258:	f9 01       	movw	r30, r18
     25a:	61 93       	st	Z+, r22
     25c:	71 93       	st	Z+, r23
     25e:	02 c0       	rjmp	.+4      	; 0x264 <malloc+0x14c>
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	cf 01       	movw	r24, r30
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <free>:
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	00 97       	sbiw	r24, 0x00	; 0
     272:	09 f4       	brne	.+2      	; 0x276 <free+0xa>
     274:	50 c0       	rjmp	.+160    	; 0x316 <free+0xaa>
     276:	ec 01       	movw	r28, r24
     278:	22 97       	sbiw	r28, 0x02	; 2
     27a:	1b 82       	std	Y+3, r1	; 0x03
     27c:	1a 82       	std	Y+2, r1	; 0x02
     27e:	a0 91 ef 01 	lds	r26, 0x01EF
     282:	b0 91 f0 01 	lds	r27, 0x01F0
     286:	10 97       	sbiw	r26, 0x00	; 0
     288:	09 f1       	breq	.+66     	; 0x2cc <free+0x60>
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	ac 17       	cp	r26, r28
     290:	bd 07       	cpc	r27, r29
     292:	08 f1       	brcs	.+66     	; 0x2d6 <free+0x6a>
     294:	bb 83       	std	Y+3, r27	; 0x03
     296:	aa 83       	std	Y+2, r26	; 0x02
     298:	fe 01       	movw	r30, r28
     29a:	21 91       	ld	r18, Z+
     29c:	31 91       	ld	r19, Z+
     29e:	e2 0f       	add	r30, r18
     2a0:	f3 1f       	adc	r31, r19
     2a2:	ae 17       	cp	r26, r30
     2a4:	bf 07       	cpc	r27, r31
     2a6:	79 f4       	brne	.+30     	; 0x2c6 <free+0x5a>
     2a8:	8d 91       	ld	r24, X+
     2aa:	9c 91       	ld	r25, X
     2ac:	11 97       	sbiw	r26, 0x01	; 1
     2ae:	28 0f       	add	r18, r24
     2b0:	39 1f       	adc	r19, r25
     2b2:	2e 5f       	subi	r18, 0xFE	; 254
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255
     2b6:	39 83       	std	Y+1, r19	; 0x01
     2b8:	28 83       	st	Y, r18
     2ba:	12 96       	adiw	r26, 0x02	; 2
     2bc:	8d 91       	ld	r24, X+
     2be:	9c 91       	ld	r25, X
     2c0:	13 97       	sbiw	r26, 0x03	; 3
     2c2:	9b 83       	std	Y+3, r25	; 0x03
     2c4:	8a 83       	std	Y+2, r24	; 0x02
     2c6:	41 15       	cp	r20, r1
     2c8:	51 05       	cpc	r21, r1
     2ca:	71 f4       	brne	.+28     	; 0x2e8 <free+0x7c>
     2cc:	d0 93 f0 01 	sts	0x01F0, r29
     2d0:	c0 93 ef 01 	sts	0x01EF, r28
     2d4:	20 c0       	rjmp	.+64     	; 0x316 <free+0xaa>
     2d6:	12 96       	adiw	r26, 0x02	; 2
     2d8:	8d 91       	ld	r24, X+
     2da:	9c 91       	ld	r25, X
     2dc:	13 97       	sbiw	r26, 0x03	; 3
     2de:	ad 01       	movw	r20, r26
     2e0:	00 97       	sbiw	r24, 0x00	; 0
     2e2:	11 f0       	breq	.+4      	; 0x2e8 <free+0x7c>
     2e4:	dc 01       	movw	r26, r24
     2e6:	d3 cf       	rjmp	.-90     	; 0x28e <free+0x22>
     2e8:	fa 01       	movw	r30, r20
     2ea:	d3 83       	std	Z+3, r29	; 0x03
     2ec:	c2 83       	std	Z+2, r28	; 0x02
     2ee:	21 91       	ld	r18, Z+
     2f0:	31 91       	ld	r19, Z+
     2f2:	e2 0f       	add	r30, r18
     2f4:	f3 1f       	adc	r31, r19
     2f6:	ce 17       	cp	r28, r30
     2f8:	df 07       	cpc	r29, r31
     2fa:	69 f4       	brne	.+26     	; 0x316 <free+0xaa>
     2fc:	88 81       	ld	r24, Y
     2fe:	99 81       	ldd	r25, Y+1	; 0x01
     300:	28 0f       	add	r18, r24
     302:	39 1f       	adc	r19, r25
     304:	2e 5f       	subi	r18, 0xFE	; 254
     306:	3f 4f       	sbci	r19, 0xFF	; 255
     308:	fa 01       	movw	r30, r20
     30a:	31 83       	std	Z+1, r19	; 0x01
     30c:	20 83       	st	Z, r18
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	9b 81       	ldd	r25, Y+3	; 0x03
     312:	93 83       	std	Z+3, r25	; 0x03
     314:	82 83       	std	Z+2, r24	; 0x02
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <realloc>:
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	e4 e9       	ldi	r30, 0x94	; 148
     322:	f1 e0       	ldi	r31, 0x01	; 1
     324:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__prologue_saves__+0x4>
     328:	6c 01       	movw	r12, r24
     32a:	00 97       	sbiw	r24, 0x00	; 0
     32c:	29 f4       	brne	.+10     	; 0x338 <realloc+0x1c>
     32e:	cb 01       	movw	r24, r22
     330:	0e 94 8c 00 	call	0x118	; 0x118 <malloc>
     334:	6c 01       	movw	r12, r24
     336:	c1 c0       	rjmp	.+386    	; 0x4ba <realloc+0x19e>
     338:	8e ef       	ldi	r24, 0xFE	; 254
     33a:	88 2e       	mov	r8, r24
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	98 2e       	mov	r9, r24
     340:	8c 0c       	add	r8, r12
     342:	9d 1c       	adc	r9, r13
     344:	86 01       	movw	r16, r12
     346:	06 0f       	add	r16, r22
     348:	17 1f       	adc	r17, r23
     34a:	08 15       	cp	r16, r8
     34c:	19 05       	cpc	r17, r9
     34e:	08 f4       	brcc	.+2      	; 0x352 <realloc+0x36>
     350:	b2 c0       	rjmp	.+356    	; 0x4b6 <realloc+0x19a>
     352:	f4 01       	movw	r30, r8
     354:	a0 81       	ld	r26, Z
     356:	b1 81       	ldd	r27, Z+1	; 0x01
     358:	a6 17       	cp	r26, r22
     35a:	b7 07       	cpc	r27, r23
     35c:	b8 f0       	brcs	.+46     	; 0x38c <realloc+0x70>
     35e:	a5 30       	cpi	r26, 0x05	; 5
     360:	b1 05       	cpc	r27, r1
     362:	08 f4       	brcc	.+2      	; 0x366 <realloc+0x4a>
     364:	aa c0       	rjmp	.+340    	; 0x4ba <realloc+0x19e>
     366:	cd 01       	movw	r24, r26
     368:	04 97       	sbiw	r24, 0x04	; 4
     36a:	86 17       	cp	r24, r22
     36c:	97 07       	cpc	r25, r23
     36e:	08 f4       	brcc	.+2      	; 0x372 <realloc+0x56>
     370:	a4 c0       	rjmp	.+328    	; 0x4ba <realloc+0x19e>
     372:	12 97       	sbiw	r26, 0x02	; 2
     374:	a6 1b       	sub	r26, r22
     376:	b7 0b       	sbc	r27, r23
     378:	f8 01       	movw	r30, r16
     37a:	a1 93       	st	Z+, r26
     37c:	b1 93       	st	Z+, r27
     37e:	d4 01       	movw	r26, r8
     380:	6d 93       	st	X+, r22
     382:	7c 93       	st	X, r23
     384:	cf 01       	movw	r24, r30
     386:	0e 94 36 01 	call	0x26c	; 0x26c <free>
     38a:	97 c0       	rjmp	.+302    	; 0x4ba <realloc+0x19e>
     38c:	7b 01       	movw	r14, r22
     38e:	ea 1a       	sub	r14, r26
     390:	fb 0a       	sbc	r15, r27
     392:	ee ef       	ldi	r30, 0xFE	; 254
     394:	ff ef       	ldi	r31, 0xFF	; 255
     396:	ee 0e       	add	r14, r30
     398:	ff 1e       	adc	r15, r31
     39a:	36 01       	movw	r6, r12
     39c:	6a 0e       	add	r6, r26
     39e:	7b 1e       	adc	r7, r27
     3a0:	c0 91 ef 01 	lds	r28, 0x01EF
     3a4:	d0 91 f0 01 	lds	r29, 0x01F0
     3a8:	44 24       	eor	r4, r4
     3aa:	55 24       	eor	r5, r5
     3ac:	aa 24       	eor	r10, r10
     3ae:	bb 24       	eor	r11, r11
     3b0:	4a c0       	rjmp	.+148    	; 0x446 <realloc+0x12a>
     3b2:	c6 15       	cp	r28, r6
     3b4:	d7 05       	cpc	r29, r7
     3b6:	e1 f5       	brne	.+120    	; 0x430 <realloc+0x114>
     3b8:	48 81       	ld	r20, Y
     3ba:	59 81       	ldd	r21, Y+1	; 0x01
     3bc:	4e 15       	cp	r20, r14
     3be:	5f 05       	cpc	r21, r15
     3c0:	b8 f1       	brcs	.+110    	; 0x430 <realloc+0x114>
     3c2:	ca 01       	movw	r24, r20
     3c4:	04 97       	sbiw	r24, 0x04	; 4
     3c6:	8e 15       	cp	r24, r14
     3c8:	9f 05       	cpc	r25, r15
     3ca:	b0 f4       	brcc	.+44     	; 0x3f8 <realloc+0xdc>
     3cc:	12 96       	adiw	r26, 0x02	; 2
     3ce:	a4 0f       	add	r26, r20
     3d0:	b5 1f       	adc	r27, r21
     3d2:	f4 01       	movw	r30, r8
     3d4:	b1 83       	std	Z+1, r27	; 0x01
     3d6:	a0 83       	st	Z, r26
     3d8:	2a 81       	ldd	r18, Y+2	; 0x02
     3da:	3b 81       	ldd	r19, Y+3	; 0x03
     3dc:	41 14       	cp	r4, r1
     3de:	51 04       	cpc	r5, r1
     3e0:	31 f0       	breq	.+12     	; 0x3ee <realloc+0xd2>
     3e2:	d2 01       	movw	r26, r4
     3e4:	13 96       	adiw	r26, 0x03	; 3
     3e6:	3c 93       	st	X, r19
     3e8:	2e 93       	st	-X, r18
     3ea:	12 97       	sbiw	r26, 0x02	; 2
     3ec:	66 c0       	rjmp	.+204    	; 0x4ba <realloc+0x19e>
     3ee:	30 93 f0 01 	sts	0x01F0, r19
     3f2:	20 93 ef 01 	sts	0x01EF, r18
     3f6:	61 c0       	rjmp	.+194    	; 0x4ba <realloc+0x19e>
     3f8:	8a 81       	ldd	r24, Y+2	; 0x02
     3fa:	9b 81       	ldd	r25, Y+3	; 0x03
     3fc:	f8 01       	movw	r30, r16
     3fe:	93 83       	std	Z+3, r25	; 0x03
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	42 50       	subi	r20, 0x02	; 2
     404:	50 40       	sbci	r21, 0x00	; 0
     406:	4e 19       	sub	r20, r14
     408:	5f 09       	sbc	r21, r15
     40a:	51 83       	std	Z+1, r21	; 0x01
     40c:	40 83       	st	Z, r20
     40e:	41 14       	cp	r4, r1
     410:	51 04       	cpc	r5, r1
     412:	31 f0       	breq	.+12     	; 0x420 <realloc+0x104>
     414:	d2 01       	movw	r26, r4
     416:	13 96       	adiw	r26, 0x03	; 3
     418:	1c 93       	st	X, r17
     41a:	0e 93       	st	-X, r16
     41c:	12 97       	sbiw	r26, 0x02	; 2
     41e:	04 c0       	rjmp	.+8      	; 0x428 <realloc+0x10c>
     420:	10 93 f0 01 	sts	0x01F0, r17
     424:	00 93 ef 01 	sts	0x01EF, r16
     428:	f4 01       	movw	r30, r8
     42a:	71 83       	std	Z+1, r23	; 0x01
     42c:	60 83       	st	Z, r22
     42e:	45 c0       	rjmp	.+138    	; 0x4ba <realloc+0x19e>
     430:	88 81       	ld	r24, Y
     432:	99 81       	ldd	r25, Y+1	; 0x01
     434:	a8 16       	cp	r10, r24
     436:	b9 06       	cpc	r11, r25
     438:	08 f4       	brcc	.+2      	; 0x43c <realloc+0x120>
     43a:	5c 01       	movw	r10, r24
     43c:	2e 01       	movw	r4, r28
     43e:	8a 81       	ldd	r24, Y+2	; 0x02
     440:	9b 81       	ldd	r25, Y+3	; 0x03
     442:	9c 01       	movw	r18, r24
     444:	e9 01       	movw	r28, r18
     446:	20 97       	sbiw	r28, 0x00	; 0
     448:	09 f0       	breq	.+2      	; 0x44c <realloc+0x130>
     44a:	b3 cf       	rjmp	.-154    	; 0x3b2 <realloc+0x96>
     44c:	80 91 ed 01 	lds	r24, 0x01ED
     450:	90 91 ee 01 	lds	r25, 0x01EE
     454:	86 15       	cp	r24, r6
     456:	97 05       	cpc	r25, r7
     458:	e9 f4       	brne	.+58     	; 0x494 <realloc+0x178>
     45a:	a6 16       	cp	r10, r22
     45c:	b7 06       	cpc	r11, r23
     45e:	d0 f4       	brcc	.+52     	; 0x494 <realloc+0x178>
     460:	20 91 26 01 	lds	r18, 0x0126
     464:	30 91 27 01 	lds	r19, 0x0127
     468:	21 15       	cp	r18, r1
     46a:	31 05       	cpc	r19, r1
     46c:	41 f4       	brne	.+16     	; 0x47e <realloc+0x162>
     46e:	2d b7       	in	r18, 0x3d	; 61
     470:	3e b7       	in	r19, 0x3e	; 62
     472:	80 91 22 01 	lds	r24, 0x0122
     476:	90 91 23 01 	lds	r25, 0x0123
     47a:	28 1b       	sub	r18, r24
     47c:	39 0b       	sbc	r19, r25
     47e:	02 17       	cp	r16, r18
     480:	13 07       	cpc	r17, r19
     482:	c8 f4       	brcc	.+50     	; 0x4b6 <realloc+0x19a>
     484:	10 93 ee 01 	sts	0x01EE, r17
     488:	00 93 ed 01 	sts	0x01ED, r16
     48c:	d4 01       	movw	r26, r8
     48e:	6d 93       	st	X+, r22
     490:	7c 93       	st	X, r23
     492:	13 c0       	rjmp	.+38     	; 0x4ba <realloc+0x19e>
     494:	cb 01       	movw	r24, r22
     496:	0e 94 8c 00 	call	0x118	; 0x118 <malloc>
     49a:	ec 01       	movw	r28, r24
     49c:	00 97       	sbiw	r24, 0x00	; 0
     49e:	59 f0       	breq	.+22     	; 0x4b6 <realloc+0x19a>
     4a0:	f4 01       	movw	r30, r8
     4a2:	40 81       	ld	r20, Z
     4a4:	51 81       	ldd	r21, Z+1	; 0x01
     4a6:	b6 01       	movw	r22, r12
     4a8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <memcpy>
     4ac:	c6 01       	movw	r24, r12
     4ae:	0e 94 36 01 	call	0x26c	; 0x26c <free>
     4b2:	6e 01       	movw	r12, r28
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <realloc+0x19e>
     4b6:	cc 24       	eor	r12, r12
     4b8:	dd 24       	eor	r13, r13
     4ba:	c6 01       	movw	r24, r12
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	e0 e1       	ldi	r30, 0x10	; 16
     4c2:	0c 94 16 09 	jmp	0x122c	; 0x122c <__epilogue_restores__+0x4>

000004c6 <memcpy>:
     4c6:	fb 01       	movw	r30, r22
     4c8:	dc 01       	movw	r26, r24
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <memcpy+0xa>
     4cc:	01 90       	ld	r0, Z+
     4ce:	0d 92       	st	X+, r0
     4d0:	41 50       	subi	r20, 0x01	; 1
     4d2:	50 40       	sbci	r21, 0x00	; 0
     4d4:	d8 f7       	brcc	.-10     	; 0x4cc <memcpy+0x6>
     4d6:	08 95       	ret

000004d8 <strcpy>:
     4d8:	fb 01       	movw	r30, r22
     4da:	dc 01       	movw	r26, r24
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	00 20       	and	r0, r0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <strcpy+0x4>
     4e4:	08 95       	ret

000004e6 <setup>:
//The setup function is called once at startup of the sketch
void setup()
{
// Add your initialization code here

	Serial.begin(115200);
     4e6:	85 ec       	ldi	r24, 0xC5	; 197
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	52 ec       	ldi	r21, 0xC2	; 194
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	0e 94 67 03 	call	0x6ce	; 0x6ce <_ZN14HardwareSerial5beginEm>
}
     4f6:	08 95       	ret

000004f8 <_Z5flashv>:
int ledPin = 13;
boolean ledState = false;
void flash(){
 // Flash the LED on pin 13 just to show that something is happening
  // Also serves as an indication that we're not "stuck" waiting for TWI data
  ledState = !ledState;
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	80 91 3c 01 	lds	r24, 0x013C
     4fe:	88 23       	and	r24, r24
     500:	09 f4       	brne	.+2      	; 0x504 <_Z5flashv+0xc>
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	90 93 3c 01 	sts	0x013C, r25
  if (ledState) {
     508:	99 23       	and	r25, r25
     50a:	21 f0       	breq	.+8      	; 0x514 <_Z5flashv+0x1c>
    digitalWrite(ledPin,HIGH);
     50c:	80 91 28 01 	lds	r24, 0x0128
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	03 c0       	rjmp	.+6      	; 0x51a <_Z5flashv+0x22>
  }
  else
  {
    digitalWrite(ledPin,LOW);
     514:	80 91 28 01 	lds	r24, 0x0128
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <digitalWrite>
     51e:	08 95       	ret

00000520 <loop>:

	Serial.begin(115200);
}

// The loop function is called in an endless loop
void loop()
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	df 93       	push	r29
     52a:	cf 93       	push	r28
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	27 97       	sbiw	r28, 0x07	; 7
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
{


	Serial.print("Hello, world: ");
     53c:	05 ec       	ldi	r16, 0xC5	; 197
     53e:	11 e0       	ldi	r17, 0x01	; 1
     540:	c8 01       	movw	r24, r16
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN5Print5printEPKc>
	Serial.print(count ++);
     54a:	60 91 3a 01 	lds	r22, 0x013A
     54e:	70 91 3b 01 	lds	r23, 0x013B
     552:	6f 5f       	subi	r22, 0xFF	; 255
     554:	7f 4f       	sbci	r23, 0xFF	; 255
     556:	70 93 3b 01 	sts	0x013B, r23
     55a:	60 93 3a 01 	sts	0x013A, r22
     55e:	61 50       	subi	r22, 0x01	; 1
     560:	70 40       	sbci	r23, 0x00	; 0
     562:	c8 01       	movw	r24, r16
     564:	4a e0       	ldi	r20, 0x0A	; 10
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN5Print5printEii>
	Serial.print("      msg read:" );
     56c:	c8 01       	movw	r24, r16
     56e:	6f e0       	ldi	r22, 0x0F	; 15
     570:	71 e0       	ldi	r23, 0x01	; 1
     572:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN5Print5printEPKc>
	Serial.println(Serial.readString());
     576:	7e 01       	movw	r14, r28
     578:	08 94       	sec
     57a:	e1 1c       	adc	r14, r1
     57c:	f1 1c       	adc	r15, r1
     57e:	c7 01       	movw	r24, r14
     580:	b8 01       	movw	r22, r16
     582:	0e 94 6d 06 	call	0xcda	; 0xcda <_ZN6Stream10readStringEv>
     586:	c8 01       	movw	r24, r16
     588:	b7 01       	movw	r22, r14
     58a:	0e 94 2d 06 	call	0xc5a	; 0xc5a <_ZN5Print7printlnERK6String>
     58e:	c7 01       	movw	r24, r14
     590:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZN6StringD1Ev>
	Serial.print("x");
     594:	c8 01       	movw	r24, r16
     596:	6f e1       	ldi	r22, 0x1F	; 31
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN5Print5printEPKc>
	delay(1000);
     59e:	68 ee       	ldi	r22, 0xE8	; 232
     5a0:	73 e0       	ldi	r23, 0x03	; 3
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 c9 07 	call	0xf92	; 0xf92 <delay>
	flash();
     5aa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <_Z5flashv>
}
     5ae:	27 96       	adiw	r28, 0x07	; 7
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	cf 91       	pop	r28
     5bc:	df 91       	pop	r29
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     5c8:	08 95       	ret

000005ca <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
     5ca:	1f 92       	push	r1
     5cc:	0f 92       	push	r0
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	0f 92       	push	r0
     5d2:	11 24       	eor	r1, r1
     5d4:	2f 93       	push	r18
     5d6:	3f 93       	push	r19
     5d8:	4f 93       	push	r20
     5da:	8f 93       	push	r24
     5dc:	9f 93       	push	r25
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     5e2:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     5e6:	20 91 7d 01 	lds	r18, 0x017D
     5ea:	30 91 7e 01 	lds	r19, 0x017E

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     5ee:	2f 5f       	subi	r18, 0xFF	; 255
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
     5f2:	2f 73       	andi	r18, 0x3F	; 63
     5f4:	30 70       	andi	r19, 0x00	; 0
     5f6:	80 91 7f 01 	lds	r24, 0x017F
     5fa:	90 91 80 01 	lds	r25, 0x0180
     5fe:	28 17       	cp	r18, r24
     600:	39 07       	cpc	r19, r25
     602:	59 f0       	breq	.+22     	; 0x61a <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
     604:	e0 91 7d 01 	lds	r30, 0x017D
     608:	f0 91 7e 01 	lds	r31, 0x017E
     60c:	e3 5c       	subi	r30, 0xC3	; 195
     60e:	fe 4f       	sbci	r31, 0xFE	; 254
     610:	40 83       	st	Z, r20
    buffer->head = i;
     612:	30 93 7e 01 	sts	0x017E, r19
     616:	20 93 7d 01 	sts	0x017D, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     632:	e0 91 d1 01 	lds	r30, 0x01D1
     636:	f0 91 d2 01 	lds	r31, 0x01D2
     63a:	e0 5c       	subi	r30, 0xC0	; 192
     63c:	ff 4f       	sbci	r31, 0xFF	; 255
     63e:	81 91       	ld	r24, Z+
     640:	91 91       	ld	r25, Z+
     642:	20 81       	ld	r18, Z
     644:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     646:	82 1b       	sub	r24, r18
     648:	93 0b       	sbc	r25, r19
     64a:	8f 73       	andi	r24, 0x3F	; 63
     64c:	90 70       	andi	r25, 0x00	; 0
     64e:	89 2b       	or	r24, r25
     650:	11 f0       	breq	.+4      	; 0x656 <_Z14serialEventRunv+0x24>
     652:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z11serialEventv>
     656:	08 95       	ret

00000658 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
     658:	1f 92       	push	r1
     65a:	0f 92       	push	r0
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	0f 92       	push	r0
     660:	11 24       	eor	r1, r1
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	ef 93       	push	r30
     66c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
     66e:	20 91 c1 01 	lds	r18, 0x01C1
     672:	30 91 c2 01 	lds	r19, 0x01C2
     676:	80 91 c3 01 	lds	r24, 0x01C3
     67a:	90 91 c4 01 	lds	r25, 0x01C4
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	31 f4       	brne	.+12     	; 0x690 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     684:	80 91 c1 00 	lds	r24, 0x00C1
     688:	8f 7d       	andi	r24, 0xDF	; 223
     68a:	80 93 c1 00 	sts	0x00C1, r24
     68e:	14 c0       	rjmp	.+40     	; 0x6b8 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     690:	e0 91 c3 01 	lds	r30, 0x01C3
     694:	f0 91 c4 01 	lds	r31, 0x01C4
     698:	ef 57       	subi	r30, 0x7F	; 127
     69a:	fe 4f       	sbci	r31, 0xFE	; 254
     69c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     69e:	80 91 c3 01 	lds	r24, 0x01C3
     6a2:	90 91 c4 01 	lds	r25, 0x01C4
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	8f 73       	andi	r24, 0x3F	; 63
     6aa:	90 70       	andi	r25, 0x00	; 0
     6ac:	90 93 c4 01 	sts	0x01C4, r25
     6b0:	80 93 c3 01 	sts	0x01C3, r24
	
  #if defined(UDR0)
    UDR0 = c;
     6b4:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     6b8:	ff 91       	pop	r31
     6ba:	ef 91       	pop	r30
     6bc:	9f 91       	pop	r25
     6be:	8f 91       	pop	r24
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	0f 90       	pop	r0
     6c6:	0f be       	out	0x3f, r0	; 63
     6c8:	0f 90       	pop	r0
     6ca:	1f 90       	pop	r1
     6cc:	18 95       	reti

000006ce <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	ec 01       	movw	r28, r24
     6e2:	7a 01       	movw	r14, r20
     6e4:	8b 01       	movw	r16, r22
     6e6:	dd 24       	eor	r13, r13
     6e8:	40 30       	cpi	r20, 0x00	; 0
     6ea:	81 ee       	ldi	r24, 0xE1	; 225
     6ec:	58 07       	cpc	r21, r24
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	68 07       	cpc	r22, r24
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	78 07       	cpc	r23, r24
     6f6:	11 f0       	breq	.+4      	; 0x6fc <_ZN14HardwareSerial5beginEm+0x2e>
     6f8:	dd 24       	eor	r13, r13
     6fa:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	a9 2e       	mov	r10, r25
     700:	b1 2c       	mov	r11, r1
     702:	ec 89       	ldd	r30, Y+20	; 0x14
     704:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
     706:	dd 20       	and	r13, r13
     708:	69 f0       	breq	.+26     	; 0x724 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
     70a:	c5 01       	movw	r24, r10
     70c:	0e 8c       	ldd	r0, Y+30	; 0x1e
     70e:	02 c0       	rjmp	.+4      	; 0x714 <_ZN14HardwareSerial5beginEm+0x46>
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	0a 94       	dec	r0
     716:	e2 f7       	brpl	.-8      	; 0x710 <_ZN14HardwareSerial5beginEm+0x42>
     718:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	79 e0       	ldi	r23, 0x09	; 9
     71e:	8d e3       	ldi	r24, 0x3D	; 61
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	05 c0       	rjmp	.+10     	; 0x72e <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
     724:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     726:	60 e8       	ldi	r22, 0x80	; 128
     728:	74 e8       	ldi	r23, 0x84	; 132
     72a:	8e e1       	ldi	r24, 0x1E	; 30
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	a8 01       	movw	r20, r16
     730:	97 01       	movw	r18, r14
     732:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__udivmodsi4>
     736:	21 50       	subi	r18, 0x01	; 1
     738:	30 40       	sbci	r19, 0x00	; 0
     73a:	40 40       	sbci	r20, 0x00	; 0
     73c:	50 40       	sbci	r21, 0x00	; 0
     73e:	56 95       	lsr	r21
     740:	47 95       	ror	r20
     742:	37 95       	ror	r19
     744:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     746:	80 e1       	ldi	r24, 0x10	; 16
     748:	20 30       	cpi	r18, 0x00	; 0
     74a:	38 07       	cpc	r19, r24
     74c:	20 f0       	brcs	.+8      	; 0x756 <_ZN14HardwareSerial5beginEm+0x88>
     74e:	dd 20       	and	r13, r13
     750:	11 f0       	breq	.+4      	; 0x756 <_ZN14HardwareSerial5beginEm+0x88>
     752:	dd 24       	eor	r13, r13
     754:	d6 cf       	rjmp	.-84     	; 0x702 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     756:	e8 89       	ldd	r30, Y+16	; 0x10
     758:	f9 89       	ldd	r31, Y+17	; 0x11
     75a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     75c:	ea 89       	ldd	r30, Y+18	; 0x12
     75e:	fb 89       	ldd	r31, Y+19	; 0x13
     760:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     762:	ee 89       	ldd	r30, Y+22	; 0x16
     764:	ff 89       	ldd	r31, Y+23	; 0x17
     766:	40 81       	ld	r20, Z
     768:	21 e0       	ldi	r18, 0x01	; 1
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	c9 01       	movw	r24, r18
     76e:	0a 8c       	ldd	r0, Y+26	; 0x1a
     770:	02 c0       	rjmp	.+4      	; 0x776 <_ZN14HardwareSerial5beginEm+0xa8>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	0a 94       	dec	r0
     778:	e2 f7       	brpl	.-8      	; 0x772 <_ZN14HardwareSerial5beginEm+0xa4>
     77a:	48 2b       	or	r20, r24
     77c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     77e:	ee 89       	ldd	r30, Y+22	; 0x16
     780:	ff 89       	ldd	r31, Y+23	; 0x17
     782:	40 81       	ld	r20, Z
     784:	c9 01       	movw	r24, r18
     786:	0b 8c       	ldd	r0, Y+27	; 0x1b
     788:	02 c0       	rjmp	.+4      	; 0x78e <_ZN14HardwareSerial5beginEm+0xc0>
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	0a 94       	dec	r0
     790:	e2 f7       	brpl	.-8      	; 0x78a <_ZN14HardwareSerial5beginEm+0xbc>
     792:	48 2b       	or	r20, r24
     794:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     796:	ee 89       	ldd	r30, Y+22	; 0x16
     798:	ff 89       	ldd	r31, Y+23	; 0x17
     79a:	40 81       	ld	r20, Z
     79c:	c9 01       	movw	r24, r18
     79e:	0c 8c       	ldd	r0, Y+28	; 0x1c
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <_ZN14HardwareSerial5beginEm+0xd8>
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	0a 94       	dec	r0
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <_ZN14HardwareSerial5beginEm+0xd4>
     7aa:	48 2b       	or	r20, r24
     7ac:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     7ae:	ee 89       	ldd	r30, Y+22	; 0x16
     7b0:	ff 89       	ldd	r31, Y+23	; 0x17
     7b2:	80 81       	ld	r24, Z
     7b4:	0d 8c       	ldd	r0, Y+29	; 0x1d
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <_ZN14HardwareSerial5beginEm+0xee>
     7b8:	22 0f       	add	r18, r18
     7ba:	33 1f       	adc	r19, r19
     7bc:	0a 94       	dec	r0
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <_ZN14HardwareSerial5beginEm+0xea>
     7c0:	20 95       	com	r18
     7c2:	28 23       	and	r18, r24
     7c4:	20 83       	st	Z, r18
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	08 95       	ret

000007da <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     7da:	dc 01       	movw	r26, r24
     7dc:	1c 96       	adiw	r26, 0x0c	; 12
     7de:	ed 91       	ld	r30, X+
     7e0:	fc 91       	ld	r31, X
     7e2:	1d 97       	sbiw	r26, 0x0d	; 13
     7e4:	e0 5c       	subi	r30, 0xC0	; 192
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	21 91       	ld	r18, Z+
     7ea:	31 91       	ld	r19, Z+
     7ec:	80 81       	ld	r24, Z
     7ee:	91 81       	ldd	r25, Z+1	; 0x01
     7f0:	28 1b       	sub	r18, r24
     7f2:	39 0b       	sbc	r19, r25
     7f4:	2f 73       	andi	r18, 0x3F	; 63
     7f6:	30 70       	andi	r19, 0x00	; 0
}
     7f8:	c9 01       	movw	r24, r18
     7fa:	08 95       	ret

000007fc <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     7fc:	dc 01       	movw	r26, r24
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	ed 91       	ld	r30, X+
     802:	fc 91       	ld	r31, X
     804:	1d 97       	sbiw	r26, 0x0d	; 13
     806:	e0 5c       	subi	r30, 0xC0	; 192
     808:	ff 4f       	sbci	r31, 0xFF	; 255
     80a:	20 81       	ld	r18, Z
     80c:	31 81       	ldd	r19, Z+1	; 0x01
     80e:	e0 54       	subi	r30, 0x40	; 64
     810:	f0 40       	sbci	r31, 0x00	; 0
     812:	df 01       	movw	r26, r30
     814:	ae 5b       	subi	r26, 0xBE	; 190
     816:	bf 4f       	sbci	r27, 0xFF	; 255
     818:	8d 91       	ld	r24, X+
     81a:	9c 91       	ld	r25, X
     81c:	11 97       	sbiw	r26, 0x01	; 1
     81e:	28 17       	cp	r18, r24
     820:	39 07       	cpc	r19, r25
     822:	19 f4       	brne	.+6      	; 0x82a <_ZN14HardwareSerial4peekEv+0x2e>
     824:	2f ef       	ldi	r18, 0xFF	; 255
     826:	3f ef       	ldi	r19, 0xFF	; 255
     828:	07 c0       	rjmp	.+14     	; 0x838 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     82a:	8d 91       	ld	r24, X+
     82c:	9c 91       	ld	r25, X
     82e:	e8 0f       	add	r30, r24
     830:	f9 1f       	adc	r31, r25
     832:	80 81       	ld	r24, Z
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     838:	c9 01       	movw	r24, r18
     83a:	08 95       	ret

0000083c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     83c:	dc 01       	movw	r26, r24
     83e:	1c 96       	adiw	r26, 0x0c	; 12
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	1d 97       	sbiw	r26, 0x0d	; 13
     846:	e0 5c       	subi	r30, 0xC0	; 192
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	20 81       	ld	r18, Z
     84c:	31 81       	ldd	r19, Z+1	; 0x01
     84e:	e0 54       	subi	r30, 0x40	; 64
     850:	f0 40       	sbci	r31, 0x00	; 0
     852:	df 01       	movw	r26, r30
     854:	ae 5b       	subi	r26, 0xBE	; 190
     856:	bf 4f       	sbci	r27, 0xFF	; 255
     858:	8d 91       	ld	r24, X+
     85a:	9c 91       	ld	r25, X
     85c:	11 97       	sbiw	r26, 0x01	; 1
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	19 f4       	brne	.+6      	; 0x86a <_ZN14HardwareSerial4readEv+0x2e>
     864:	2f ef       	ldi	r18, 0xFF	; 255
     866:	3f ef       	ldi	r19, 0xFF	; 255
     868:	10 c0       	rjmp	.+32     	; 0x88a <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     86a:	8d 91       	ld	r24, X+
     86c:	9c 91       	ld	r25, X
     86e:	11 97       	sbiw	r26, 0x01	; 1
     870:	e8 0f       	add	r30, r24
     872:	f9 1f       	adc	r31, r25
     874:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     876:	8d 91       	ld	r24, X+
     878:	9c 91       	ld	r25, X
     87a:	11 97       	sbiw	r26, 0x01	; 1
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	8f 73       	andi	r24, 0x3F	; 63
     880:	90 70       	andi	r25, 0x00	; 0
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	9c 93       	st	X, r25
     886:	8e 93       	st	-X, r24
    return c;
     888:	30 e0       	ldi	r19, 0x00	; 0
  }
}
     88a:	c9 01       	movw	r24, r18
     88c:	08 95       	ret

0000088e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     88e:	fc 01       	movw	r30, r24
     890:	86 85       	ldd	r24, Z+14	; 0x0e
     892:	97 85       	ldd	r25, Z+15	; 0x0f
     894:	dc 01       	movw	r26, r24
     896:	a0 5c       	subi	r26, 0xC0	; 192
     898:	bf 4f       	sbci	r27, 0xFF	; 255
     89a:	fc 01       	movw	r30, r24
     89c:	ee 5b       	subi	r30, 0xBE	; 190
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	2d 91       	ld	r18, X+
     8a2:	3c 91       	ld	r19, X
     8a4:	11 97       	sbiw	r26, 0x01	; 1
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	28 17       	cp	r18, r24
     8ac:	39 07       	cpc	r19, r25
     8ae:	c1 f7       	brne	.-16     	; 0x8a0 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
     8b0:	08 95       	ret

000008b2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     8b8:	ee 85       	ldd	r30, Y+14	; 0x0e
     8ba:	ff 85       	ldd	r31, Y+15	; 0x0f
     8bc:	e0 5c       	subi	r30, 0xC0	; 192
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	20 81       	ld	r18, Z
     8c2:	31 81       	ldd	r19, Z+1	; 0x01
     8c4:	e0 54       	subi	r30, 0x40	; 64
     8c6:	f0 40       	sbci	r31, 0x00	; 0
     8c8:	2f 5f       	subi	r18, 0xFF	; 255
     8ca:	3f 4f       	sbci	r19, 0xFF	; 255
     8cc:	2f 73       	andi	r18, 0x3F	; 63
     8ce:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     8d0:	df 01       	movw	r26, r30
     8d2:	ae 5b       	subi	r26, 0xBE	; 190
     8d4:	bf 4f       	sbci	r27, 0xFF	; 255
     8d6:	8d 91       	ld	r24, X+
     8d8:	9c 91       	ld	r25, X
     8da:	11 97       	sbiw	r26, 0x01	; 1
     8dc:	28 17       	cp	r18, r24
     8de:	39 07       	cpc	r19, r25
     8e0:	d1 f3       	breq	.-12     	; 0x8d6 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     8e2:	e0 5c       	subi	r30, 0xC0	; 192
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	e0 54       	subi	r30, 0x40	; 64
     8ec:	f0 40       	sbci	r31, 0x00	; 0
     8ee:	e8 0f       	add	r30, r24
     8f0:	f9 1f       	adc	r31, r25
     8f2:	60 83       	st	Z, r22
  _tx_buffer->head = i;
     8f4:	ee 85       	ldd	r30, Y+14	; 0x0e
     8f6:	ff 85       	ldd	r31, Y+15	; 0x0f
     8f8:	e0 5c       	subi	r30, 0xC0	; 192
     8fa:	ff 4f       	sbci	r31, 0xFF	; 255
     8fc:	31 83       	std	Z+1, r19	; 0x01
     8fe:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
     900:	ee 89       	ldd	r30, Y+22	; 0x16
     902:	ff 89       	ldd	r31, Y+23	; 0x17
     904:	20 81       	ld	r18, Z
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0d 8c       	ldd	r0, Y+29	; 0x1d
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0x13>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	0a 94       	dec	r0
     914:	e2 f7       	brpl	.-8      	; 0x90e <__stack+0xf>
     916:	28 2b       	or	r18, r24
     918:	20 83       	st	Z, r18
  
  return 1;
}
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     924:	10 92 c8 01 	sts	0x01C8, r1
     928:	10 92 c7 01 	sts	0x01C7, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     92c:	88 ee       	ldi	r24, 0xE8	; 232
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	80 93 c9 01 	sts	0x01C9, r24
     938:	90 93 ca 01 	sts	0x01CA, r25
     93c:	a0 93 cb 01 	sts	0x01CB, r26
     940:	b0 93 cc 01 	sts	0x01CC, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     944:	8e e2       	ldi	r24, 0x2E	; 46
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	90 93 c6 01 	sts	0x01C6, r25
     94c:	80 93 c5 01 	sts	0x01C5, r24
{
  _rx_buffer = rx_buffer;
     950:	8d e3       	ldi	r24, 0x3D	; 61
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	90 93 d2 01 	sts	0x01D2, r25
     958:	80 93 d1 01 	sts	0x01D1, r24
  _tx_buffer = tx_buffer;
     95c:	81 e8       	ldi	r24, 0x81	; 129
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	90 93 d4 01 	sts	0x01D4, r25
     964:	80 93 d3 01 	sts	0x01D3, r24
  _ubrrh = ubrrh;
     968:	85 ec       	ldi	r24, 0xC5	; 197
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 d6 01 	sts	0x01D6, r25
     970:	80 93 d5 01 	sts	0x01D5, r24
  _ubrrl = ubrrl;
     974:	84 ec       	ldi	r24, 0xC4	; 196
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	90 93 d8 01 	sts	0x01D8, r25
     97c:	80 93 d7 01 	sts	0x01D7, r24
  _ucsra = ucsra;
     980:	80 ec       	ldi	r24, 0xC0	; 192
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	90 93 da 01 	sts	0x01DA, r25
     988:	80 93 d9 01 	sts	0x01D9, r24
  _ucsrb = ucsrb;
     98c:	81 ec       	ldi	r24, 0xC1	; 193
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	90 93 dc 01 	sts	0x01DC, r25
     994:	80 93 db 01 	sts	0x01DB, r24
  _udr = udr;
     998:	86 ec       	ldi	r24, 0xC6	; 198
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	90 93 de 01 	sts	0x01DE, r25
     9a0:	80 93 dd 01 	sts	0x01DD, r24
  _rxen = rxen;
     9a4:	84 e0       	ldi	r24, 0x04	; 4
     9a6:	80 93 df 01 	sts	0x01DF, r24
  _txen = txen;
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	80 93 e0 01 	sts	0x01E0, r24
  _rxcie = rxcie;
     9b0:	87 e0       	ldi	r24, 0x07	; 7
     9b2:	80 93 e1 01 	sts	0x01E1, r24
  _udrie = udrie;
     9b6:	85 e0       	ldi	r24, 0x05	; 5
     9b8:	80 93 e2 01 	sts	0x01E2, r24
  _u2x = u2x;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 93 e3 01 	sts	0x01E3, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     9c2:	08 95       	ret

000009c4 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	7c 01       	movw	r14, r24
     9d6:	6b 01       	movw	r12, r22
     9d8:	8a 01       	movw	r16, r20
     9da:	c0 e0       	ldi	r28, 0x00	; 0
     9dc:	d0 e0       	ldi	r29, 0x00	; 0
     9de:	0f c0       	rjmp	.+30     	; 0x9fe <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
     9e0:	d6 01       	movw	r26, r12
     9e2:	6d 91       	ld	r22, X+
     9e4:	6d 01       	movw	r12, r26
     9e6:	d7 01       	movw	r26, r14
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	01 90       	ld	r0, Z+
     9ee:	f0 81       	ld	r31, Z
     9f0:	e0 2d       	mov	r30, r0
     9f2:	c7 01       	movw	r24, r14
     9f4:	09 95       	icall
     9f6:	c8 0f       	add	r28, r24
     9f8:	d9 1f       	adc	r29, r25
     9fa:	01 50       	subi	r16, 0x01	; 1
     9fc:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     9fe:	01 15       	cp	r16, r1
     a00:	11 05       	cpc	r17, r1
     a02:	71 f7       	brne	.-36     	; 0x9e0 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     a04:	ce 01       	movw	r24, r28
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	08 95       	ret

00000a18 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     a22:	dc 01       	movw	r26, r24
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	01 90       	ld	r0, Z+
     a2a:	f0 81       	ld	r31, Z
     a2c:	e0 2d       	mov	r30, r0
     a2e:	6d e0       	ldi	r22, 0x0D	; 13
     a30:	09 95       	icall
     a32:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     a34:	d8 01       	movw	r26, r16
     a36:	ed 91       	ld	r30, X+
     a38:	fc 91       	ld	r31, X
     a3a:	01 90       	ld	r0, Z+
     a3c:	f0 81       	ld	r31, Z
     a3e:	e0 2d       	mov	r30, r0
     a40:	c8 01       	movw	r24, r16
     a42:	6a e0       	ldi	r22, 0x0A	; 10
     a44:	09 95       	icall
     a46:	9c 01       	movw	r18, r24
     a48:	2e 0d       	add	r18, r14
     a4a:	3f 1d       	adc	r19, r15
     a4c:	c9 01       	movw	r24, r18
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	08 95       	ret

00000a58 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	db 01       	movw	r26, r22
     a5e:	0d 90       	ld	r0, X+
     a60:	00 20       	and	r0, r0
     a62:	e9 f7       	brne	.-6      	; 0xa5e <_ZN5Print5writeEPKc+0x6>
     a64:	11 97       	sbiw	r26, 0x01	; 1
     a66:	a6 1b       	sub	r26, r22
     a68:	b7 0b       	sbc	r27, r23
     a6a:	ec 01       	movw	r28, r24
     a6c:	e8 81       	ld	r30, Y
     a6e:	f9 81       	ldd	r31, Y+1	; 0x01
     a70:	02 80       	ldd	r0, Z+2	; 0x02
     a72:	f3 81       	ldd	r31, Z+3	; 0x03
     a74:	e0 2d       	mov	r30, r0
     a76:	ad 01       	movw	r20, r26
     a78:	09 95       	icall
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     a80:	4f 92       	push	r4
     a82:	5f 92       	push	r5
     a84:	7f 92       	push	r7
     a86:	8f 92       	push	r8
     a88:	9f 92       	push	r9
     a8a:	af 92       	push	r10
     a8c:	bf 92       	push	r11
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	df 93       	push	r29
     a9c:	cf 93       	push	r28
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	a1 97       	sbiw	r28, 0x21	; 33
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	2c 01       	movw	r4, r24
     ab0:	74 2e       	mov	r7, r20
     ab2:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     ab4:	22 30       	cpi	r18, 0x02	; 2
     ab6:	08 f4       	brcc	.+2      	; 0xaba <_ZN5Print11printNumberEmh+0x3a>
     ab8:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     aba:	19 a2       	std	Y+33, r1	; 0x21
     abc:	31 e2       	ldi	r19, 0x21	; 33
     abe:	c3 2e       	mov	r12, r19
     ac0:	d1 2c       	mov	r13, r1
     ac2:	cc 0e       	add	r12, r28
     ac4:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
     ac6:	82 2e       	mov	r8, r18
     ac8:	99 24       	eor	r9, r9
     aca:	aa 24       	eor	r10, r10
     acc:	bb 24       	eor	r11, r11
     ace:	67 2d       	mov	r22, r7
     ad0:	75 2f       	mov	r23, r21
     ad2:	a5 01       	movw	r20, r10
     ad4:	94 01       	movw	r18, r8
     ad6:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__udivmodsi4>
     ada:	79 01       	movw	r14, r18
     adc:	8a 01       	movw	r16, r20
    char c = m - base * n;
     ade:	c8 01       	movw	r24, r16
     ae0:	b7 01       	movw	r22, r14
     ae2:	a5 01       	movw	r20, r10
     ae4:	94 01       	movw	r18, r8
     ae6:	0e 94 b1 08 	call	0x1162	; 0x1162 <__mulsi3>
     aea:	47 2d       	mov	r20, r7
     aec:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     aee:	08 94       	sec
     af0:	c1 08       	sbc	r12, r1
     af2:	d1 08       	sbc	r13, r1
     af4:	4a 30       	cpi	r20, 0x0A	; 10
     af6:	14 f4       	brge	.+4      	; 0xafc <_ZN5Print11printNumberEmh+0x7c>
     af8:	40 5d       	subi	r20, 0xD0	; 208
     afa:	01 c0       	rjmp	.+2      	; 0xafe <_ZN5Print11printNumberEmh+0x7e>
     afc:	49 5c       	subi	r20, 0xC9	; 201
     afe:	f6 01       	movw	r30, r12
     b00:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     b02:	e1 14       	cp	r14, r1
     b04:	f1 04       	cpc	r15, r1
     b06:	01 05       	cpc	r16, r1
     b08:	11 05       	cpc	r17, r1
     b0a:	21 f0       	breq	.+8      	; 0xb14 <_ZN5Print11printNumberEmh+0x94>
     b0c:	7e 2c       	mov	r7, r14
     b0e:	5f 2d       	mov	r21, r15
     b10:	c8 01       	movw	r24, r16
     b12:	dd cf       	rjmp	.-70     	; 0xace <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
     b14:	c2 01       	movw	r24, r4
     b16:	b6 01       	movw	r22, r12
     b18:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN5Print5writeEPKc>
}
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	de bf       	out	0x3e, r29	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	cd bf       	out	0x3d, r28	; 61
     b28:	cf 91       	pop	r28
     b2a:	df 91       	pop	r29
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	7f 90       	pop	r7
     b42:	5f 90       	pop	r5
     b44:	4f 90       	pop	r4
     b46:	08 95       	ret

00000b48 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     b48:	cf 92       	push	r12
     b4a:	df 92       	push	r13
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	ec 01       	movw	r28, r24
     b5a:	6a 01       	movw	r12, r20
     b5c:	7b 01       	movw	r14, r22
{
  if (base == 0) {
     b5e:	21 15       	cp	r18, r1
     b60:	31 05       	cpc	r19, r1
     b62:	41 f4       	brne	.+16     	; 0xb74 <_ZN5Print5printEli+0x2c>
    return write(n);
     b64:	e8 81       	ld	r30, Y
     b66:	f9 81       	ldd	r31, Y+1	; 0x01
     b68:	01 90       	ld	r0, Z+
     b6a:	f0 81       	ld	r31, Z
     b6c:	e0 2d       	mov	r30, r0
     b6e:	64 2f       	mov	r22, r20
     b70:	09 95       	icall
     b72:	1f c0       	rjmp	.+62     	; 0xbb2 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
     b74:	2a 30       	cpi	r18, 0x0A	; 10
     b76:	31 05       	cpc	r19, r1
     b78:	d1 f4       	brne	.+52     	; 0xbae <_ZN5Print5printEli+0x66>
    if (n < 0) {
     b7a:	77 ff       	sbrs	r23, 7
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     b7e:	e8 81       	ld	r30, Y
     b80:	f9 81       	ldd	r31, Y+1	; 0x01
     b82:	01 90       	ld	r0, Z+
     b84:	f0 81       	ld	r31, Z
     b86:	e0 2d       	mov	r30, r0
     b88:	6d e2       	ldi	r22, 0x2D	; 45
     b8a:	09 95       	icall
     b8c:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
     b8e:	44 27       	eor	r20, r20
     b90:	55 27       	eor	r21, r21
     b92:	ba 01       	movw	r22, r20
     b94:	4c 19       	sub	r20, r12
     b96:	5d 09       	sbc	r21, r13
     b98:	6e 09       	sbc	r22, r14
     b9a:	7f 09       	sbc	r23, r15
     b9c:	ce 01       	movw	r24, r28
     b9e:	2a e0       	ldi	r18, 0x0A	; 10
     ba0:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN5Print11printNumberEmh>
     ba4:	98 01       	movw	r18, r16
     ba6:	28 0f       	add	r18, r24
     ba8:	39 1f       	adc	r19, r25
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
     bac:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     bae:	0e 94 40 05 	call	0xa80	; 0xa80 <_ZN5Print11printNumberEmh>
     bb2:	9c 01       	movw	r18, r24
  }
}
     bb4:	c9 01       	movw	r24, r18
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	08 95       	ret

00000bc8 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	7b 01       	movw	r14, r22
     bd2:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
     bd4:	00 27       	eor	r16, r16
     bd6:	f7 fc       	sbrc	r15, 7
     bd8:	00 95       	com	r16
     bda:	10 2f       	mov	r17, r16
     bdc:	b8 01       	movw	r22, r16
     bde:	a7 01       	movw	r20, r14
     be0:	0e 94 a4 05 	call	0xb48	; 0xb48 <_ZN5Print5printEli>
}
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
     bee:	0e 94 2c 05 	call	0xa58	; 0xa58 <_ZN5Print5writeEPKc>
}
     bf2:	08 95       	ret

00000bf4 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	5c 01       	movw	r10, r24
     c0a:	6b 01       	movw	r12, r22
     c0c:	ee 24       	eor	r14, r14
     c0e:	ff 24       	eor	r15, r15
     c10:	c0 e0       	ldi	r28, 0x00	; 0
     c12:	d0 e0       	ldi	r29, 0x00	; 0
     c14:	10 c0       	rjmp	.+32     	; 0xc36 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
     c16:	d5 01       	movw	r26, r10
     c18:	ed 91       	ld	r30, X+
     c1a:	fc 91       	ld	r31, X
     c1c:	00 81       	ld	r16, Z
     c1e:	11 81       	ldd	r17, Z+1	; 0x01
     c20:	c6 01       	movw	r24, r12
     c22:	be 01       	movw	r22, r28
     c24:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZNK6StringixEj>
     c28:	68 2f       	mov	r22, r24
     c2a:	c5 01       	movw	r24, r10
     c2c:	f8 01       	movw	r30, r16
     c2e:	09 95       	icall
     c30:	e8 0e       	add	r14, r24
     c32:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
     c34:	21 96       	adiw	r28, 0x01	; 1
     c36:	f6 01       	movw	r30, r12
     c38:	84 81       	ldd	r24, Z+4	; 0x04
     c3a:	95 81       	ldd	r25, Z+5	; 0x05
     c3c:	c8 17       	cp	r28, r24
     c3e:	d9 07       	cpc	r29, r25
     c40:	50 f3       	brcs	.-44     	; 0xc16 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
     c42:	c7 01       	movw	r24, r14
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	08 95       	ret

00000c5a <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
     c64:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print5printERK6String>
     c68:	8c 01       	movw	r16, r24
  n += println();
     c6a:	c7 01       	movw	r24, r14
     c6c:	0e 94 0c 05 	call	0xa18	; 0xa18 <_ZN5Print7printlnEv>
     c70:	9c 01       	movw	r18, r24
     c72:	20 0f       	add	r18, r16
     c74:	31 1f       	adc	r19, r17
  return n;
}
     c76:	c9 01       	movw	r24, r18
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
     c88:	0e 94 bb 07 	call	0xf76	; 0xf76 <millis>
     c8c:	68 87       	std	Y+8, r22	; 0x08
     c8e:	79 87       	std	Y+9, r23	; 0x09
     c90:	8a 87       	std	Y+10, r24	; 0x0a
     c92:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
     c94:	e8 81       	ld	r30, Y
     c96:	f9 81       	ldd	r31, Y+1	; 0x01
     c98:	06 80       	ldd	r0, Z+6	; 0x06
     c9a:	f7 81       	ldd	r31, Z+7	; 0x07
     c9c:	e0 2d       	mov	r30, r0
     c9e:	ce 01       	movw	r24, r28
     ca0:	09 95       	icall
     ca2:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
     ca4:	97 ff       	sbrs	r25, 7
     ca6:	15 c0       	rjmp	.+42     	; 0xcd2 <_ZN6Stream9timedReadEv+0x50>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
     ca8:	0e 94 bb 07 	call	0xf76	; 0xf76 <millis>
     cac:	28 85       	ldd	r18, Y+8	; 0x08
     cae:	39 85       	ldd	r19, Y+9	; 0x09
     cb0:	4a 85       	ldd	r20, Y+10	; 0x0a
     cb2:	5b 85       	ldd	r21, Y+11	; 0x0b
     cb4:	62 1b       	sub	r22, r18
     cb6:	73 0b       	sbc	r23, r19
     cb8:	84 0b       	sbc	r24, r20
     cba:	95 0b       	sbc	r25, r21
     cbc:	2c 81       	ldd	r18, Y+4	; 0x04
     cbe:	3d 81       	ldd	r19, Y+5	; 0x05
     cc0:	4e 81       	ldd	r20, Y+6	; 0x06
     cc2:	5f 81       	ldd	r21, Y+7	; 0x07
     cc4:	62 17       	cp	r22, r18
     cc6:	73 07       	cpc	r23, r19
     cc8:	84 07       	cpc	r24, r20
     cca:	95 07       	cpc	r25, r21
     ccc:	18 f3       	brcs	.-58     	; 0xc94 <_ZN6Stream9timedReadEv+0x12>
     cce:	2f ef       	ldi	r18, 0xFF	; 255
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
     cd2:	c9 01       	movw	r24, r18
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <_ZN6Stream10readStringEv>:
    index++;
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	18 2f       	mov	r17, r24
     ce4:	09 2f       	mov	r16, r25
     ce6:	eb 01       	movw	r28, r22
{
  String ret;
     ce8:	61 e2       	ldi	r22, 0x21	; 33
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN6StringC1EPKc>
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <_ZN6Stream10readStringEv+0x20>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     cf2:	81 2f       	mov	r24, r17
     cf4:	90 2f       	mov	r25, r16
     cf6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_ZN6String6concatEc>
  int c = timedRead();
  while (c >= 0)
  {
    ret += (char)c;
    c = timedRead();
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 41 06 	call	0xc82	; 0xc82 <_ZN6Stream9timedReadEv>
     d00:	bc 01       	movw	r22, r24

String Stream::readString()
{
  String ret;
  int c = timedRead();
  while (c >= 0)
     d02:	97 ff       	sbrs	r25, 7
     d04:	f6 cf       	rjmp	.-20     	; 0xcf2 <_ZN6Stream10readStringEv+0x18>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     d06:	81 2f       	mov	r24, r17
     d08:	90 2f       	mov	r25, r16
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	08 95       	ret

00000d14 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
     d14:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
     d16:	84 81       	ldd	r24, Z+4	; 0x04
     d18:	95 81       	ldd	r25, Z+5	; 0x05
     d1a:	68 17       	cp	r22, r24
     d1c:	79 07       	cpc	r23, r25
     d1e:	48 f4       	brcc	.+18     	; 0xd32 <_ZNK6StringixEj+0x1e>
     d20:	01 90       	ld	r0, Z+
     d22:	f0 81       	ld	r31, Z
     d24:	e0 2d       	mov	r30, r0
     d26:	30 97       	sbiw	r30, 0x00	; 0
     d28:	21 f0       	breq	.+8      	; 0xd32 <_ZNK6StringixEj+0x1e>
	return buffer[index];
     d2a:	e6 0f       	add	r30, r22
     d2c:	f7 1f       	adc	r31, r23
     d2e:	80 81       	ld	r24, Z
     d30:	08 95       	ret
     d32:	80 e0       	ldi	r24, 0x00	; 0
}
     d34:	08 95       	ret

00000d36 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	ec 01       	movw	r28, r24
     d40:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     d42:	6f 5f       	subi	r22, 0xFF	; 255
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	88 81       	ld	r24, Y
     d48:	99 81       	ldd	r25, Y+1	; 0x01
     d4a:	0e 94 8e 01 	call	0x31c	; 0x31c <realloc>
	if (newbuffer) {
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	11 f4       	brne	.+4      	; 0xd56 <_ZN6String12changeBufferEj+0x20>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <_ZN6String12changeBufferEj+0x2a>
		buffer = newbuffer;
     d56:	99 83       	std	Y+1, r25	; 0x01
     d58:	88 83       	st	Y, r24
		capacity = maxStrLen;
     d5a:	1b 83       	std	Y+3, r17	; 0x03
     d5c:	0a 83       	std	Y+2, r16	; 0x02
     d5e:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
     d70:	88 81       	ld	r24, Y
     d72:	99 81       	ldd	r25, Y+1	; 0x01
     d74:	89 2b       	or	r24, r25
     d76:	29 f0       	breq	.+10     	; 0xd82 <_ZN6String7reserveEj+0x18>
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	9b 81       	ldd	r25, Y+3	; 0x03
     d7c:	86 17       	cp	r24, r22
     d7e:	97 07       	cpc	r25, r23
     d80:	60 f4       	brcc	.+24     	; 0xd9a <_ZN6String7reserveEj+0x30>
	if (changeBuffer(size)) {
     d82:	ce 01       	movw	r24, r28
     d84:	0e 94 9b 06 	call	0xd36	; 0xd36 <_ZN6String12changeBufferEj>
     d88:	88 23       	and	r24, r24
     d8a:	41 f0       	breq	.+16     	; 0xd9c <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	89 2b       	or	r24, r25
     d92:	19 f4       	brne	.+6      	; 0xd9a <_ZN6String7reserveEj+0x30>
     d94:	e8 81       	ld	r30, Y
     d96:	f9 81       	ldd	r31, Y+1	; 0x01
     d98:	10 82       	st	Z, r1
     d9a:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	08 95       	ret

00000da2 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
     db0:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
     db2:	6c 81       	ldd	r22, Y+4	; 0x04
     db4:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
     db6:	e1 14       	cp	r14, r1
     db8:	f1 04       	cpc	r15, r1
     dba:	c1 f0       	breq	.+48     	; 0xdec <_ZN6String6concatEPKcj+0x4a>
	if (length == 0) return 1;
     dbc:	41 15       	cp	r20, r1
     dbe:	51 05       	cpc	r21, r1
     dc0:	99 f0       	breq	.+38     	; 0xde8 <_ZN6String6concatEPKcj+0x46>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
     dc2:	8a 01       	movw	r16, r20
     dc4:	06 0f       	add	r16, r22
     dc6:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
     dc8:	b8 01       	movw	r22, r16
     dca:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN6String7reserveEj>
     dce:	88 23       	and	r24, r24
     dd0:	69 f0       	breq	.+26     	; 0xdec <_ZN6String6concatEPKcj+0x4a>
	strcpy(buffer + len, cstr);
     dd2:	88 81       	ld	r24, Y
     dd4:	99 81       	ldd	r25, Y+1	; 0x01
     dd6:	2c 81       	ldd	r18, Y+4	; 0x04
     dd8:	3d 81       	ldd	r19, Y+5	; 0x05
     dda:	82 0f       	add	r24, r18
     ddc:	93 1f       	adc	r25, r19
     dde:	b7 01       	movw	r22, r14
     de0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <strcpy>
	len = newlen;
     de4:	1d 83       	std	Y+5, r17	; 0x05
     de6:	0c 83       	std	Y+4, r16	; 0x04
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	01 c0       	rjmp	.+2      	; 0xdee <_ZN6String6concatEPKcj+0x4c>
	return 1;
     dec:	80 e0       	ldi	r24, 0x00	; 0
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	00 d0       	rcall	.+0      	; 0xe02 <_ZN6String6concatEc+0x6>
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
     e06:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
     e08:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
     e0a:	be 01       	movw	r22, r28
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN6String6concatEPKcj>
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
     e28:	88 81       	ld	r24, Y
     e2a:	99 81       	ldd	r25, Y+1	; 0x01
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	11 f0       	breq	.+4      	; 0xe34 <_ZN6String10invalidateEv+0x12>
     e30:	0e 94 36 01 	call	0x26c	; 0x26c <free>
	buffer = NULL;
     e34:	19 82       	std	Y+1, r1	; 0x01
     e36:	18 82       	st	Y, r1
	capacity = len = 0;
     e38:	1d 82       	std	Y+5, r1	; 0x05
     e3a:	1c 82       	std	Y+4, r1	; 0x04
     e3c:	1b 82       	std	Y+3, r1	; 0x03
     e3e:	1a 82       	std	Y+2, r1	; 0x02
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	7b 01       	movw	r14, r22
     e56:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
     e58:	ba 01       	movw	r22, r20
     e5a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN6String7reserveEj>
     e5e:	88 23       	and	r24, r24
     e60:	21 f4       	brne	.+8      	; 0xe6a <_ZN6String4copyEPKcj+0x24>
		invalidate();
     e62:	ce 01       	movw	r24, r28
     e64:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN6String10invalidateEv>
     e68:	07 c0       	rjmp	.+14     	; 0xe78 <_ZN6String4copyEPKcj+0x32>
		return *this;
	}
	len = length;
     e6a:	1d 83       	std	Y+5, r17	; 0x05
     e6c:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
     e6e:	88 81       	ld	r24, Y
     e70:	99 81       	ldd	r25, Y+1	; 0x01
     e72:	b7 01       	movw	r22, r14
     e74:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <strcpy>
	return *this;
}
     e78:	ce 01       	movw	r24, r28
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	08 95       	ret

00000e88 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
     e8e:	19 82       	std	Y+1, r1	; 0x01
     e90:	18 82       	st	Y, r1
	capacity = 0;
     e92:	1b 82       	std	Y+3, r1	; 0x03
     e94:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
     e96:	1d 82       	std	Y+5, r1	; 0x05
     e98:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
     e9a:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
     e9c:	61 15       	cp	r22, r1
     e9e:	71 05       	cpc	r23, r1
     ea0:	51 f0       	breq	.+20     	; 0xeb6 <_ZN6StringC1EPKc+0x2e>
     ea2:	db 01       	movw	r26, r22
     ea4:	0d 90       	ld	r0, X+
     ea6:	00 20       	and	r0, r0
     ea8:	e9 f7       	brne	.-6      	; 0xea4 <_ZN6StringC1EPKc+0x1c>
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	a6 1b       	sub	r26, r22
     eae:	b7 0b       	sbc	r27, r23
     eb0:	ad 01       	movw	r20, r26
     eb2:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN6String4copyEPKcj>
}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
     ebc:	fc 01       	movw	r30, r24
{
	free(buffer);
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	0e 94 36 01 	call	0x26c	; 0x26c <free>
}
     ec6:	08 95       	ret

00000ec8 <main>:
#include <Arduino.h>

int main(void)
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
{
	init();
     ecc:	0e 94 22 08 	call	0x1044	; 0x1044 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ed0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ed4:	c9 e1       	ldi	r28, 0x19	; 25
     ed6:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     ed8:	0e 94 90 02 	call	0x520	; 0x520 <loop>
		if (serialEventRun) serialEventRun();
     edc:	20 97       	sbiw	r28, 0x00	; 0
     ede:	e1 f3       	breq	.-8      	; 0xed8 <main+0x10>
     ee0:	0e 94 19 03 	call	0x632	; 0x632 <_Z14serialEventRunv>
     ee4:	f9 cf       	rjmp	.-14     	; 0xed8 <main+0x10>

00000ee6 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     ee6:	1f 92       	push	r1
     ee8:	0f 92       	push	r0
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	0f 92       	push	r0
     eee:	11 24       	eor	r1, r1
     ef0:	2f 93       	push	r18
     ef2:	3f 93       	push	r19
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     efc:	80 91 e8 01 	lds	r24, 0x01E8
     f00:	90 91 e9 01 	lds	r25, 0x01E9
     f04:	a0 91 ea 01 	lds	r26, 0x01EA
     f08:	b0 91 eb 01 	lds	r27, 0x01EB
	unsigned char f = timer0_fract;
     f0c:	30 91 ec 01 	lds	r19, 0x01EC

	m += MILLIS_INC;
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	a1 1d       	adc	r26, r1
     f14:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     f16:	23 2f       	mov	r18, r19
     f18:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     f1a:	2d 37       	cpi	r18, 0x7D	; 125
     f1c:	20 f0       	brcs	.+8      	; 0xf26 <__vector_16+0x40>
		f -= FRACT_MAX;
     f1e:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	a1 1d       	adc	r26, r1
     f24:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     f26:	20 93 ec 01 	sts	0x01EC, r18
	timer0_millis = m;
     f2a:	80 93 e8 01 	sts	0x01E8, r24
     f2e:	90 93 e9 01 	sts	0x01E9, r25
     f32:	a0 93 ea 01 	sts	0x01EA, r26
     f36:	b0 93 eb 01 	sts	0x01EB, r27
	timer0_overflow_count++;
     f3a:	80 91 e4 01 	lds	r24, 0x01E4
     f3e:	90 91 e5 01 	lds	r25, 0x01E5
     f42:	a0 91 e6 01 	lds	r26, 0x01E6
     f46:	b0 91 e7 01 	lds	r27, 0x01E7
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	a1 1d       	adc	r26, r1
     f4e:	b1 1d       	adc	r27, r1
     f50:	80 93 e4 01 	sts	0x01E4, r24
     f54:	90 93 e5 01 	sts	0x01E5, r25
     f58:	a0 93 e6 01 	sts	0x01E6, r26
     f5c:	b0 93 e7 01 	sts	0x01E7, r27
}
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     f76:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     f78:	f8 94       	cli
	m = timer0_millis;
     f7a:	20 91 e8 01 	lds	r18, 0x01E8
     f7e:	30 91 e9 01 	lds	r19, 0x01E9
     f82:	40 91 ea 01 	lds	r20, 0x01EA
     f86:	50 91 eb 01 	lds	r21, 0x01EB
	SREG = oldSREG;
     f8a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     f8c:	b9 01       	movw	r22, r18
     f8e:	ca 01       	movw	r24, r20
     f90:	08 95       	ret

00000f92 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
     f92:	9b 01       	movw	r18, r22
     f94:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     f96:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
     f98:	f8 94       	cli
	m = timer0_overflow_count;
     f9a:	80 91 e4 01 	lds	r24, 0x01E4
     f9e:	90 91 e5 01 	lds	r25, 0x01E5
     fa2:	a0 91 e6 01 	lds	r26, 0x01E6
     fa6:	b0 91 e7 01 	lds	r27, 0x01E7
#if defined(TCNT0)
	t = TCNT0;
     faa:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     fac:	a8 9b       	sbis	0x15, 0	; 21
     fae:	05 c0       	rjmp	.+10     	; 0xfba <delay+0x28>
     fb0:	6f 3f       	cpi	r22, 0xFF	; 255
     fb2:	19 f0       	breq	.+6      	; 0xfba <delay+0x28>
		m++;
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	a1 1d       	adc	r26, r1
     fb8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     fba:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
     fbc:	ba 2f       	mov	r27, r26
     fbe:	a9 2f       	mov	r26, r25
     fc0:	98 2f       	mov	r25, r24
     fc2:	88 27       	eor	r24, r24
     fc4:	86 0f       	add	r24, r22
     fc6:	91 1d       	adc	r25, r1
     fc8:	a1 1d       	adc	r26, r1
     fca:	b1 1d       	adc	r27, r1
     fcc:	62 e0       	ldi	r22, 0x02	; 2
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	aa 1f       	adc	r26, r26
     fd4:	bb 1f       	adc	r27, r27
     fd6:	6a 95       	dec	r22
     fd8:	d1 f7       	brne	.-12     	; 0xfce <delay+0x3c>
     fda:	bc 01       	movw	r22, r24
     fdc:	2d c0       	rjmp	.+90     	; 0x1038 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     fde:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
     fe0:	f8 94       	cli
	m = timer0_overflow_count;
     fe2:	80 91 e4 01 	lds	r24, 0x01E4
     fe6:	90 91 e5 01 	lds	r25, 0x01E5
     fea:	a0 91 e6 01 	lds	r26, 0x01E6
     fee:	b0 91 e7 01 	lds	r27, 0x01E7
#if defined(TCNT0)
	t = TCNT0;
     ff2:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     ff4:	a8 9b       	sbis	0x15, 0	; 21
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <delay+0x70>
     ff8:	ef 3f       	cpi	r30, 0xFF	; 255
     ffa:	19 f0       	breq	.+6      	; 0x1002 <delay+0x70>
		m++;
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	a1 1d       	adc	r26, r1
    1000:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1002:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    1004:	ba 2f       	mov	r27, r26
    1006:	a9 2f       	mov	r26, r25
    1008:	98 2f       	mov	r25, r24
    100a:	88 27       	eor	r24, r24
    100c:	8e 0f       	add	r24, r30
    100e:	91 1d       	adc	r25, r1
    1010:	a1 1d       	adc	r26, r1
    1012:	b1 1d       	adc	r27, r1
    1014:	e2 e0       	ldi	r30, 0x02	; 2
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	aa 1f       	adc	r26, r26
    101c:	bb 1f       	adc	r27, r27
    101e:	ea 95       	dec	r30
    1020:	d1 f7       	brne	.-12     	; 0x1016 <delay+0x84>
    1022:	86 1b       	sub	r24, r22
    1024:	97 0b       	sbc	r25, r23
    1026:	88 5e       	subi	r24, 0xE8	; 232
    1028:	93 40       	sbci	r25, 0x03	; 3
    102a:	c8 f2       	brcs	.-78     	; 0xfde <delay+0x4c>
			ms--;
    102c:	21 50       	subi	r18, 0x01	; 1
    102e:	30 40       	sbci	r19, 0x00	; 0
    1030:	40 40       	sbci	r20, 0x00	; 0
    1032:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    1034:	68 51       	subi	r22, 0x18	; 24
    1036:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1038:	21 15       	cp	r18, r1
    103a:	31 05       	cpc	r19, r1
    103c:	41 05       	cpc	r20, r1
    103e:	51 05       	cpc	r21, r1
    1040:	71 f6       	brne	.-100    	; 0xfde <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1042:	08 95       	ret

00001044 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1044:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1046:	84 b5       	in	r24, 0x24	; 36
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    104c:	84 b5       	in	r24, 0x24	; 36
    104e:	81 60       	ori	r24, 0x01	; 1
    1050:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1052:	85 b5       	in	r24, 0x25	; 37
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1058:	85 b5       	in	r24, 0x25	; 37
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    105e:	ee e6       	ldi	r30, 0x6E	; 110
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1068:	e1 e8       	ldi	r30, 0x81	; 129
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    106e:	80 81       	ld	r24, Z
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1074:	80 81       	ld	r24, Z
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    107a:	e0 e8       	ldi	r30, 0x80	; 128
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	81 60       	ori	r24, 0x01	; 1
    1082:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1084:	e1 eb       	ldi	r30, 0xB1	; 177
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	84 60       	ori	r24, 0x04	; 4
    108c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    108e:	e0 eb       	ldi	r30, 0xB0	; 176
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1098:	ea e7       	ldi	r30, 0x7A	; 122
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    10a2:	80 81       	ld	r24, Z
    10a4:	82 60       	ori	r24, 0x02	; 2
    10a6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    10a8:	80 81       	ld	r24, Z
    10aa:	81 60       	ori	r24, 0x01	; 1
    10ac:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10ae:	80 81       	ld	r24, Z
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10b4:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    10b8:	08 95       	ret

000010ba <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    10ba:	48 2f       	mov	r20, r24
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	ca 01       	movw	r24, r20
    10c0:	82 55       	subi	r24, 0x52	; 82
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	fc 01       	movw	r30, r24
    10c6:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    10c8:	ca 01       	movw	r24, r20
    10ca:	86 56       	subi	r24, 0x66	; 102
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	fc 01       	movw	r30, r24
    10d0:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    10d2:	4a 57       	subi	r20, 0x7A	; 122
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	fa 01       	movw	r30, r20
    10d8:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    10da:	33 23       	and	r19, r19
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <digitalWrite+0x26>
    10de:	40 c0       	rjmp	.+128    	; 0x1160 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    10e0:	22 23       	and	r18, r18
    10e2:	51 f1       	breq	.+84     	; 0x1138 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    10e4:	23 30       	cpi	r18, 0x03	; 3
    10e6:	71 f0       	breq	.+28     	; 0x1104 <digitalWrite+0x4a>
    10e8:	24 30       	cpi	r18, 0x04	; 4
    10ea:	28 f4       	brcc	.+10     	; 0x10f6 <digitalWrite+0x3c>
    10ec:	21 30       	cpi	r18, 0x01	; 1
    10ee:	a1 f0       	breq	.+40     	; 0x1118 <digitalWrite+0x5e>
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	11 f5       	brne	.+68     	; 0x1138 <digitalWrite+0x7e>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <digitalWrite+0x64>
    10f6:	26 30       	cpi	r18, 0x06	; 6
    10f8:	b1 f0       	breq	.+44     	; 0x1126 <digitalWrite+0x6c>
    10fa:	27 30       	cpi	r18, 0x07	; 7
    10fc:	c1 f0       	breq	.+48     	; 0x112e <digitalWrite+0x74>
    10fe:	24 30       	cpi	r18, 0x04	; 4
    1100:	d9 f4       	brne	.+54     	; 0x1138 <digitalWrite+0x7e>
    1102:	04 c0       	rjmp	.+8      	; 0x110c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1104:	80 91 80 00 	lds	r24, 0x0080
    1108:	8f 77       	andi	r24, 0x7F	; 127
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    110c:	80 91 80 00 	lds	r24, 0x0080
    1110:	8f 7d       	andi	r24, 0xDF	; 223
    1112:	80 93 80 00 	sts	0x0080, r24
    1116:	10 c0       	rjmp	.+32     	; 0x1138 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1118:	84 b5       	in	r24, 0x24	; 36
    111a:	8f 77       	andi	r24, 0x7F	; 127
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    111e:	84 b5       	in	r24, 0x24	; 36
    1120:	8f 7d       	andi	r24, 0xDF	; 223
    1122:	84 bd       	out	0x24, r24	; 36
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1126:	80 91 b0 00 	lds	r24, 0x00B0
    112a:	8f 77       	andi	r24, 0x7F	; 127
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    112e:	80 91 b0 00 	lds	r24, 0x00B0
    1132:	8f 7d       	andi	r24, 0xDF	; 223
    1134:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1138:	e3 2f       	mov	r30, r19
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 58       	subi	r30, 0x8E	; 142
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	a5 91       	lpm	r26, Z+
    1146:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    1148:	2f b7       	in	r18, 0x3f	; 63
	cli();
    114a:	f8 94       	cli

	if (val == LOW) {
    114c:	66 23       	and	r22, r22
    114e:	21 f4       	brne	.+8      	; 0x1158 <digitalWrite+0x9e>
		*out &= ~bit;
    1150:	8c 91       	ld	r24, X
    1152:	90 95       	com	r25
    1154:	89 23       	and	r24, r25
    1156:	02 c0       	rjmp	.+4      	; 0x115c <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1158:	8c 91       	ld	r24, X
    115a:	89 2b       	or	r24, r25
    115c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    115e:	2f bf       	out	0x3f, r18	; 63
    1160:	08 95       	ret

00001162 <__mulsi3>:
    1162:	62 9f       	mul	r22, r18
    1164:	d0 01       	movw	r26, r0
    1166:	73 9f       	mul	r23, r19
    1168:	f0 01       	movw	r30, r0
    116a:	82 9f       	mul	r24, r18
    116c:	e0 0d       	add	r30, r0
    116e:	f1 1d       	adc	r31, r1
    1170:	64 9f       	mul	r22, r20
    1172:	e0 0d       	add	r30, r0
    1174:	f1 1d       	adc	r31, r1
    1176:	92 9f       	mul	r25, r18
    1178:	f0 0d       	add	r31, r0
    117a:	83 9f       	mul	r24, r19
    117c:	f0 0d       	add	r31, r0
    117e:	74 9f       	mul	r23, r20
    1180:	f0 0d       	add	r31, r0
    1182:	65 9f       	mul	r22, r21
    1184:	f0 0d       	add	r31, r0
    1186:	99 27       	eor	r25, r25
    1188:	72 9f       	mul	r23, r18
    118a:	b0 0d       	add	r27, r0
    118c:	e1 1d       	adc	r30, r1
    118e:	f9 1f       	adc	r31, r25
    1190:	63 9f       	mul	r22, r19
    1192:	b0 0d       	add	r27, r0
    1194:	e1 1d       	adc	r30, r1
    1196:	f9 1f       	adc	r31, r25
    1198:	bd 01       	movw	r22, r26
    119a:	cf 01       	movw	r24, r30
    119c:	11 24       	eor	r1, r1
    119e:	08 95       	ret

000011a0 <__udivmodsi4>:
    11a0:	a1 e2       	ldi	r26, 0x21	; 33
    11a2:	1a 2e       	mov	r1, r26
    11a4:	aa 1b       	sub	r26, r26
    11a6:	bb 1b       	sub	r27, r27
    11a8:	fd 01       	movw	r30, r26
    11aa:	0d c0       	rjmp	.+26     	; 0x11c6 <__udivmodsi4_ep>

000011ac <__udivmodsi4_loop>:
    11ac:	aa 1f       	adc	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	ee 1f       	adc	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	a2 17       	cp	r26, r18
    11b6:	b3 07       	cpc	r27, r19
    11b8:	e4 07       	cpc	r30, r20
    11ba:	f5 07       	cpc	r31, r21
    11bc:	20 f0       	brcs	.+8      	; 0x11c6 <__udivmodsi4_ep>
    11be:	a2 1b       	sub	r26, r18
    11c0:	b3 0b       	sbc	r27, r19
    11c2:	e4 0b       	sbc	r30, r20
    11c4:	f5 0b       	sbc	r31, r21

000011c6 <__udivmodsi4_ep>:
    11c6:	66 1f       	adc	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	1a 94       	dec	r1
    11d0:	69 f7       	brne	.-38     	; 0x11ac <__udivmodsi4_loop>
    11d2:	60 95       	com	r22
    11d4:	70 95       	com	r23
    11d6:	80 95       	com	r24
    11d8:	90 95       	com	r25
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	bd 01       	movw	r22, r26
    11e0:	cf 01       	movw	r24, r30
    11e2:	08 95       	ret

000011e4 <__tablejump2__>:
    11e4:	ee 0f       	add	r30, r30
    11e6:	ff 1f       	adc	r31, r31

000011e8 <__tablejump__>:
    11e8:	05 90       	lpm	r0, Z+
    11ea:	f4 91       	lpm	r31, Z+
    11ec:	e0 2d       	mov	r30, r0
    11ee:	09 94       	ijmp

000011f0 <__prologue_saves__>:
    11f0:	2f 92       	push	r2
    11f2:	3f 92       	push	r3
    11f4:	4f 92       	push	r4
    11f6:	5f 92       	push	r5
    11f8:	6f 92       	push	r6
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	ca 1b       	sub	r28, r26
    121a:	db 0b       	sbc	r29, r27
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	09 94       	ijmp

00001228 <__epilogue_restores__>:
    1228:	2a 88       	ldd	r2, Y+18	; 0x12
    122a:	39 88       	ldd	r3, Y+17	; 0x11
    122c:	48 88       	ldd	r4, Y+16	; 0x10
    122e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1230:	6e 84       	ldd	r6, Y+14	; 0x0e
    1232:	7d 84       	ldd	r7, Y+13	; 0x0d
    1234:	8c 84       	ldd	r8, Y+12	; 0x0c
    1236:	9b 84       	ldd	r9, Y+11	; 0x0b
    1238:	aa 84       	ldd	r10, Y+10	; 0x0a
    123a:	b9 84       	ldd	r11, Y+9	; 0x09
    123c:	c8 84       	ldd	r12, Y+8	; 0x08
    123e:	df 80       	ldd	r13, Y+7	; 0x07
    1240:	ee 80       	ldd	r14, Y+6	; 0x06
    1242:	fd 80       	ldd	r15, Y+5	; 0x05
    1244:	0c 81       	ldd	r16, Y+4	; 0x04
    1246:	1b 81       	ldd	r17, Y+3	; 0x03
    1248:	aa 81       	ldd	r26, Y+2	; 0x02
    124a:	b9 81       	ldd	r27, Y+1	; 0x01
    124c:	ce 0f       	add	r28, r30
    124e:	d1 1d       	adc	r29, r1
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	ed 01       	movw	r28, r26
    125c:	08 95       	ret

0000125e <_exit>:
    125e:	f8 94       	cli

00001260 <__stop_program>:
    1260:	ff cf       	rjmp	.-2      	; 0x1260 <__stop_program>
