
CNC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800100  00005b42  00005bd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003e0  00800282  00800282  00005d58  2**0
                  ALLOC
  3 .debug_aranges 00000a60  00000000  00000000  00005d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000019ea  00000000  00000000  000067b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001787a  00000000  00000000  000081a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f4f  00000000  00000000  0001fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007123  00000000  00000000  0002296b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001320  00000000  00000000  00029a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004678  00000000  00000000  0002adb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007a21  00000000  00000000  0002f428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b18  00000000  00000000  00036e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

File::File(void) {
  _file = 0;
  _name[0] = 0;
  //Serial.print("Created empty file object");
}
       0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__ctors_end>

  //Serial.println("nothing");
  return File();
}

void File::rewindDirectory(void) {  
       4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
  return true;
}
       8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    name[j++] = dir.name[i];
  }
  name[j] = 0;
}
       c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
      10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
void disable_steppers() {
	//enable our steppers
	//digitalWrite(X_ENABLE_PIN, LOW);
	//digitalWrite(Y_ENABLE_PIN, LOW);
//	digitalWrite(Z_ENABLE_PIN, LOW);
}
      14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
      18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
      20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      40:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <__vector_16>
      44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      48:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <__vector_18>
      4c:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__vector_19>
      50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      54:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      58:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      5c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      60:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 7c       	andi	r19, 0xCF	; 207

000000b3 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
      b3:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

000000c3 <port_to_mode_PGM>:
      c3:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000cd <port_to_output_PGM>:
      cd:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000d7 <port_to_input_PGM>:
      d7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000e1 <digital_pin_to_port_PGM>:
      e1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      f1:	03 03 03 03                                         ....

000000f5 <digital_pin_to_bit_mask_PGM>:
      f5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     105:	04 08 10 20                                         ... 

00000109 <digital_pin_to_timer_PGM>:
     109:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     119:	00 00 00 00                                         ....

0000011d <pstr_inf>:
     11d:	49 4e 46                                            INF

00000120 <pstr_inity>:
     120:	49 4e 49 54 59                                      INITY

00000125 <pstr_nan>:
     125:	4e 41 4e                                            NAN

00000128 <pwr_m10>:
     128:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     138:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000140 <pwr_p10>:
     140:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     150:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000158 <__ctors_start>:
     158:	d1 04       	cpc	r13, r1
     15a:	e7 14       	cp	r14, r7
     15c:	fe 24       	eor	r15, r14

0000015e <__ctors_end>:
     15e:	11 24       	eor	r1, r1
     160:	1f be       	out	0x3f, r1	; 63
     162:	cf ef       	ldi	r28, 0xFF	; 255
     164:	d8 e0       	ldi	r29, 0x08	; 8
     166:	de bf       	out	0x3e, r29	; 62
     168:	cd bf       	out	0x3d, r28	; 61

0000016a <__do_copy_data>:
     16a:	12 e0       	ldi	r17, 0x02	; 2
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b1 e0       	ldi	r27, 0x01	; 1
     170:	e2 e4       	ldi	r30, 0x42	; 66
     172:	fb e5       	ldi	r31, 0x5B	; 91
     174:	02 c0       	rjmp	.+4      	; 0x17a <.do_copy_data_start>

00000176 <.do_copy_data_loop>:
     176:	05 90       	lpm	r0, Z+
     178:	0d 92       	st	X+, r0

0000017a <.do_copy_data_start>:
     17a:	a2 38       	cpi	r26, 0x82	; 130
     17c:	b1 07       	cpc	r27, r17
     17e:	d9 f7       	brne	.-10     	; 0x176 <.do_copy_data_loop>

00000180 <__do_clear_bss>:
     180:	16 e0       	ldi	r17, 0x06	; 6
     182:	a2 e8       	ldi	r26, 0x82	; 130
     184:	b2 e0       	ldi	r27, 0x02	; 2
     186:	01 c0       	rjmp	.+2      	; 0x18a <.do_clear_bss_start>

00000188 <.do_clear_bss_loop>:
     188:	1d 92       	st	X+, r1

0000018a <.do_clear_bss_start>:
     18a:	a2 36       	cpi	r26, 0x62	; 98
     18c:	b1 07       	cpc	r27, r17
     18e:	e1 f7       	brne	.-8      	; 0x188 <.do_clear_bss_loop>

00000190 <__do_global_ctors>:
     190:	11 e0       	ldi	r17, 0x01	; 1
     192:	ce e5       	ldi	r28, 0x5E	; 94
     194:	d1 e0       	ldi	r29, 0x01	; 1
     196:	04 c0       	rjmp	.+8      	; 0x1a0 <.do_global_ctors_start>

00000198 <.do_global_ctors_loop>:
     198:	22 97       	sbiw	r28, 0x02	; 2
     19a:	fe 01       	movw	r30, r28
     19c:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <__tablejump__>

000001a0 <.do_global_ctors_start>:
     1a0:	c8 35       	cpi	r28, 0x58	; 88
     1a2:	d1 07       	cpc	r29, r17
     1a4:	c9 f7       	brne	.-14     	; 0x198 <.do_global_ctors_loop>
     1a6:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <main>
     1aa:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <_exit>

000001ae <__bad_interrupt>:
     1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <malloc>:
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	bc 01       	movw	r22, r24
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	91 05       	cpc	r25, r1
     1bc:	10 f4       	brcc	.+4      	; 0x1c2 <malloc+0x10>
     1be:	62 e0       	ldi	r22, 0x02	; 2
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	a0 91 5e 06 	lds	r26, 0x065E
     1c6:	b0 91 5f 06 	lds	r27, 0x065F
     1ca:	ed 01       	movw	r28, r26
     1cc:	e0 e0       	ldi	r30, 0x00	; 0
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	21 c0       	rjmp	.+66     	; 0x218 <malloc+0x66>
     1d6:	88 81       	ld	r24, Y
     1d8:	99 81       	ldd	r25, Y+1	; 0x01
     1da:	86 17       	cp	r24, r22
     1dc:	97 07       	cpc	r25, r23
     1de:	69 f4       	brne	.+26     	; 0x1fa <malloc+0x48>
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	9b 81       	ldd	r25, Y+3	; 0x03
     1e4:	30 97       	sbiw	r30, 0x00	; 0
     1e6:	19 f0       	breq	.+6      	; 0x1ee <malloc+0x3c>
     1e8:	93 83       	std	Z+3, r25	; 0x03
     1ea:	82 83       	std	Z+2, r24	; 0x02
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <malloc+0x44>
     1ee:	90 93 5f 06 	sts	0x065F, r25
     1f2:	80 93 5e 06 	sts	0x065E, r24
     1f6:	fe 01       	movw	r30, r28
     1f8:	34 c0       	rjmp	.+104    	; 0x262 <malloc+0xb0>
     1fa:	68 17       	cp	r22, r24
     1fc:	79 07       	cpc	r23, r25
     1fe:	38 f4       	brcc	.+14     	; 0x20e <malloc+0x5c>
     200:	41 15       	cp	r20, r1
     202:	51 05       	cpc	r21, r1
     204:	19 f0       	breq	.+6      	; 0x20c <malloc+0x5a>
     206:	84 17       	cp	r24, r20
     208:	95 07       	cpc	r25, r21
     20a:	08 f4       	brcc	.+2      	; 0x20e <malloc+0x5c>
     20c:	ac 01       	movw	r20, r24
     20e:	fe 01       	movw	r30, r28
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	9b 81       	ldd	r25, Y+3	; 0x03
     214:	9c 01       	movw	r18, r24
     216:	e9 01       	movw	r28, r18
     218:	20 97       	sbiw	r28, 0x00	; 0
     21a:	e9 f6       	brne	.-70     	; 0x1d6 <malloc+0x24>
     21c:	41 15       	cp	r20, r1
     21e:	51 05       	cpc	r21, r1
     220:	a9 f1       	breq	.+106    	; 0x28c <malloc+0xda>
     222:	ca 01       	movw	r24, r20
     224:	86 1b       	sub	r24, r22
     226:	97 0b       	sbc	r25, r23
     228:	04 97       	sbiw	r24, 0x04	; 4
     22a:	08 f4       	brcc	.+2      	; 0x22e <malloc+0x7c>
     22c:	ba 01       	movw	r22, r20
     22e:	e0 e0       	ldi	r30, 0x00	; 0
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	2a c0       	rjmp	.+84     	; 0x288 <malloc+0xd6>
     234:	8d 91       	ld	r24, X+
     236:	9c 91       	ld	r25, X
     238:	11 97       	sbiw	r26, 0x01	; 1
     23a:	84 17       	cp	r24, r20
     23c:	95 07       	cpc	r25, r21
     23e:	f9 f4       	brne	.+62     	; 0x27e <malloc+0xcc>
     240:	64 17       	cp	r22, r20
     242:	75 07       	cpc	r23, r21
     244:	81 f4       	brne	.+32     	; 0x266 <malloc+0xb4>
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	8d 91       	ld	r24, X+
     24a:	9c 91       	ld	r25, X
     24c:	13 97       	sbiw	r26, 0x03	; 3
     24e:	30 97       	sbiw	r30, 0x00	; 0
     250:	19 f0       	breq	.+6      	; 0x258 <malloc+0xa6>
     252:	93 83       	std	Z+3, r25	; 0x03
     254:	82 83       	std	Z+2, r24	; 0x02
     256:	04 c0       	rjmp	.+8      	; 0x260 <malloc+0xae>
     258:	90 93 5f 06 	sts	0x065F, r25
     25c:	80 93 5e 06 	sts	0x065E, r24
     260:	fd 01       	movw	r30, r26
     262:	32 96       	adiw	r30, 0x02	; 2
     264:	4c c0       	rjmp	.+152    	; 0x2fe <malloc+0x14c>
     266:	ca 01       	movw	r24, r20
     268:	86 1b       	sub	r24, r22
     26a:	97 0b       	sbc	r25, r23
     26c:	fd 01       	movw	r30, r26
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	61 93       	st	Z+, r22
     274:	71 93       	st	Z+, r23
     276:	02 97       	sbiw	r24, 0x02	; 2
     278:	8d 93       	st	X+, r24
     27a:	9c 93       	st	X, r25
     27c:	40 c0       	rjmp	.+128    	; 0x2fe <malloc+0x14c>
     27e:	fd 01       	movw	r30, r26
     280:	82 81       	ldd	r24, Z+2	; 0x02
     282:	93 81       	ldd	r25, Z+3	; 0x03
     284:	9c 01       	movw	r18, r24
     286:	d9 01       	movw	r26, r18
     288:	10 97       	sbiw	r26, 0x00	; 0
     28a:	a1 f6       	brne	.-88     	; 0x234 <malloc+0x82>
     28c:	80 91 5c 06 	lds	r24, 0x065C
     290:	90 91 5d 06 	lds	r25, 0x065D
     294:	89 2b       	or	r24, r25
     296:	41 f4       	brne	.+16     	; 0x2a8 <malloc+0xf6>
     298:	80 91 46 02 	lds	r24, 0x0246
     29c:	90 91 47 02 	lds	r25, 0x0247
     2a0:	90 93 5d 06 	sts	0x065D, r25
     2a4:	80 93 5c 06 	sts	0x065C, r24
     2a8:	40 91 48 02 	lds	r20, 0x0248
     2ac:	50 91 49 02 	lds	r21, 0x0249
     2b0:	41 15       	cp	r20, r1
     2b2:	51 05       	cpc	r21, r1
     2b4:	41 f4       	brne	.+16     	; 0x2c6 <malloc+0x114>
     2b6:	4d b7       	in	r20, 0x3d	; 61
     2b8:	5e b7       	in	r21, 0x3e	; 62
     2ba:	80 91 44 02 	lds	r24, 0x0244
     2be:	90 91 45 02 	lds	r25, 0x0245
     2c2:	48 1b       	sub	r20, r24
     2c4:	59 0b       	sbc	r21, r25
     2c6:	20 91 5c 06 	lds	r18, 0x065C
     2ca:	30 91 5d 06 	lds	r19, 0x065D
     2ce:	ca 01       	movw	r24, r20
     2d0:	82 1b       	sub	r24, r18
     2d2:	93 0b       	sbc	r25, r19
     2d4:	86 17       	cp	r24, r22
     2d6:	97 07       	cpc	r25, r23
     2d8:	80 f0       	brcs	.+32     	; 0x2fa <malloc+0x148>
     2da:	ab 01       	movw	r20, r22
     2dc:	4e 5f       	subi	r20, 0xFE	; 254
     2de:	5f 4f       	sbci	r21, 0xFF	; 255
     2e0:	84 17       	cp	r24, r20
     2e2:	95 07       	cpc	r25, r21
     2e4:	50 f0       	brcs	.+20     	; 0x2fa <malloc+0x148>
     2e6:	42 0f       	add	r20, r18
     2e8:	53 1f       	adc	r21, r19
     2ea:	50 93 5d 06 	sts	0x065D, r21
     2ee:	40 93 5c 06 	sts	0x065C, r20
     2f2:	f9 01       	movw	r30, r18
     2f4:	61 93       	st	Z+, r22
     2f6:	71 93       	st	Z+, r23
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <malloc+0x14c>
     2fa:	e0 e0       	ldi	r30, 0x00	; 0
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	cf 01       	movw	r24, r30
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <free>:
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	09 f4       	brne	.+2      	; 0x310 <free+0xa>
     30e:	50 c0       	rjmp	.+160    	; 0x3b0 <free+0xaa>
     310:	ec 01       	movw	r28, r24
     312:	22 97       	sbiw	r28, 0x02	; 2
     314:	1b 82       	std	Y+3, r1	; 0x03
     316:	1a 82       	std	Y+2, r1	; 0x02
     318:	a0 91 5e 06 	lds	r26, 0x065E
     31c:	b0 91 5f 06 	lds	r27, 0x065F
     320:	10 97       	sbiw	r26, 0x00	; 0
     322:	09 f1       	breq	.+66     	; 0x366 <free+0x60>
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	ac 17       	cp	r26, r28
     32a:	bd 07       	cpc	r27, r29
     32c:	08 f1       	brcs	.+66     	; 0x370 <free+0x6a>
     32e:	bb 83       	std	Y+3, r27	; 0x03
     330:	aa 83       	std	Y+2, r26	; 0x02
     332:	fe 01       	movw	r30, r28
     334:	21 91       	ld	r18, Z+
     336:	31 91       	ld	r19, Z+
     338:	e2 0f       	add	r30, r18
     33a:	f3 1f       	adc	r31, r19
     33c:	ae 17       	cp	r26, r30
     33e:	bf 07       	cpc	r27, r31
     340:	79 f4       	brne	.+30     	; 0x360 <free+0x5a>
     342:	8d 91       	ld	r24, X+
     344:	9c 91       	ld	r25, X
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	28 0f       	add	r18, r24
     34a:	39 1f       	adc	r19, r25
     34c:	2e 5f       	subi	r18, 0xFE	; 254
     34e:	3f 4f       	sbci	r19, 0xFF	; 255
     350:	39 83       	std	Y+1, r19	; 0x01
     352:	28 83       	st	Y, r18
     354:	12 96       	adiw	r26, 0x02	; 2
     356:	8d 91       	ld	r24, X+
     358:	9c 91       	ld	r25, X
     35a:	13 97       	sbiw	r26, 0x03	; 3
     35c:	9b 83       	std	Y+3, r25	; 0x03
     35e:	8a 83       	std	Y+2, r24	; 0x02
     360:	41 15       	cp	r20, r1
     362:	51 05       	cpc	r21, r1
     364:	71 f4       	brne	.+28     	; 0x382 <free+0x7c>
     366:	d0 93 5f 06 	sts	0x065F, r29
     36a:	c0 93 5e 06 	sts	0x065E, r28
     36e:	20 c0       	rjmp	.+64     	; 0x3b0 <free+0xaa>
     370:	12 96       	adiw	r26, 0x02	; 2
     372:	8d 91       	ld	r24, X+
     374:	9c 91       	ld	r25, X
     376:	13 97       	sbiw	r26, 0x03	; 3
     378:	ad 01       	movw	r20, r26
     37a:	00 97       	sbiw	r24, 0x00	; 0
     37c:	11 f0       	breq	.+4      	; 0x382 <free+0x7c>
     37e:	dc 01       	movw	r26, r24
     380:	d3 cf       	rjmp	.-90     	; 0x328 <free+0x22>
     382:	fa 01       	movw	r30, r20
     384:	d3 83       	std	Z+3, r29	; 0x03
     386:	c2 83       	std	Z+2, r28	; 0x02
     388:	21 91       	ld	r18, Z+
     38a:	31 91       	ld	r19, Z+
     38c:	e2 0f       	add	r30, r18
     38e:	f3 1f       	adc	r31, r19
     390:	ce 17       	cp	r28, r30
     392:	df 07       	cpc	r29, r31
     394:	69 f4       	brne	.+26     	; 0x3b0 <free+0xaa>
     396:	88 81       	ld	r24, Y
     398:	99 81       	ldd	r25, Y+1	; 0x01
     39a:	28 0f       	add	r18, r24
     39c:	39 1f       	adc	r19, r25
     39e:	2e 5f       	subi	r18, 0xFE	; 254
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	fa 01       	movw	r30, r20
     3a4:	31 83       	std	Z+1, r19	; 0x01
     3a6:	20 83       	st	Z, r18
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	93 83       	std	Z+3, r25	; 0x03
     3ae:	82 83       	std	Z+2, r24	; 0x02
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <strtod>:
     3b6:	a0 e0       	ldi	r26, 0x00	; 0
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	e1 ee       	ldi	r30, 0xE1	; 225
     3bc:	f1 e0       	ldi	r31, 0x01	; 1
     3be:	0c 94 6e 2d 	jmp	0x5adc	; 0x5adc <__prologue_saves__+0xc>
     3c2:	ec 01       	movw	r28, r24
     3c4:	5b 01       	movw	r10, r22
     3c6:	61 15       	cp	r22, r1
     3c8:	71 05       	cpc	r23, r1
     3ca:	19 f0       	breq	.+6      	; 0x3d2 <strtod+0x1c>
     3cc:	fb 01       	movw	r30, r22
     3ce:	91 83       	std	Z+1, r25	; 0x01
     3d0:	80 83       	st	Z, r24
     3d2:	f9 90       	ld	r15, Y+
     3d4:	8f 2d       	mov	r24, r15
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <isspace>
     3dc:	89 2b       	or	r24, r25
     3de:	c9 f7       	brne	.-14     	; 0x3d2 <strtod+0x1c>
     3e0:	fd e2       	ldi	r31, 0x2D	; 45
     3e2:	ff 16       	cp	r15, r31
     3e4:	21 f4       	brne	.+8      	; 0x3ee <strtod+0x38>
     3e6:	f9 90       	ld	r15, Y+
     3e8:	ee 24       	eor	r14, r14
     3ea:	e3 94       	inc	r14
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <strtod+0x42>
     3ee:	2b e2       	ldi	r18, 0x2B	; 43
     3f0:	f2 16       	cp	r15, r18
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <strtod+0x40>
     3f4:	f9 90       	ld	r15, Y+
     3f6:	ee 24       	eor	r14, r14
     3f8:	8e 01       	movw	r16, r28
     3fa:	01 50       	subi	r16, 0x01	; 1
     3fc:	10 40       	sbci	r17, 0x00	; 0
     3fe:	c8 01       	movw	r24, r16
     400:	6d e1       	ldi	r22, 0x1D	; 29
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	43 e0       	ldi	r20, 0x03	; 3
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	0e 94 3b 03 	call	0x676	; 0x676 <strncasecmp_P>
     40c:	89 2b       	or	r24, r25
     40e:	01 f5       	brne	.+64     	; 0x450 <strtod+0x9a>
     410:	8e 01       	movw	r16, r28
     412:	0e 5f       	subi	r16, 0xFE	; 254
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	c8 01       	movw	r24, r16
     418:	60 e2       	ldi	r22, 0x20	; 32
     41a:	71 e0       	ldi	r23, 0x01	; 1
     41c:	45 e0       	ldi	r20, 0x05	; 5
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 3b 03 	call	0x676	; 0x676 <strncasecmp_P>
     424:	89 2b       	or	r24, r25
     426:	19 f4       	brne	.+6      	; 0x42e <strtod+0x78>
     428:	8e 01       	movw	r16, r28
     42a:	09 5f       	subi	r16, 0xF9	; 249
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	a1 14       	cp	r10, r1
     430:	b1 04       	cpc	r11, r1
     432:	19 f0       	breq	.+6      	; 0x43a <strtod+0x84>
     434:	f5 01       	movw	r30, r10
     436:	11 83       	std	Z+1, r17	; 0x01
     438:	00 83       	st	Z, r16
     43a:	e0 fc       	sbrc	r14, 0
     43c:	04 c0       	rjmp	.+8      	; 0x446 <strtod+0x90>
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	80 e8       	ldi	r24, 0x80	; 128
     444:	14 c0       	rjmp	.+40     	; 0x46e <strtod+0xb8>
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	80 e8       	ldi	r24, 0x80	; 128
     44c:	6f ef       	ldi	r22, 0xFF	; 255
     44e:	08 c1       	rjmp	.+528    	; 0x660 <strtod+0x2aa>
     450:	c8 01       	movw	r24, r16
     452:	65 e2       	ldi	r22, 0x25	; 37
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	43 e0       	ldi	r20, 0x03	; 3
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	0e 94 3b 03 	call	0x676	; 0x676 <strncasecmp_P>
     45e:	89 2b       	or	r24, r25
     460:	69 f4       	brne	.+26     	; 0x47c <strtod+0xc6>
     462:	a1 14       	cp	r10, r1
     464:	b1 04       	cpc	r11, r1
     466:	29 f4       	brne	.+10     	; 0x472 <strtod+0xbc>
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	80 ec       	ldi	r24, 0xC0	; 192
     46e:	6f e7       	ldi	r22, 0x7F	; 127
     470:	f7 c0       	rjmp	.+494    	; 0x660 <strtod+0x2aa>
     472:	22 96       	adiw	r28, 0x02	; 2
     474:	f5 01       	movw	r30, r10
     476:	d1 83       	std	Z+1, r29	; 0x01
     478:	c0 83       	st	Z, r28
     47a:	f6 cf       	rjmp	.-20     	; 0x468 <strtod+0xb2>
     47c:	88 24       	eor	r8, r8
     47e:	99 24       	eor	r9, r9
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	ef 2d       	mov	r30, r15
     48a:	e0 53       	subi	r30, 0x30	; 48
     48c:	ea 30       	cpi	r30, 0x0A	; 10
     48e:	a0 f5       	brcc	.+104    	; 0x4f8 <strtod+0x142>
     490:	f2 e0       	ldi	r31, 0x02	; 2
     492:	ef 2a       	or	r14, r31
     494:	8e 2d       	mov	r24, r14
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	9c 01       	movw	r18, r24
     49a:	28 70       	andi	r18, 0x08	; 8
     49c:	30 70       	andi	r19, 0x00	; 0
     49e:	e2 fe       	sbrs	r14, 2
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <strtod+0xf8>
     4a2:	23 2b       	or	r18, r19
     4a4:	79 f5       	brne	.+94     	; 0x504 <strtod+0x14e>
     4a6:	08 94       	sec
     4a8:	81 1c       	adc	r8, r1
     4aa:	91 1c       	adc	r9, r1
     4ac:	2b c0       	rjmp	.+86     	; 0x504 <strtod+0x14e>
     4ae:	23 2b       	or	r18, r19
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <strtod+0x102>
     4b2:	08 94       	sec
     4b4:	81 08       	sbc	r8, r1
     4b6:	91 08       	sbc	r9, r1
     4b8:	db 01       	movw	r26, r22
     4ba:	ca 01       	movw	r24, r20
     4bc:	12 e0       	ldi	r17, 0x02	; 2
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	aa 1f       	adc	r26, r26
     4c4:	bb 1f       	adc	r27, r27
     4c6:	1a 95       	dec	r17
     4c8:	d1 f7       	brne	.-12     	; 0x4be <strtod+0x108>
     4ca:	48 0f       	add	r20, r24
     4cc:	59 1f       	adc	r21, r25
     4ce:	6a 1f       	adc	r22, r26
     4d0:	7b 1f       	adc	r23, r27
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
     4d6:	66 1f       	adc	r22, r22
     4d8:	77 1f       	adc	r23, r23
     4da:	4e 0f       	add	r20, r30
     4dc:	51 1d       	adc	r21, r1
     4de:	61 1d       	adc	r22, r1
     4e0:	71 1d       	adc	r23, r1
     4e2:	48 39       	cpi	r20, 0x98	; 152
     4e4:	29 e9       	ldi	r18, 0x99	; 153
     4e6:	52 07       	cpc	r21, r18
     4e8:	29 e9       	ldi	r18, 0x99	; 153
     4ea:	62 07       	cpc	r22, r18
     4ec:	29 e1       	ldi	r18, 0x19	; 25
     4ee:	72 07       	cpc	r23, r18
     4f0:	48 f0       	brcs	.+18     	; 0x504 <strtod+0x14e>
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	e8 2a       	or	r14, r24
     4f6:	06 c0       	rjmp	.+12     	; 0x504 <strtod+0x14e>
     4f8:	ee 3f       	cpi	r30, 0xFE	; 254
     4fa:	31 f4       	brne	.+12     	; 0x508 <strtod+0x152>
     4fc:	e3 fc       	sbrc	r14, 3
     4fe:	39 c0       	rjmp	.+114    	; 0x572 <strtod+0x1bc>
     500:	98 e0       	ldi	r25, 0x08	; 8
     502:	e9 2a       	or	r14, r25
     504:	f9 90       	ld	r15, Y+
     506:	c0 cf       	rjmp	.-128    	; 0x488 <strtod+0xd2>
     508:	e5 33       	cpi	r30, 0x35	; 53
     50a:	11 f0       	breq	.+4      	; 0x510 <strtod+0x15a>
     50c:	e5 31       	cpi	r30, 0x15	; 21
     50e:	89 f5       	brne	.+98     	; 0x572 <strtod+0x1bc>
     510:	29 91       	ld	r18, Y+
     512:	2d 32       	cpi	r18, 0x2D	; 45
     514:	19 f4       	brne	.+6      	; 0x51c <strtod+0x166>
     516:	e0 e1       	ldi	r30, 0x10	; 16
     518:	ee 2a       	or	r14, r30
     51a:	05 c0       	rjmp	.+10     	; 0x526 <strtod+0x170>
     51c:	2b 32       	cpi	r18, 0x2B	; 43
     51e:	19 f0       	breq	.+6      	; 0x526 <strtod+0x170>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	03 c0       	rjmp	.+6      	; 0x52c <strtod+0x176>
     526:	29 91       	ld	r18, Y+
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	e2 2f       	mov	r30, r18
     52e:	e0 53       	subi	r30, 0x30	; 48
     530:	ea 30       	cpi	r30, 0x0A	; 10
     532:	18 f0       	brcs	.+6      	; 0x53a <strtod+0x184>
     534:	c8 1b       	sub	r28, r24
     536:	d9 0b       	sbc	r29, r25
     538:	1c c0       	rjmp	.+56     	; 0x572 <strtod+0x1bc>
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	fc e0       	ldi	r31, 0x0C	; 12
     540:	20 38       	cpi	r18, 0x80	; 128
     542:	3f 07       	cpc	r19, r31
     544:	5c f4       	brge	.+22     	; 0x55c <strtod+0x1a6>
     546:	c9 01       	movw	r24, r18
     548:	88 0f       	add	r24, r24
     54a:	99 1f       	adc	r25, r25
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	28 0f       	add	r18, r24
     552:	39 1f       	adc	r19, r25
     554:	22 0f       	add	r18, r18
     556:	33 1f       	adc	r19, r19
     558:	2e 0f       	add	r18, r30
     55a:	31 1d       	adc	r19, r1
     55c:	e9 91       	ld	r30, Y+
     55e:	e0 53       	subi	r30, 0x30	; 48
     560:	ea 30       	cpi	r30, 0x0A	; 10
     562:	68 f3       	brcs	.-38     	; 0x53e <strtod+0x188>
     564:	e4 fe       	sbrs	r14, 4
     566:	03 c0       	rjmp	.+6      	; 0x56e <strtod+0x1b8>
     568:	30 95       	com	r19
     56a:	21 95       	neg	r18
     56c:	3f 4f       	sbci	r19, 0xFF	; 255
     56e:	82 0e       	add	r8, r18
     570:	93 1e       	adc	r9, r19
     572:	ce 2c       	mov	r12, r14
     574:	dd 24       	eor	r13, r13
     576:	e1 fe       	sbrs	r14, 1
     578:	07 c0       	rjmp	.+14     	; 0x588 <strtod+0x1d2>
     57a:	a1 14       	cp	r10, r1
     57c:	b1 04       	cpc	r11, r1
     57e:	21 f0       	breq	.+8      	; 0x588 <strtod+0x1d2>
     580:	21 97       	sbiw	r28, 0x01	; 1
     582:	f5 01       	movw	r30, r10
     584:	d1 83       	std	Z+1, r29	; 0x01
     586:	c0 83       	st	Z, r28
     588:	cb 01       	movw	r24, r22
     58a:	ba 01       	movw	r22, r20
     58c:	0e 94 c3 2a 	call	0x5586	; 0x5586 <__floatunsisf>
     590:	7b 01       	movw	r14, r22
     592:	8c 01       	movw	r16, r24
     594:	f3 e0       	ldi	r31, 0x03	; 3
     596:	cf 22       	and	r12, r31
     598:	dd 24       	eor	r13, r13
     59a:	23 e0       	ldi	r18, 0x03	; 3
     59c:	c2 16       	cp	r12, r18
     59e:	d1 04       	cpc	r13, r1
     5a0:	21 f4       	brne	.+8      	; 0x5aa <strtod+0x1f4>
     5a2:	17 fb       	bst	r17, 7
     5a4:	10 95       	com	r17
     5a6:	17 f9       	bld	r17, 7
     5a8:	10 95       	com	r17
     5aa:	57 01       	movw	r10, r14
     5ac:	68 01       	movw	r12, r16
     5ae:	c8 01       	movw	r24, r16
     5b0:	b7 01       	movw	r22, r14
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	0e 94 23 2a 	call	0x5446	; 0x5446 <__cmpsf2>
     5be:	88 23       	and	r24, r24
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <strtod+0x20e>
     5c2:	4a c0       	rjmp	.+148    	; 0x658 <strtod+0x2a2>
     5c4:	97 fe       	sbrs	r9, 7
     5c6:	0d c0       	rjmp	.+26     	; 0x5e2 <strtod+0x22c>
     5c8:	2c e3       	ldi	r18, 0x3C	; 60
     5ca:	e2 2e       	mov	r14, r18
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	f2 2e       	mov	r15, r18
     5d0:	90 94       	com	r9
     5d2:	81 94       	neg	r8
     5d4:	91 08       	sbc	r9, r1
     5d6:	93 94       	inc	r9
     5d8:	c0 e2       	ldi	r28, 0x20	; 32
     5da:	d0 e0       	ldi	r29, 0x00	; 0
     5dc:	00 e0       	ldi	r16, 0x00	; 0
     5de:	10 e0       	ldi	r17, 0x00	; 0
     5e0:	12 c0       	rjmp	.+36     	; 0x606 <strtod+0x250>
     5e2:	94 e5       	ldi	r25, 0x54	; 84
     5e4:	e9 2e       	mov	r14, r25
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	f9 2e       	mov	r15, r25
     5ea:	f6 cf       	rjmp	.-20     	; 0x5d8 <strtod+0x222>
     5ec:	f7 01       	movw	r30, r14
     5ee:	25 91       	lpm	r18, Z+
     5f0:	35 91       	lpm	r19, Z+
     5f2:	45 91       	lpm	r20, Z+
     5f4:	54 91       	lpm	r21, Z+
     5f6:	c6 01       	movw	r24, r12
     5f8:	b5 01       	movw	r22, r10
     5fa:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
     5fe:	5b 01       	movw	r10, r22
     600:	6c 01       	movw	r12, r24
     602:	8c 1a       	sub	r8, r28
     604:	9d 0a       	sbc	r9, r29
     606:	8c 16       	cp	r8, r28
     608:	9d 06       	cpc	r9, r29
     60a:	84 f7       	brge	.-32     	; 0x5ec <strtod+0x236>
     60c:	d5 95       	asr	r29
     60e:	c7 95       	ror	r28
     610:	0f 5f       	subi	r16, 0xFF	; 255
     612:	1f 4f       	sbci	r17, 0xFF	; 255
     614:	06 30       	cpi	r16, 0x06	; 6
     616:	11 05       	cpc	r17, r1
     618:	29 f0       	breq	.+10     	; 0x624 <strtod+0x26e>
     61a:	8c ef       	ldi	r24, 0xFC	; 252
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	e8 0e       	add	r14, r24
     620:	f9 1e       	adc	r15, r25
     622:	f1 cf       	rjmp	.-30     	; 0x606 <strtod+0x250>
     624:	c5 01       	movw	r24, r10
     626:	d6 01       	movw	r26, r12
     628:	7c 01       	movw	r14, r24
     62a:	8d 01       	movw	r16, r26
     62c:	8c 2d       	mov	r24, r12
     62e:	88 0f       	add	r24, r24
     630:	8d 2d       	mov	r24, r13
     632:	88 1f       	adc	r24, r24
     634:	8f 3f       	cpi	r24, 0xFF	; 255
     636:	51 f0       	breq	.+20     	; 0x64c <strtod+0x296>
     638:	c6 01       	movw	r24, r12
     63a:	b5 01       	movw	r22, r10
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	0e 94 23 2a 	call	0x5446	; 0x5446 <__cmpsf2>
     648:	88 23       	and	r24, r24
     64a:	31 f4       	brne	.+12     	; 0x658 <strtod+0x2a2>
     64c:	82 e2       	ldi	r24, 0x22	; 34
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	90 93 61 06 	sts	0x0661, r25
     654:	80 93 60 06 	sts	0x0660, r24
     658:	7e 2d       	mov	r23, r14
     65a:	9f 2d       	mov	r25, r15
     65c:	80 2f       	mov	r24, r16
     65e:	61 2f       	mov	r22, r17
     660:	27 2f       	mov	r18, r23
     662:	39 2f       	mov	r19, r25
     664:	48 2f       	mov	r20, r24
     666:	56 2f       	mov	r21, r22
     668:	b9 01       	movw	r22, r18
     66a:	ca 01       	movw	r24, r20
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	ec e0       	ldi	r30, 0x0C	; 12
     672:	0c 94 8a 2d 	jmp	0x5b14	; 0x5b14 <__epilogue_restores__+0xc>

00000676 <strncasecmp_P>:
     676:	fb 01       	movw	r30, r22
     678:	dc 01       	movw	r26, r24
     67a:	41 50       	subi	r20, 0x01	; 1
     67c:	50 40       	sbci	r21, 0x00	; 0
     67e:	88 f0       	brcs	.+34     	; 0x6a2 <strncasecmp_P+0x2c>
     680:	8d 91       	ld	r24, X+
     682:	81 34       	cpi	r24, 0x41	; 65
     684:	1c f0       	brlt	.+6      	; 0x68c <strncasecmp_P+0x16>
     686:	8b 35       	cpi	r24, 0x5B	; 91
     688:	0c f4       	brge	.+2      	; 0x68c <strncasecmp_P+0x16>
     68a:	80 5e       	subi	r24, 0xE0	; 224
     68c:	65 91       	lpm	r22, Z+
     68e:	61 34       	cpi	r22, 0x41	; 65
     690:	1c f0       	brlt	.+6      	; 0x698 <strncasecmp_P+0x22>
     692:	6b 35       	cpi	r22, 0x5B	; 91
     694:	0c f4       	brge	.+2      	; 0x698 <strncasecmp_P+0x22>
     696:	60 5e       	subi	r22, 0xE0	; 224
     698:	86 1b       	sub	r24, r22
     69a:	61 11       	cpse	r22, r1
     69c:	71 f3       	breq	.-36     	; 0x67a <strncasecmp_P+0x4>
     69e:	99 0b       	sbc	r25, r25
     6a0:	08 95       	ret
     6a2:	88 1b       	sub	r24, r24
     6a4:	fc cf       	rjmp	.-8      	; 0x69e <strncasecmp_P+0x28>

000006a6 <memcmp>:
     6a6:	fb 01       	movw	r30, r22
     6a8:	dc 01       	movw	r26, r24
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <memcmp+0xe>
     6ac:	8d 91       	ld	r24, X+
     6ae:	01 90       	ld	r0, Z+
     6b0:	80 19       	sub	r24, r0
     6b2:	21 f4       	brne	.+8      	; 0x6bc <memcmp+0x16>
     6b4:	41 50       	subi	r20, 0x01	; 1
     6b6:	50 40       	sbci	r21, 0x00	; 0
     6b8:	c8 f7       	brcc	.-14     	; 0x6ac <memcmp+0x6>
     6ba:	88 1b       	sub	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	08 95       	ret

000006c0 <strchr>:
     6c0:	fc 01       	movw	r30, r24
     6c2:	81 91       	ld	r24, Z+
     6c4:	86 17       	cp	r24, r22
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <strchr+0x10>
     6c8:	88 23       	and	r24, r24
     6ca:	d9 f7       	brne	.-10     	; 0x6c2 <strchr+0x2>
     6cc:	99 27       	eor	r25, r25
     6ce:	08 95       	ret
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	cf 01       	movw	r24, r30
     6d4:	08 95       	ret

000006d6 <strncpy>:
     6d6:	fb 01       	movw	r30, r22
     6d8:	dc 01       	movw	r26, r24
     6da:	41 50       	subi	r20, 0x01	; 1
     6dc:	50 40       	sbci	r21, 0x00	; 0
     6de:	48 f0       	brcs	.+18     	; 0x6f2 <strncpy+0x1c>
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	00 20       	and	r0, r0
     6e6:	c9 f7       	brne	.-14     	; 0x6da <strncpy+0x4>
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <strncpy+0x16>
     6ea:	1d 92       	st	X+, r1
     6ec:	41 50       	subi	r20, 0x01	; 1
     6ee:	50 40       	sbci	r21, 0x00	; 0
     6f0:	e0 f7       	brcc	.-8      	; 0x6ea <strncpy+0x14>
     6f2:	08 95       	ret

000006f4 <_ZN4FileC1Ev>:
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
     6f4:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6f6:	13 82       	std	Z+3, r1	; 0x03
     6f8:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     6fa:	88 ee       	ldi	r24, 0xE8	; 232
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	a0 e0       	ldi	r26, 0x00	; 0
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	84 83       	std	Z+4, r24	; 0x04
     704:	95 83       	std	Z+5, r25	; 0x05
     706:	a6 83       	std	Z+6, r26	; 0x06
     708:	b7 83       	std	Z+7, r27	; 0x07
     70a:	8d e5       	ldi	r24, 0x5D	; 93
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	91 83       	std	Z+1, r25	; 0x01
     710:	80 83       	st	Z, r24
  _file = 0;
     712:	12 8e       	std	Z+26, r1	; 0x1a
     714:	11 8e       	std	Z+25, r1	; 0x19
  _name[0] = 0;
     716:	14 86       	std	Z+12, r1	; 0x0c
  //Serial.print("Created empty file object");
}
     718:	08 95       	ret

0000071a <_ZN4FileD1Ev>:

File::~File(void) {
     71a:	fc 01       	movw	r30, r24
     71c:	8d e5       	ldi	r24, 0x5D	; 93
     71e:	92 e0       	ldi	r25, 0x02	; 2
     720:	91 83       	std	Z+1, r25	; 0x01
     722:	80 83       	st	Z, r24
  //  Serial.print("Deleted file object");
}
     724:	08 95       	ret

00000726 <_ZN4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
     726:	df 93       	push	r29
     728:	cf 93       	push	r28
     72a:	0f 92       	push	r0
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	fc 01       	movw	r30, r24
     732:	69 83       	std	Y+1, r22	; 0x01
  return write(&val, 1);
     734:	a0 81       	ld	r26, Z
     736:	b1 81       	ldd	r27, Z+1	; 0x01
     738:	12 96       	adiw	r26, 0x02	; 2
     73a:	2d 91       	ld	r18, X+
     73c:	3c 91       	ld	r19, X
     73e:	13 97       	sbiw	r26, 0x03	; 3
     740:	be 01       	movw	r22, r28
     742:	6f 5f       	subi	r22, 0xFF	; 255
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	f9 01       	movw	r30, r18
     74c:	09 95       	icall
}
     74e:	0f 90       	pop	r0
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <_ZN4File9availableEv>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
     756:	dc 01       	movw	r26, r24
     758:	59 96       	adiw	r26, 0x19	; 25
     75a:	ed 91       	ld	r30, X+
     75c:	fc 91       	ld	r31, X
     75e:	5a 97       	sbiw	r26, 0x1a	; 26
     760:	30 97       	sbiw	r30, 0x00	; 0
     762:	19 f4       	brne	.+6      	; 0x76a <_ZN4File9availableEv+0x14>
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	18 c0       	rjmp	.+48     	; 0x79a <_ZN4File9availableEv+0x44>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
     76a:	23 89       	ldd	r18, Z+19	; 0x13
     76c:	34 89       	ldd	r19, Z+20	; 0x14
     76e:	45 89       	ldd	r20, Z+21	; 0x15
     770:	56 89       	ldd	r21, Z+22	; 0x16
     772:	82 85       	ldd	r24, Z+10	; 0x0a
     774:	93 85       	ldd	r25, Z+11	; 0x0b
     776:	a4 85       	ldd	r26, Z+12	; 0x0c
     778:	b5 85       	ldd	r27, Z+13	; 0x0d
     77a:	28 1b       	sub	r18, r24
     77c:	39 0b       	sbc	r19, r25
     77e:	4a 0b       	sbc	r20, r26
     780:	5b 0b       	sbc	r21, r27
     782:	20 30       	cpi	r18, 0x00	; 0
     784:	b0 e8       	ldi	r27, 0x80	; 128
     786:	3b 07       	cpc	r19, r27
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	4b 07       	cpc	r20, r27
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	5b 07       	cpc	r21, r27
     790:	20 f0       	brcs	.+8      	; 0x79a <_ZN4File9availableEv+0x44>
     792:	2f ef       	ldi	r18, 0xFF	; 255
     794:	3f e7       	ldi	r19, 0x7F	; 127
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	50 e0       	ldi	r21, 0x00	; 0
}
     79a:	c9 01       	movw	r24, r18
     79c:	08 95       	ret

0000079e <_ZN4FilecvbEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
     79e:	dc 01       	movw	r26, r24
     7a0:	59 96       	adiw	r26, 0x19	; 25
     7a2:	ed 91       	ld	r30, X+
     7a4:	fc 91       	ld	r31, X
     7a6:	5a 97       	sbiw	r26, 0x1a	; 26
     7a8:	30 97       	sbiw	r30, 0x00	; 0
     7aa:	11 f4       	brne	.+4      	; 0x7b0 <_ZN4FilecvbEv+0x12>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	08 95       	ret
    return  _file->isOpen();
     7b0:	85 81       	ldd	r24, Z+5	; 0x05
     7b2:	81 11       	cpse	r24, r1
     7b4:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
     7b6:	08 95       	ret

000007b8 <_ZN4File5flushEv>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
     7b8:	fc 01       	movw	r30, r24
     7ba:	81 8d       	ldd	r24, Z+25	; 0x19
     7bc:	92 8d       	ldd	r25, Z+26	; 0x1a
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	11 f0       	breq	.+4      	; 0x7c6 <_ZN4File5flushEv+0xe>
    _file->sync();
     7c2:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN6SdFile4syncEv>
     7c6:	08 95       	ret

000007c8 <_ZN4File4readEv>:
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	0f 92       	push	r0
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
  if (_file) 
     7d2:	fc 01       	movw	r30, r24
     7d4:	81 8d       	ldd	r24, Z+25	; 0x19
     7d6:	92 8d       	ldd	r25, Z+26	; 0x1a
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	49 f0       	breq	.+18     	; 0x7ee <_ZN4File4readEv+0x26>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     7dc:	be 01       	movw	r22, r28
     7de:	6f 5f       	subi	r22, 0xFF	; 255
     7e0:	7f 4f       	sbci	r23, 0xFF	; 255
     7e2:	41 e0       	ldi	r20, 0x01	; 1
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN6SdFile4readEPvj>
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	19 f0       	breq	.+6      	; 0x7f4 <_ZN4File4readEv+0x2c>
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	3f ef       	ldi	r19, 0xFF	; 255
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <_ZN4File4readEv+0x32>
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
    return _file->read();
  return -1;
}
     7fa:	c9 01       	movw	r24, r18
     7fc:	0f 90       	pop	r0
     7fe:	cf 91       	pop	r28
     800:	df 91       	pop	r29
     802:	08 95       	ret

00000804 <_ZN4File4peekEv>:
    return 0;
  }
  return t;
}

int File::peek() {
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	0f 93       	push	r16
     80a:	1f 93       	push	r17
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	0f 92       	push	r0
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	7c 01       	movw	r14, r24
  if (! _file) 
     818:	dc 01       	movw	r26, r24
     81a:	59 96       	adiw	r26, 0x19	; 25
     81c:	8d 91       	ld	r24, X+
     81e:	9c 91       	ld	r25, X
     820:	5a 97       	sbiw	r26, 0x1a	; 26
     822:	00 97       	sbiw	r24, 0x00	; 0
     824:	19 f4       	brne	.+6      	; 0x82c <_ZN4File4peekEv+0x28>
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	1f c0       	rjmp	.+62     	; 0x86a <_ZN4File4peekEv+0x66>
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	41 e0       	ldi	r20, 0x01	; 1
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN6SdFile4readEPvj>
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	19 f0       	breq	.+6      	; 0x844 <_ZN4File4peekEv+0x40>
     83e:	0f ef       	ldi	r16, 0xFF	; 255
     840:	1f ef       	ldi	r17, 0xFF	; 255
     842:	13 c0       	rjmp	.+38     	; 0x86a <_ZN4File4peekEv+0x66>
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	08 2f       	mov	r16, r24
     848:	10 e0       	ldi	r17, 0x00	; 0
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
     84a:	d7 01       	movw	r26, r14
     84c:	59 96       	adiw	r26, 0x19	; 25
     84e:	ed 91       	ld	r30, X+
     850:	fc 91       	ld	r31, X
     852:	5a 97       	sbiw	r26, 0x1a	; 26
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
     854:	42 85       	ldd	r20, Z+10	; 0x0a
     856:	53 85       	ldd	r21, Z+11	; 0x0b
     858:	64 85       	ldd	r22, Z+12	; 0x0c
     85a:	75 85       	ldd	r23, Z+13	; 0x0d
     85c:	41 50       	subi	r20, 0x01	; 1
     85e:	50 40       	sbci	r21, 0x00	; 0
     860:	60 40       	sbci	r22, 0x00	; 0
     862:	70 40       	sbci	r23, 0x00	; 0
     864:	cf 01       	movw	r24, r30
     866:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN6SdFile7seekSetEm>
  return c;
}
     86a:	c8 01       	movw	r24, r16
     86c:	0f 90       	pop	r0
     86e:	cf 91       	pop	r28
     870:	df 91       	pop	r29
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	08 95       	ret

0000087c <_ZN4File5writeEPKhj>:

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	ec 01       	movw	r28, r24
  size_t t;
  if (!_file) {
     882:	e9 8d       	ldd	r30, Y+25	; 0x19
     884:	fa 8d       	ldd	r31, Y+26	; 0x1a
     886:	30 97       	sbiw	r30, 0x00	; 0
     888:	61 f0       	breq	.+24     	; 0x8a2 <_ZN4File5writeEPKhj+0x26>
    setWriteError();
    return 0;
     88a:	13 82       	std	Z+3, r1	; 0x03
     88c:	12 82       	std	Z+2, r1	; 0x02
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
     88e:	cf 01       	movw	r24, r30
     890:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <_ZN6SdFile5writeEPKvj>
     894:	9c 01       	movw	r18, r24
  if (_file->getWriteError()) {
     896:	e9 8d       	ldd	r30, Y+25	; 0x19
     898:	fa 8d       	ldd	r31, Y+26	; 0x1a
     89a:	82 81       	ldd	r24, Z+2	; 0x02
     89c:	93 81       	ldd	r25, Z+3	; 0x03
     89e:	89 2b       	or	r24, r25
     8a0:	31 f0       	breq	.+12     	; 0x8ae <_ZN4File5writeEPKhj+0x32>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	9b 83       	std	Y+3, r25	; 0x03
     8a8:	8a 83       	std	Y+2, r24	; 0x02
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
    setWriteError();
    return 0;
  }
  return t;
}
     8ae:	c9 01       	movw	r24, r18
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <_ZN4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
     8c4:	f6 2e       	mov	r15, r22
     8c6:	e7 2e       	mov	r14, r23
     8c8:	8a 01       	movw	r16, r20
  public:
    Print() : write_error(0) {}
     8ca:	1b 82       	std	Y+3, r1	; 0x03
     8cc:	1a 82       	std	Y+2, r1	; 0x02
     8ce:	88 ee       	ldi	r24, 0xE8	; 232
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	a0 e0       	ldi	r26, 0x00	; 0
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	8c 83       	std	Y+4, r24	; 0x04
     8d8:	9d 83       	std	Y+5, r25	; 0x05
     8da:	ae 83       	std	Y+6, r26	; 0x06
     8dc:	bf 83       	std	Y+7, r27	; 0x07
     8de:	8d e5       	ldi	r24, 0x5D	; 93
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	99 83       	std	Y+1, r25	; 0x01
     8e4:	88 83       	st	Y, r24
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
     8e6:	8d e1       	ldi	r24, 0x1D	; 29
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <malloc>
     8ee:	9a 8f       	std	Y+26, r25	; 0x1a
     8f0:	89 8f       	std	Y+25, r24	; 0x19
  if (_file) {
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	91 f0       	breq	.+36     	; 0x91a <__stack+0x1b>
    memcpy(_file, &f, sizeof(SdFile));
     8f6:	dc 01       	movw	r26, r24
     8f8:	8f 2d       	mov	r24, r15
     8fa:	9e 2d       	mov	r25, r14
     8fc:	9c 01       	movw	r18, r24
     8fe:	f9 01       	movw	r30, r18
     900:	8d e1       	ldi	r24, 0x1D	; 29
     902:	01 90       	ld	r0, Z+
     904:	0d 92       	st	X+, r0
     906:	81 50       	subi	r24, 0x01	; 1
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0x3>
    
    strncpy(_name, n, 12);
     90a:	ce 01       	movw	r24, r28
     90c:	0c 96       	adiw	r24, 0x0c	; 12
     90e:	b8 01       	movw	r22, r16
     910:	4c e0       	ldi	r20, 0x0C	; 12
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <strncpy>
    _name[12] = 0;
     918:	18 8e       	std	Y+24, r1	; 0x18
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	08 95       	ret

00000928 <_Z20getNextPathComponentPcPjS_>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(char *path, unsigned int *p_offset,
			  char *buffer) {
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	8c 01       	movw	r16, r24
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
     932:	fb 01       	movw	r30, r22
     934:	c0 81       	ld	r28, Z
     936:	d1 81       	ldd	r29, Z+1	; 0x01

  // Skip root or other separator
  if (path[offset] == '/') {
     938:	fc 01       	movw	r30, r24
     93a:	ec 0f       	add	r30, r28
     93c:	fd 1f       	adc	r31, r29
     93e:	80 81       	ld	r24, Z
     940:	8f 32       	cpi	r24, 0x2F	; 47
     942:	09 f4       	brne	.+2      	; 0x946 <_Z20getNextPathComponentPcPjS_+0x1e>
    offset++;
     944:	21 96       	adiw	r28, 0x01	; 1
     946:	98 01       	movw	r18, r16
     948:	2c 0f       	add	r18, r28
     94a:	3d 1f       	adc	r19, r29
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	0b c0       	rjmp	.+22     	; 0x968 <_Z20getNextPathComponentPcPjS_+0x40>
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
     952:	fa 01       	movw	r30, r20
     954:	ea 0f       	add	r30, r26
     956:	fb 1f       	adc	r31, r27
     958:	80 83       	st	Z, r24
     95a:	11 96       	adiw	r26, 0x01	; 1
     95c:	21 96       	adiw	r28, 0x01	; 1
     95e:	2f 5f       	subi	r18, 0xFF	; 255
     960:	3f 4f       	sbci	r19, 0xFF	; 255
  if (path[offset] == '/') {
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
     962:	ac 30       	cpi	r26, 0x0C	; 12
     964:	b1 05       	cpc	r27, r1
     966:	31 f0       	breq	.+12     	; 0x974 <_Z20getNextPathComponentPcPjS_+0x4c>
     968:	f9 01       	movw	r30, r18
     96a:	80 81       	ld	r24, Z
     96c:	8f 32       	cpi	r24, 0x2F	; 47
     96e:	11 f0       	breq	.+4      	; 0x974 <_Z20getNextPathComponentPcPjS_+0x4c>
     970:	88 23       	and	r24, r24
     972:	79 f7       	brne	.-34     	; 0x952 <_Z20getNextPathComponentPcPjS_+0x2a>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
     974:	a4 0f       	add	r26, r20
     976:	b5 1f       	adc	r27, r21
     978:	1c 92       	st	X, r1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
     97a:	f8 01       	movw	r30, r16
     97c:	ec 0f       	add	r30, r28
     97e:	fd 1f       	adc	r31, r29
     980:	80 81       	ld	r24, Z
     982:	8f 32       	cpi	r24, 0x2F	; 47
     984:	09 f4       	brne	.+2      	; 0x988 <_Z20getNextPathComponentPcPjS_+0x60>
    offset++;
     986:	21 96       	adiw	r28, 0x01	; 1
  }

  *p_offset = offset;
     988:	fb 01       	movw	r30, r22
     98a:	d1 83       	std	Z+1, r29	; 0x01
     98c:	c0 83       	st	Z, r28
     98e:	c0 0f       	add	r28, r16
     990:	d1 1f       	adc	r29, r17
     992:	88 81       	ld	r24, Y
     994:	81 11       	cpse	r24, r1
     996:	81 e0       	ldi	r24, 0x01	; 1

  return (path[offset] != '\0');
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	08 95       	ret

000009a2 <_GLOBAL__I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     9a2:	10 92 87 02 	sts	0x0287, r1
     9a6:	10 92 88 02 	sts	0x0288, r1
     9aa:	10 92 8b 02 	sts	0x028B, r1
     9ae:	10 92 8d 02 	sts	0x028D, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	80 93 8e 02 	sts	0x028E, r24
     9be:	90 93 8f 02 	sts	0x028F, r25
     9c2:	a0 93 90 02 	sts	0x0290, r26
     9c6:	b0 93 91 02 	sts	0x0291, r27
     9ca:	10 92 a5 02 	sts	0x02A5, r1
     9ce:	10 92 af 02 	sts	0x02AF, r1
     9d2:	10 92 ae 02 	sts	0x02AE, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     9d6:	8d e6       	ldi	r24, 0x6D	; 109
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	90 93 ad 02 	sts	0x02AD, r25
     9de:	80 93 ac 02 	sts	0x02AC, r24
     9e2:	10 92 b1 02 	sts	0x02B1, r1
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
     9e6:	08 95       	ret

000009e8 <_Z19callback_pathExistsR6SdFilePchPv>:
   a pointer to an arbitrary object used for context.

 */

boolean callback_pathExists(SdFile& parentDir, char *filePathComponent, 
			    boolean isLastComponent, void *object) {
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	1f 93       	push	r17
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	6d 97       	sbiw	r28, 0x1d	; 29
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	9c 01       	movw	r18, r24
     a04:	ab 01       	movw	r20, r22
     a06:	1c 82       	std	Y+4, r1	; 0x04
     a08:	1b 82       	std	Y+3, r1	; 0x03
     a0a:	8d e6       	ldi	r24, 0x6D	; 109
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	1e 82       	std	Y+6, r1	; 0x06
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
     a14:	7e 01       	movw	r14, r28
     a16:	08 94       	sec
     a18:	e1 1c       	adc	r14, r1
     a1a:	f1 1c       	adc	r15, r1
     a1c:	c7 01       	movw	r24, r14
     a1e:	b9 01       	movw	r22, r18
     a20:	21 e0       	ldi	r18, 0x01	; 1
     a22:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN6SdFile4openEPS_PKch>
     a26:	18 2f       	mov	r17, r24
  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
     a28:	88 23       	and	r24, r24
     a2a:	19 f0       	breq	.+6      	; 0xa32 <_Z19callback_pathExistsR6SdFilePchPv+0x4a>
     child.close(); 
     a2c:	c7 01       	movw	r24, r14
     a2e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile5closeEv>
  }
  
  return exists;
}
     a32:	81 2f       	mov	r24, r17
     a34:	6d 96       	adiw	r28, 0x1d	; 29
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	cf 91       	pop	r28
     a42:	df 91       	pop	r29
     a44:	1f 91       	pop	r17
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	08 95       	ret

00000a4c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>:
boolean walkPath(char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
     a4c:	2f 92       	push	r2
     a4e:	3f 92       	push	r3
     a50:	4f 92       	push	r4
     a52:	5f 92       	push	r5
     a54:	6f 92       	push	r6
     a56:	7f 92       	push	r7
     a58:	8f 92       	push	r8
     a5a:	9f 92       	push	r9
     a5c:	bf 92       	push	r11
     a5e:	cf 92       	push	r12
     a60:	df 92       	push	r13
     a62:	ef 92       	push	r14
     a64:	ff 92       	push	r15
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	df 93       	push	r29
     a6c:	cf 93       	push	r28
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	c9 54       	subi	r28, 0x49	; 73
     a74:	d0 40       	sbci	r29, 0x00	; 0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	1c 01       	movw	r2, r24
     a82:	7b 01       	movw	r14, r22
     a84:	2a 01       	movw	r4, r20
     a86:	39 01       	movw	r6, r18
     a88:	1b 8a       	std	Y+19, r1	; 0x13
     a8a:	1a 8a       	std	Y+18, r1	; 0x12
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     a8c:	8d e6       	ldi	r24, 0x6D	; 109
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	99 8b       	std	Y+17, r25	; 0x11
     a92:	88 8b       	std	Y+16, r24	; 0x10
     a94:	1d 8a       	std	Y+21, r1	; 0x15
     a96:	18 aa       	std	Y+48, r1	; 0x30
     a98:	1f a6       	std	Y+47, r1	; 0x2f
     a9a:	9e a7       	std	Y+46, r25	; 0x2e
     a9c:	8d a7       	std	Y+45, r24	; 0x2d
     a9e:	1a aa       	std	Y+50, r1	; 0x32
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
     aa0:	1a 82       	std	Y+2, r1	; 0x02
     aa2:	19 82       	std	Y+1, r1	; 0x01
     aa4:	8b 01       	movw	r16, r22
     aa6:	20 e1       	ldi	r18, 0x10	; 16
     aa8:	c2 2e       	mov	r12, r18
     aaa:	d1 2c       	mov	r13, r1
     aac:	cc 0e       	add	r12, r28
     aae:	dd 1e       	adc	r13, r29
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	89 2e       	mov	r8, r25
     ab4:	91 2c       	mov	r9, r1
     ab6:	8c 0e       	add	r8, r28
     ab8:	9d 1e       	adc	r9, r29
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x76>
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
     abc:	c8 01       	movw	r24, r16
     abe:	86 01       	movw	r16, r12
     ac0:	6c 01       	movw	r12, r24
  
  p_parent = &parentDir;

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
     ac2:	c1 01       	movw	r24, r2
     ac4:	be 01       	movw	r22, r28
     ac6:	6f 5f       	subi	r22, 0xFF	; 255
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	a4 01       	movw	r20, r8
     acc:	0e 94 94 04 	call	0x928	; 0x928 <_Z20getNextPathComponentPcPjS_>
     ad0:	b8 2e       	mov	r11, r24

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	88 23       	and	r24, r24
     ad6:	09 f4       	brne	.+2      	; 0xada <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x8e>
     ad8:	41 e0       	ldi	r20, 0x01	; 1
     ada:	c8 01       	movw	r24, r16
     adc:	b4 01       	movw	r22, r8
     ade:	93 01       	movw	r18, r6
     ae0:	f2 01       	movw	r30, r4
     ae2:	09 95       	icall

    if (!shouldContinue) {
     ae4:	88 23       	and	r24, r24
     ae6:	39 f4       	brne	.+14     	; 0xaf6 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xaa>
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
     ae8:	0e 15       	cp	r16, r14
     aea:	1f 05       	cpc	r17, r15
     aec:	19 f1       	breq	.+70     	; 0xb34 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe8>
        (*p_parent).close();
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile5closeEv>
     af4:	1f c0       	rjmp	.+62     	; 0xb34 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe8>
      }
      return false;
    }
    
    if (!moreComponents) {
     af6:	bb 20       	and	r11, r11
     af8:	a9 f0       	breq	.+42     	; 0xb24 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xd8>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
     afa:	c6 01       	movw	r24, r12
     afc:	b8 01       	movw	r22, r16
     afe:	a4 01       	movw	r20, r8
     b00:	21 e0       	ldi	r18, 0x01	; 1
     b02:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN6SdFile4openEPS_PKch>
     b06:	b8 2e       	mov	r11, r24
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
     b08:	0e 15       	cp	r16, r14
     b0a:	1f 05       	cpc	r17, r15
     b0c:	19 f0       	breq	.+6      	; 0xb14 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xc8>
      (*p_parent).close();
     b0e:	c8 01       	movw	r24, r16
     b10:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile5closeEv>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
     b14:	bb 20       	and	r11, r11
     b16:	71 f0       	breq	.+28     	; 0xb34 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe8>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
     b18:	0e 15       	cp	r16, r14
     b1a:	1f 05       	cpc	r17, r15
     b1c:	79 f6       	brne	.-98     	; 0xabc <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x70>
     b1e:	ce 01       	movw	r24, r28
     b20:	8d 96       	adiw	r24, 0x2d	; 45
     b22:	cd cf       	rjmp	.-102    	; 0xabe <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x72>
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
     b24:	0e 15       	cp	r16, r14
     b26:	1f 05       	cpc	r17, r15
     b28:	19 f0       	breq	.+6      	; 0xb30 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe4>
    (*p_parent).close(); // TODO: Return/ handle different?
     b2a:	c8 01       	movw	r24, r16
     b2c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile5closeEv>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xea>
     b34:	80 e0       	ldi	r24, 0x00	; 0
  }

  return true;
}
     b36:	c7 5b       	subi	r28, 0xB7	; 183
     b38:	df 4f       	sbci	r29, 0xFF	; 255
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	cf 91       	pop	r28
     b46:	df 91       	pop	r29
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	5f 90       	pop	r5
     b60:	4f 90       	pop	r4
     b62:	3f 90       	pop	r3
     b64:	2f 90       	pop	r2
     b66:	08 95       	ret

00000b68 <_ZN7SDClass6existsEPc>:
//   */
//  file.close();
//}


boolean SDClass::exists(char *filepath) {
     b68:	9b 01       	movw	r18, r22
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
     b6a:	bc 01       	movw	r22, r24
     b6c:	66 5d       	subi	r22, 0xD6	; 214
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	c9 01       	movw	r24, r18
     b72:	44 ef       	ldi	r20, 0xF4	; 244
     b74:	54 e0       	ldi	r21, 0x04	; 4
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	0e 94 26 05 	call	0xa4c	; 0xa4c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
}
     b7e:	08 95       	ret

00000b80 <_ZN7SDClass12getParentDirEPKcPi>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
     b80:	2f 92       	push	r2
     b82:	3f 92       	push	r3
     b84:	4f 92       	push	r4
     b86:	5f 92       	push	r5
     b88:	6f 92       	push	r6
     b8a:	7f 92       	push	r7
     b8c:	8f 92       	push	r8
     b8e:	9f 92       	push	r9
     b90:	af 92       	push	r10
     b92:	bf 92       	push	r11
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	c7 54       	subi	r28, 0x47	; 71
     baa:	d0 40       	sbci	r29, 0x00	; 0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	58 2e       	mov	r5, r24
     bb8:	49 2e       	mov	r4, r25
     bba:	fb 01       	movw	r30, r22
     bbc:	3a 01       	movw	r6, r20
     bbe:	19 01       	movw	r2, r18
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
     bc0:	84 a5       	ldd	r24, Z+44	; 0x2c
     bc2:	95 a5       	ldd	r25, Z+45	; 0x2d
     bc4:	99 8b       	std	Y+17, r25	; 0x11
     bc6:	88 8b       	std	Y+16, r24	; 0x10
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
     bc8:	2d e6       	ldi	r18, 0x6D	; 109
     bca:	32 e0       	ldi	r19, 0x02	; 2
     bcc:	3f 87       	std	Y+15, r19	; 0x0f
     bce:	2e 87       	std	Y+14, r18	; 0x0e
     bd0:	86 a5       	ldd	r24, Z+46	; 0x2e
     bd2:	8a 8b       	std	Y+18, r24	; 0x12
     bd4:	87 a5       	ldd	r24, Z+47	; 0x2f
     bd6:	8b 8b       	std	Y+19, r24	; 0x13
     bd8:	80 a9       	ldd	r24, Z+48	; 0x30
     bda:	91 a9       	ldd	r25, Z+49	; 0x31
     bdc:	a2 a9       	ldd	r26, Z+50	; 0x32
     bde:	b3 a9       	ldd	r27, Z+51	; 0x33
     be0:	8c 8b       	std	Y+20, r24	; 0x14
     be2:	9d 8b       	std	Y+21, r25	; 0x15
     be4:	ae 8b       	std	Y+22, r26	; 0x16
     be6:	bf 8b       	std	Y+23, r27	; 0x17
     be8:	84 a9       	ldd	r24, Z+52	; 0x34
     bea:	95 a9       	ldd	r25, Z+53	; 0x35
     bec:	a6 a9       	ldd	r26, Z+54	; 0x36
     bee:	b7 a9       	ldd	r27, Z+55	; 0x37
     bf0:	88 8f       	std	Y+24, r24	; 0x18
     bf2:	99 8f       	std	Y+25, r25	; 0x19
     bf4:	aa 8f       	std	Y+26, r26	; 0x1a
     bf6:	bb 8f       	std	Y+27, r27	; 0x1b
     bf8:	80 ad       	ldd	r24, Z+56	; 0x38
     bfa:	91 ad       	ldd	r25, Z+57	; 0x39
     bfc:	a2 ad       	ldd	r26, Z+58	; 0x3a
     bfe:	b3 ad       	ldd	r27, Z+59	; 0x3b
     c00:	8c 8f       	std	Y+28, r24	; 0x1c
     c02:	9d 8f       	std	Y+29, r25	; 0x1d
     c04:	ae 8f       	std	Y+30, r26	; 0x1e
     c06:	bf 8f       	std	Y+31, r27	; 0x1f
     c08:	84 ad       	ldd	r24, Z+60	; 0x3c
     c0a:	88 a3       	std	Y+32, r24	; 0x20
     c0c:	fd 96       	adiw	r30, 0x3d	; 61
     c0e:	81 91       	ld	r24, Z+
     c10:	91 91       	ld	r25, Z+
     c12:	a1 91       	ld	r26, Z+
     c14:	b1 91       	ld	r27, Z+
     c16:	89 a3       	std	Y+33, r24	; 0x21
     c18:	9a a3       	std	Y+34, r25	; 0x22
     c1a:	ab a3       	std	Y+35, r26	; 0x23
     c1c:	bc a3       	std	Y+36, r27	; 0x24
     c1e:	81 91       	ld	r24, Z+
     c20:	91 91       	ld	r25, Z+
     c22:	a1 91       	ld	r26, Z+
     c24:	b1 91       	ld	r27, Z+
     c26:	8d a3       	std	Y+37, r24	; 0x25
     c28:	9e a3       	std	Y+38, r25	; 0x26
     c2a:	af a3       	std	Y+39, r26	; 0x27
     c2c:	b8 a7       	std	Y+40, r27	; 0x28
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	9a a7       	std	Y+42, r25	; 0x2a
     c34:	89 a7       	std	Y+41, r24	; 0x29
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c36:	1e a6       	std	Y+46, r1	; 0x2e
     c38:	1d a6       	std	Y+45, r1	; 0x2d
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     c3a:	3c a7       	std	Y+44, r19	; 0x2c
     c3c:	2b a7       	std	Y+43, r18	; 0x2b
     c3e:	18 aa       	std	Y+48, r1	; 0x30
     c40:	7a 01       	movw	r14, r20
     c42:	8e 01       	movw	r16, r28
     c44:	02 5f       	subi	r16, 0xF2	; 242
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	3b e2       	ldi	r19, 0x2B	; 43
     c4a:	a3 2e       	mov	r10, r19
     c4c:	b1 2c       	mov	r11, r1
     c4e:	ac 0e       	add	r10, r28
     c50:	bd 1e       	adc	r11, r29
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
     c52:	4e 01       	movw	r8, r28
     c54:	08 94       	sec
     c56:	81 1c       	adc	r8, r1
     c58:	91 1c       	adc	r9, r1
     c5a:	35 c0       	rjmp	.+106    	; 0xcc6 <_ZN7SDClass12getParentDirEPKcPi+0x146>
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
     c5c:	d7 01       	movw	r26, r14
     c5e:	8c 91       	ld	r24, X
     c60:	8f 32       	cpi	r24, 0x2F	; 47
     c62:	21 f4       	brne	.+8      	; 0xc6c <_ZN7SDClass12getParentDirEPKcPi+0xec>
      filepath++;
     c64:	08 94       	sec
     c66:	e1 1c       	adc	r14, r1
     c68:	f1 1c       	adc	r15, r1
     c6a:	2d c0       	rjmp	.+90     	; 0xcc6 <_ZN7SDClass12getParentDirEPKcPi+0x146>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
     c6c:	42 2f       	mov	r20, r18
     c6e:	4e 19       	sub	r20, r14
     c70:	4d 30       	cpi	r20, 0x0D	; 13
     c72:	08 f0       	brcs	.+2      	; 0xc76 <_ZN7SDClass12getParentDirEPKcPi+0xf6>
     c74:	4c e0       	ldi	r20, 0x0C	; 12
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
     c76:	c4 2e       	mov	r12, r20
     c78:	dd 24       	eor	r13, r13
     c7a:	c4 01       	movw	r24, r8
     c7c:	b7 01       	movw	r22, r14
     c7e:	a6 01       	movw	r20, r12
     c80:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <strncpy>
    subdirname[idx] = 0;
     c84:	f4 01       	movw	r30, r8
     c86:	ec 0d       	add	r30, r12
     c88:	fd 1d       	adc	r31, r13
     c8a:	10 82       	st	Z, r1

    // close the subdir (we reuse them) if open
    subdir->close();
     c8c:	c5 01       	movw	r24, r10
     c8e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
     c92:	c5 01       	movw	r24, r10
     c94:	b8 01       	movw	r22, r16
     c96:	a4 01       	movw	r20, r8
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN6SdFile4openEPS_PKch>
     c9e:	88 23       	and	r24, r24
     ca0:	51 f4       	brne	.+20     	; 0xcb6 <_ZN7SDClass12getParentDirEPKcPi+0x136>
      // failed to open one of the subdirectories
      return SdFile();
     ca2:	e5 2d       	mov	r30, r5
     ca4:	f4 2d       	mov	r31, r4
     ca6:	13 82       	std	Z+3, r1	; 0x03
     ca8:	12 82       	std	Z+2, r1	; 0x02
     caa:	8d e6       	ldi	r24, 0x6D	; 109
     cac:	92 e0       	ldi	r25, 0x02	; 2
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
     cb2:	15 82       	std	Z+5, r1	; 0x05
     cb4:	66 c0       	rjmp	.+204    	; 0xd82 <_ZN7SDClass12getParentDirEPKcPi+0x202>
    }
    // move forward to the next subdirectory
    filepath += idx;
     cb6:	ec 0c       	add	r14, r12
     cb8:	fd 1c       	adc	r15, r13

    // we reuse the objects, close it.
    parent->close();
     cba:	c8 01       	movw	r24, r16
     cbc:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile5closeEv>
     cc0:	c5 01       	movw	r24, r10
     cc2:	58 01       	movw	r10, r16
     cc4:	8c 01       	movw	r16, r24
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
     cc6:	c7 01       	movw	r24, r14
     cc8:	6f e2       	ldi	r22, 0x2F	; 47
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <strchr>
     cd0:	9c 01       	movw	r18, r24
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	19 f6       	brne	.-122    	; 0xc5c <_ZN7SDClass12getParentDirEPKcPi+0xdc>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
     cd6:	e6 18       	sub	r14, r6
     cd8:	f7 08       	sbc	r15, r7
     cda:	f1 01       	movw	r30, r2
     cdc:	f1 82       	std	Z+1, r15	; 0x01
     cde:	e0 82       	st	Z, r14
  // parent is now the parent diretory of the file!
  return *parent;
     ce0:	e5 2d       	mov	r30, r5
     ce2:	f4 2d       	mov	r31, r4
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
     ce4:	d8 01       	movw	r26, r16
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	8d 91       	ld	r24, X+
     cea:	9c 91       	ld	r25, X
     cec:	13 97       	sbiw	r26, 0x03	; 3
     cee:	93 83       	std	Z+3, r25	; 0x03
     cf0:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
     cf2:	8d e6       	ldi	r24, 0x6D	; 109
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
     cfa:	14 96       	adiw	r26, 0x04	; 4
     cfc:	8c 91       	ld	r24, X
     cfe:	14 97       	sbiw	r26, 0x04	; 4
     d00:	84 83       	std	Z+4, r24	; 0x04
     d02:	15 96       	adiw	r26, 0x05	; 5
     d04:	8c 91       	ld	r24, X
     d06:	15 97       	sbiw	r26, 0x05	; 5
     d08:	85 83       	std	Z+5, r24	; 0x05
     d0a:	16 96       	adiw	r26, 0x06	; 6
     d0c:	2d 91       	ld	r18, X+
     d0e:	3d 91       	ld	r19, X+
     d10:	4d 91       	ld	r20, X+
     d12:	5c 91       	ld	r21, X
     d14:	19 97       	sbiw	r26, 0x09	; 9
     d16:	26 83       	std	Z+6, r18	; 0x06
     d18:	37 83       	std	Z+7, r19	; 0x07
     d1a:	40 87       	std	Z+8, r20	; 0x08
     d1c:	51 87       	std	Z+9, r21	; 0x09
     d1e:	1a 96       	adiw	r26, 0x0a	; 10
     d20:	2d 91       	ld	r18, X+
     d22:	3d 91       	ld	r19, X+
     d24:	4d 91       	ld	r20, X+
     d26:	5c 91       	ld	r21, X
     d28:	1d 97       	sbiw	r26, 0x0d	; 13
     d2a:	22 87       	std	Z+10, r18	; 0x0a
     d2c:	33 87       	std	Z+11, r19	; 0x0b
     d2e:	44 87       	std	Z+12, r20	; 0x0c
     d30:	55 87       	std	Z+13, r21	; 0x0d
     d32:	1e 96       	adiw	r26, 0x0e	; 14
     d34:	2d 91       	ld	r18, X+
     d36:	3d 91       	ld	r19, X+
     d38:	4d 91       	ld	r20, X+
     d3a:	5c 91       	ld	r21, X
     d3c:	51 97       	sbiw	r26, 0x11	; 17
     d3e:	26 87       	std	Z+14, r18	; 0x0e
     d40:	37 87       	std	Z+15, r19	; 0x0f
     d42:	40 8b       	std	Z+16, r20	; 0x10
     d44:	51 8b       	std	Z+17, r21	; 0x11
     d46:	52 96       	adiw	r26, 0x12	; 18
     d48:	8c 91       	ld	r24, X
     d4a:	52 97       	sbiw	r26, 0x12	; 18
     d4c:	82 8b       	std	Z+18, r24	; 0x12
     d4e:	53 96       	adiw	r26, 0x13	; 19
     d50:	2d 91       	ld	r18, X+
     d52:	3d 91       	ld	r19, X+
     d54:	4d 91       	ld	r20, X+
     d56:	5c 91       	ld	r21, X
     d58:	56 97       	sbiw	r26, 0x16	; 22
     d5a:	23 8b       	std	Z+19, r18	; 0x13
     d5c:	34 8b       	std	Z+20, r19	; 0x14
     d5e:	45 8b       	std	Z+21, r20	; 0x15
     d60:	56 8b       	std	Z+22, r21	; 0x16
     d62:	57 96       	adiw	r26, 0x17	; 23
     d64:	2d 91       	ld	r18, X+
     d66:	3d 91       	ld	r19, X+
     d68:	4d 91       	ld	r20, X+
     d6a:	5c 91       	ld	r21, X
     d6c:	5a 97       	sbiw	r26, 0x1a	; 26
     d6e:	27 8b       	std	Z+23, r18	; 0x17
     d70:	30 8f       	std	Z+24, r19	; 0x18
     d72:	41 8f       	std	Z+25, r20	; 0x19
     d74:	52 8f       	std	Z+26, r21	; 0x1a
     d76:	5b 96       	adiw	r26, 0x1b	; 27
     d78:	8d 91       	ld	r24, X+
     d7a:	9c 91       	ld	r25, X
     d7c:	5c 97       	sbiw	r26, 0x1c	; 28
     d7e:	94 8f       	std	Z+28, r25	; 0x1c
     d80:	83 8f       	std	Z+27, r24	; 0x1b
}
     d82:	85 2d       	mov	r24, r5
     d84:	94 2d       	mov	r25, r4
     d86:	c9 5b       	subi	r28, 0xB9	; 185
     d88:	df 4f       	sbci	r29, 0xFF	; 255
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	cf 91       	pop	r28
     d96:	df 91       	pop	r29
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	ff 90       	pop	r15
     d9e:	ef 90       	pop	r14
     da0:	df 90       	pop	r13
     da2:	cf 90       	pop	r12
     da4:	bf 90       	pop	r11
     da6:	af 90       	pop	r10
     da8:	9f 90       	pop	r9
     daa:	8f 90       	pop	r8
     dac:	7f 90       	pop	r7
     dae:	6f 90       	pop	r6
     db0:	5f 90       	pop	r5
     db2:	4f 90       	pop	r4
     db4:	3f 90       	pop	r3
     db6:	2f 90       	pop	r2
     db8:	08 95       	ret

00000dba <_ZN7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
     dba:	9f 92       	push	r9
     dbc:	af 92       	push	r10
     dbe:	bf 92       	push	r11
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	c6 57       	subi	r28, 0x76	; 118
     dd6:	d0 40       	sbci	r29, 0x00	; 0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	c8 2e       	mov	r12, r24
     de4:	99 2e       	mov	r9, r25
     de6:	8a 01       	movw	r16, r20
     de8:	d2 2e       	mov	r13, r18
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
     dea:	43 e0       	ldi	r20, 0x03	; 3
     dec:	a4 2e       	mov	r10, r20
     dee:	b1 2c       	mov	r11, r1
     df0:	ac 0e       	add	r10, r28
     df2:	bd 1e       	adc	r11, r29
     df4:	c5 01       	movw	r24, r10
     df6:	a8 01       	movw	r20, r16
     df8:	9e 01       	movw	r18, r28
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	0e 94 c0 05 	call	0xb80	; 0xb80 <_ZN7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
     e02:	e9 80       	ldd	r14, Y+1	; 0x01
     e04:	fa 80       	ldd	r15, Y+2	; 0x02
     e06:	e0 0e       	add	r14, r16
     e08:	f1 1e       	adc	r15, r17

  if (! filepath[0]) {
     e0a:	f7 01       	movw	r30, r14
     e0c:	80 81       	ld	r24, Z
     e0e:	4d e6       	ldi	r20, 0x6D	; 109
     e10:	52 e0       	ldi	r21, 0x02	; 2
     e12:	28 85       	ldd	r18, Y+8	; 0x08
     e14:	88 23       	and	r24, r24
     e16:	09 f0       	breq	.+2      	; 0xe1a <_ZN7SDClass4openEPKch+0x60>
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <_ZN7SDClass4openEPKch+0xde>
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	9b a3       	std	Y+35, r25	; 0x23
     e20:	8a a3       	std	Y+34, r24	; 0x22
     e22:	59 a3       	std	Y+33, r21	; 0x21
     e24:	48 a3       	std	Y+32, r20	; 0x20
     e26:	8f 81       	ldd	r24, Y+7	; 0x07
     e28:	8c a3       	std	Y+36, r24	; 0x24
     e2a:	2d a3       	std	Y+37, r18	; 0x25
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	ab 85       	ldd	r26, Y+11	; 0x0b
     e32:	bc 85       	ldd	r27, Y+12	; 0x0c
     e34:	8e a3       	std	Y+38, r24	; 0x26
     e36:	9f a3       	std	Y+39, r25	; 0x27
     e38:	a8 a7       	std	Y+40, r26	; 0x28
     e3a:	b9 a7       	std	Y+41, r27	; 0x29
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	af 85       	ldd	r26, Y+15	; 0x0f
     e42:	b8 89       	ldd	r27, Y+16	; 0x10
     e44:	8a a7       	std	Y+42, r24	; 0x2a
     e46:	9b a7       	std	Y+43, r25	; 0x2b
     e48:	ac a7       	std	Y+44, r26	; 0x2c
     e4a:	bd a7       	std	Y+45, r27	; 0x2d
     e4c:	89 89       	ldd	r24, Y+17	; 0x11
     e4e:	9a 89       	ldd	r25, Y+18	; 0x12
     e50:	ab 89       	ldd	r26, Y+19	; 0x13
     e52:	bc 89       	ldd	r27, Y+20	; 0x14
     e54:	8e a7       	std	Y+46, r24	; 0x2e
     e56:	9f a7       	std	Y+47, r25	; 0x2f
     e58:	a8 ab       	std	Y+48, r26	; 0x30
     e5a:	b9 ab       	std	Y+49, r27	; 0x31
     e5c:	8d 89       	ldd	r24, Y+21	; 0x15
     e5e:	8a ab       	std	Y+50, r24	; 0x32
     e60:	8e 89       	ldd	r24, Y+22	; 0x16
     e62:	9f 89       	ldd	r25, Y+23	; 0x17
     e64:	a8 8d       	ldd	r26, Y+24	; 0x18
     e66:	b9 8d       	ldd	r27, Y+25	; 0x19
     e68:	8b ab       	std	Y+51, r24	; 0x33
     e6a:	9c ab       	std	Y+52, r25	; 0x34
     e6c:	ad ab       	std	Y+53, r26	; 0x35
     e6e:	be ab       	std	Y+54, r27	; 0x36
     e70:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e72:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e74:	ac 8d       	ldd	r26, Y+28	; 0x1c
     e76:	bd 8d       	ldd	r27, Y+29	; 0x1d
     e78:	8f ab       	std	Y+55, r24	; 0x37
     e7a:	98 af       	std	Y+56, r25	; 0x38
     e7c:	a9 af       	std	Y+57, r26	; 0x39
     e7e:	ba af       	std	Y+58, r27	; 0x3a
     e80:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e82:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e84:	9c af       	std	Y+60, r25	; 0x3c
     e86:	8b af       	std	Y+59, r24	; 0x3b
    // it was the directory itself!
    return File(parentdir, "/");
     e88:	8c 2d       	mov	r24, r12
     e8a:	99 2d       	mov	r25, r9
     e8c:	be 01       	movw	r22, r28
     e8e:	60 5e       	subi	r22, 0xE0	; 224
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	51 e0       	ldi	r21, 0x01	; 1
     e96:	9f c0       	rjmp	.+318    	; 0xfd6 <_ZN7SDClass4openEPKch+0x21c>
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     e98:	fe 01       	movw	r30, r28
     e9a:	ff 96       	adiw	r30, 0x3f	; 63
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	10 82       	st	Z, r1
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     ea0:	5e af       	std	Y+62, r21	; 0x3e
     ea2:	4d af       	std	Y+61, r20	; 0x3d
     ea4:	fe 01       	movw	r30, r28
     ea6:	ee 5b       	subi	r30, 0xBE	; 190
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	10 82       	st	Z, r1

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
     eac:	22 23       	and	r18, r18
     eae:	a9 f0       	breq	.+42     	; 0xeda <_ZN7SDClass4openEPKch+0x120>
    return File();

  // there is a special case for the Root directory since its a static dir
  if (parentdir.isRoot()) {
     eb0:	22 50       	subi	r18, 0x02	; 2
     eb2:	ce 01       	movw	r24, r28
     eb4:	cd 96       	adiw	r24, 0x3d	; 61
     eb6:	22 30       	cpi	r18, 0x02	; 2
     eb8:	48 f4       	brcc	.+18     	; 0xecc <_ZN7SDClass4openEPKch+0x112>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
     eba:	6c ea       	ldi	r22, 0xAC	; 172
     ebc:	72 e0       	ldi	r23, 0x02	; 2
     ebe:	a7 01       	movw	r20, r14
     ec0:	2d 2d       	mov	r18, r13
     ec2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN6SdFile4openEPS_PKch>
    if ( ! file.open(SD.root, filepath, mode)) {
     ec6:	88 23       	and	r24, r24
     ec8:	81 f4       	brne	.+32     	; 0xeea <_ZN7SDClass4openEPKch+0x130>
     eca:	07 c0       	rjmp	.+14     	; 0xeda <_ZN7SDClass4openEPKch+0x120>
     ecc:	b5 01       	movw	r22, r10
     ece:	a7 01       	movw	r20, r14
     ed0:	2d 2d       	mov	r18, r13
     ed2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN6SdFile4openEPS_PKch>
      // failed to open the file :(
      return File();
    }
    // dont close the root!
  } else {
    if ( ! file.open(parentdir, filepath, mode)) {
     ed6:	88 23       	and	r24, r24
     ed8:	29 f4       	brne	.+10     	; 0xee4 <_ZN7SDClass4openEPKch+0x12a>
      return File();
     eda:	8c 2d       	mov	r24, r12
     edc:	99 2d       	mov	r25, r9
     ede:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <_ZN4FileC1Ev>
     ee2:	7b c0       	rjmp	.+246    	; 0xfda <_ZN7SDClass4openEPKch+0x220>
    }
    // close the parent
    parentdir.close();
     ee4:	c5 01       	movw	r24, r10
     ee6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile5closeEv>
  }

  if (mode & (O_APPEND | O_WRITE)) 
     eea:	f6 e0       	ldi	r31, 0x06	; 6
     eec:	df 22       	and	r13, r31
     eee:	59 f0       	breq	.+22     	; 0xf06 <_ZN7SDClass4openEPKch+0x14c>
    file.seekSet(file.fileSize());
     ef0:	fe 01       	movw	r30, r28
     ef2:	e0 5b       	subi	r30, 0xB0	; 176
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	40 81       	ld	r20, Z
     ef8:	51 81       	ldd	r21, Z+1	; 0x01
     efa:	62 81       	ldd	r22, Z+2	; 0x02
     efc:	73 81       	ldd	r23, Z+3	; 0x03
     efe:	ce 01       	movw	r24, r28
     f00:	cd 96       	adiw	r24, 0x3d	; 61
     f02:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN6SdFile7seekSetEm>
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
     f06:	9e 01       	movw	r18, r28
     f08:	26 5a       	subi	r18, 0xA6	; 166
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	fe 01       	movw	r30, r28
     f0e:	ff 96       	adiw	r30, 0x3f	; 63
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	f9 01       	movw	r30, r18
     f16:	93 83       	std	Z+3, r25	; 0x03
     f18:	82 83       	std	Z+2, r24	; 0x02
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
     f1a:	8d e6       	ldi	r24, 0x6D	; 109
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	80 83       	st	Z, r24
     f22:	fe 01       	movw	r30, r28
     f24:	ef 5b       	subi	r30, 0xBF	; 191
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	f9 01       	movw	r30, r18
     f2c:	84 83       	std	Z+4, r24	; 0x04
     f2e:	fe 01       	movw	r30, r28
     f30:	ee 5b       	subi	r30, 0xBE	; 190
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	80 81       	ld	r24, Z
     f36:	f9 01       	movw	r30, r18
     f38:	85 83       	std	Z+5, r24	; 0x05
     f3a:	fe 01       	movw	r30, r28
     f3c:	ed 5b       	subi	r30, 0xBD	; 189
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	a2 81       	ldd	r26, Z+2	; 0x02
     f46:	b3 81       	ldd	r27, Z+3	; 0x03
     f48:	f9 01       	movw	r30, r18
     f4a:	86 83       	std	Z+6, r24	; 0x06
     f4c:	97 83       	std	Z+7, r25	; 0x07
     f4e:	a0 87       	std	Z+8, r26	; 0x08
     f50:	b1 87       	std	Z+9, r27	; 0x09
     f52:	fe 01       	movw	r30, r28
     f54:	e9 5b       	subi	r30, 0xB9	; 185
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	80 81       	ld	r24, Z
     f5a:	91 81       	ldd	r25, Z+1	; 0x01
     f5c:	a2 81       	ldd	r26, Z+2	; 0x02
     f5e:	b3 81       	ldd	r27, Z+3	; 0x03
     f60:	f9 01       	movw	r30, r18
     f62:	82 87       	std	Z+10, r24	; 0x0a
     f64:	93 87       	std	Z+11, r25	; 0x0b
     f66:	a4 87       	std	Z+12, r26	; 0x0c
     f68:	b5 87       	std	Z+13, r27	; 0x0d
     f6a:	fe 01       	movw	r30, r28
     f6c:	e5 5b       	subi	r30, 0xB5	; 181
     f6e:	ff 4f       	sbci	r31, 0xFF	; 255
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	a2 81       	ldd	r26, Z+2	; 0x02
     f76:	b3 81       	ldd	r27, Z+3	; 0x03
     f78:	f9 01       	movw	r30, r18
     f7a:	86 87       	std	Z+14, r24	; 0x0e
     f7c:	97 87       	std	Z+15, r25	; 0x0f
     f7e:	a0 8b       	std	Z+16, r26	; 0x10
     f80:	b1 8b       	std	Z+17, r27	; 0x11
     f82:	fe 01       	movw	r30, r28
     f84:	e1 5b       	subi	r30, 0xB1	; 177
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	80 81       	ld	r24, Z
     f8a:	f9 01       	movw	r30, r18
     f8c:	82 8b       	std	Z+18, r24	; 0x12
     f8e:	fe 01       	movw	r30, r28
     f90:	e0 5b       	subi	r30, 0xB0	; 176
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
     f98:	a2 81       	ldd	r26, Z+2	; 0x02
     f9a:	b3 81       	ldd	r27, Z+3	; 0x03
     f9c:	f9 01       	movw	r30, r18
     f9e:	83 8b       	std	Z+19, r24	; 0x13
     fa0:	94 8b       	std	Z+20, r25	; 0x14
     fa2:	a5 8b       	std	Z+21, r26	; 0x15
     fa4:	b6 8b       	std	Z+22, r27	; 0x16
     fa6:	fe 01       	movw	r30, r28
     fa8:	ec 5a       	subi	r30, 0xAC	; 172
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	80 81       	ld	r24, Z
     fae:	91 81       	ldd	r25, Z+1	; 0x01
     fb0:	a2 81       	ldd	r26, Z+2	; 0x02
     fb2:	b3 81       	ldd	r27, Z+3	; 0x03
     fb4:	f9 01       	movw	r30, r18
     fb6:	87 8b       	std	Z+23, r24	; 0x17
     fb8:	90 8f       	std	Z+24, r25	; 0x18
     fba:	a1 8f       	std	Z+25, r26	; 0x19
     fbc:	b2 8f       	std	Z+26, r27	; 0x1a
     fbe:	fe 01       	movw	r30, r28
     fc0:	e8 5a       	subi	r30, 0xA8	; 168
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	f9 01       	movw	r30, r18
     fca:	94 8f       	std	Z+28, r25	; 0x1c
     fcc:	83 8f       	std	Z+27, r24	; 0x1b
  return File(file, filepath);
     fce:	8c 2d       	mov	r24, r12
     fd0:	99 2d       	mov	r25, r9
     fd2:	b9 01       	movw	r22, r18
     fd4:	a7 01       	movw	r20, r14
     fd6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN4FileC1E6SdFilePKc>
}
     fda:	8c 2d       	mov	r24, r12
     fdc:	99 2d       	mov	r25, r9
     fde:	ca 58       	subi	r28, 0x8A	; 138
     fe0:	df 4f       	sbci	r29, 0xFF	; 255
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	bf 90       	pop	r11
     ffe:	af 90       	pop	r10
    1000:	9f 90       	pop	r9
    1002:	08 95       	ret

00001004 <_ZN7Sd2Card11waitNotBusyEj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	8b 01       	movw	r16, r22
  uint16_t t0 = millis();
    1010:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <millis>
    1014:	eb 01       	movw	r28, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1016:	ff 24       	eor	r15, r15
    1018:	fa 94       	dec	r15
    101a:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
    101c:	0d b4       	in	r0, 0x2d	; 45
    101e:	07 fe       	sbrs	r0, 7
    1020:	fd cf       	rjmp	.-6      	; 0x101c <_ZN7Sd2Card11waitNotBusyEj+0x18>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    1022:	8e b5       	in	r24, 0x2e	; 46
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
    1024:	8f 3f       	cpi	r24, 0xFF	; 255
    1026:	11 f4       	brne	.+4      	; 0x102c <_ZN7Sd2Card11waitNotBusyEj+0x28>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	08 c0       	rjmp	.+16     	; 0x103c <_ZN7Sd2Card11waitNotBusyEj+0x38>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    102c:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <millis>
    1030:	6c 1b       	sub	r22, r28
    1032:	7d 0b       	sbc	r23, r29
    1034:	60 17       	cp	r22, r16
    1036:	71 07       	cpc	r23, r17
    1038:	80 f3       	brcs	.-32     	; 0x101a <_ZN7Sd2Card11waitNotBusyEj+0x16>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	08 95       	ret

00001048 <_ZN7Sd2Card13chipSelectLowEv>:
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
  digitalWrite(chipSelectPin_, LOW);
    1048:	fc 01       	movw	r30, r24
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	0e 94 a2 28 	call	0x5144	; 0x5144 <digitalWrite>
}
    1052:	08 95       	ret

00001054 <_ZN7Sd2Card14chipSelectHighEv>:
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    1054:	fc 01       	movw	r30, r24
    1056:	84 81       	ldd	r24, Z+4	; 0x04
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	0e 94 a2 28 	call	0x5144	; 0x5144 <digitalWrite>
}
    105e:	08 95       	ret

00001060 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    1060:	dc 01       	movw	r26, r24
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
    1062:	6e bd       	out	0x2e, r22	; 46
    1064:	fa 01       	movw	r30, r20
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    while (!(SPSR & (1 << SPIF)));
    106a:	0d b4       	in	r0, 0x2d	; 45
    106c:	07 fe       	sbrs	r0, 7
    106e:	fd cf       	rjmp	.-6      	; 0x106a <_ZN7Sd2Card9writeDataEhPKh+0xa>
    SPDR = src[i];
    1070:	80 81       	ld	r24, Z
    1072:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF)));
    1074:	0d b4       	in	r0, 0x2d	; 45
    1076:	07 fe       	sbrs	r0, 7
    1078:	fd cf       	rjmp	.-6      	; 0x1074 <_ZN7Sd2Card9writeDataEhPKh+0x14>
    SPDR = src[i+1];
    107a:	81 81       	ldd	r24, Z+1	; 0x01
    107c:	8e bd       	out	0x2e, r24	; 46

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    107e:	2e 5f       	subi	r18, 0xFE	; 254
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	32 96       	adiw	r30, 0x02	; 2
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	20 30       	cpi	r18, 0x00	; 0
    1088:	38 07       	cpc	r19, r24
    108a:	79 f7       	brne	.-34     	; 0x106a <_ZN7Sd2Card9writeDataEhPKh+0xa>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
    108c:	0d b4       	in	r0, 0x2d	; 45
    108e:	07 fe       	sbrs	r0, 7
    1090:	fd cf       	rjmp	.-6      	; 0x108c <_ZN7Sd2Card9writeDataEhPKh+0x2c>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    1096:	0d b4       	in	r0, 0x2d	; 45
    1098:	07 fe       	sbrs	r0, 7
    109a:	fd cf       	rjmp	.-6      	; 0x1096 <_ZN7Sd2Card9writeDataEhPKh+0x36>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    10a0:	0d b4       	in	r0, 0x2d	; 45
    10a2:	07 fe       	sbrs	r0, 7
    10a4:	fd cf       	rjmp	.-6      	; 0x10a0 <_ZN7Sd2Card9writeDataEhPKh+0x40>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    10aa:	0d b4       	in	r0, 0x2d	; 45
    10ac:	07 fe       	sbrs	r0, 7
    10ae:	fd cf       	rjmp	.-6      	; 0x10aa <_ZN7Sd2Card9writeDataEhPKh+0x4a>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    10b0:	8e b5       	in	r24, 0x2e	; 46
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    10b2:	1a 96       	adiw	r26, 0x0a	; 10
    10b4:	8c 93       	st	X, r24
    10b6:	1a 97       	sbiw	r26, 0x0a	; 10
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    10b8:	8f 71       	andi	r24, 0x1F	; 31
    10ba:	85 30       	cpi	r24, 0x05	; 5
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <_ZN7Sd2Card9writeDataEhPKh+0x62>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    10c2:	81 e1       	ldi	r24, 0x11	; 17
    10c4:	15 96       	adiw	r26, 0x05	; 5
    10c6:	8c 93       	st	X, r24
    10c8:	15 97       	sbiw	r26, 0x05	; 5
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    10ca:	cd 01       	movw	r24, r26
    10cc:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN7Sd2Card14chipSelectHighEv>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    return false;
  }
  return true;
}
    10d2:	08 95       	ret

000010d4 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
    10e0:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <millis>
    10e4:	8b 01       	movw	r16, r22
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    10e6:	ff 24       	eor	r15, r15
    10e8:	fa 94       	dec	r15
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <_ZN7Sd2Card14waitStartBlockEv+0x2a>
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    10ec:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <millis>
    10f0:	60 1b       	sub	r22, r16
    10f2:	71 0b       	sbc	r23, r17
    10f4:	6d 52       	subi	r22, 0x2D	; 45
    10f6:	71 40       	sbci	r23, 0x01	; 1
    10f8:	10 f0       	brcs	.+4      	; 0x10fe <_ZN7Sd2Card14waitStartBlockEv+0x2a>
    10fa:	8f e0       	ldi	r24, 0x0F	; 15
    10fc:	0d c0       	rjmp	.+26     	; 0x1118 <_ZN7Sd2Card14waitStartBlockEv+0x44>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    10fe:	fe bc       	out	0x2e, r15	; 46
  while (!(SPSR & (1 << SPIF)));
    1100:	0d b4       	in	r0, 0x2d	; 45
    1102:	07 fe       	sbrs	r0, 7
    1104:	fd cf       	rjmp	.-6      	; 0x1100 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    1106:	8e b5       	in	r24, 0x2e	; 46
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    1108:	8a 87       	std	Y+10, r24	; 0x0a
    110a:	8f 3f       	cpi	r24, 0xFF	; 255
    110c:	79 f3       	breq	.-34     	; 0x10ec <_ZN7Sd2Card14waitStartBlockEv+0x18>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    110e:	8e 3f       	cpi	r24, 0xFE	; 254
    1110:	11 f4       	brne	.+4      	; 0x1116 <_ZN7Sd2Card14waitStartBlockEv+0x42>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <_ZN7Sd2Card14waitStartBlockEv+0x4e>
    1116:	8d e0       	ldi	r24, 0x0D	; 13
    1118:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    111a:	ce 01       	movw	r24, r28
    111c:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN7Sd2Card14chipSelectHighEv>
    1120:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	08 95       	ret

0000112e <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
  if (inBlock_) {
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
    1136:	88 23       	and	r24, r24
    1138:	d1 f0       	breq	.+52     	; 0x116e <_ZN7Sd2Card7readEndEv+0x40>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	8e bd       	out	0x2e, r24	; 46
    113e:	2f 81       	ldd	r18, Y+7	; 0x07
    1140:	38 85       	ldd	r19, Y+8	; 0x08
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    1142:	4f ef       	ldi	r20, 0xFF	; 255
    1144:	04 c0       	rjmp	.+8      	; 0x114e <_ZN7Sd2Card7readEndEv+0x20>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
    1146:	0d b4       	in	r0, 0x2d	; 45
    1148:	07 fe       	sbrs	r0, 7
    114a:	fd cf       	rjmp	.-6      	; 0x1146 <_ZN7Sd2Card7readEndEv+0x18>
      SPDR = 0XFF;
    114c:	4e bd       	out	0x2e, r20	; 46
    114e:	2f 5f       	subi	r18, 0xFF	; 255
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
    1152:	c9 01       	movw	r24, r18
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	81 50       	subi	r24, 0x01	; 1
    1158:	92 40       	sbci	r25, 0x02	; 2
    115a:	a8 f3       	brcs	.-22     	; 0x1146 <_ZN7Sd2Card7readEndEv+0x18>
    115c:	38 87       	std	Y+8, r19	; 0x08
    115e:	2f 83       	std	Y+7, r18	; 0x07
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
    1160:	0d b4       	in	r0, 0x2d	; 45
    1162:	07 fe       	sbrs	r0, 7
    1164:	fd cf       	rjmp	.-6      	; 0x1160 <_ZN7Sd2Card7readEndEv+0x32>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    1166:	ce 01       	movw	r24, r28
    1168:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    116c:	1e 82       	std	Y+6, r1	; 0x06
  }
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	ec 01       	movw	r28, r24
    1184:	d6 2e       	mov	r13, r22
    1186:	79 01       	movw	r14, r18
    1188:	8a 01       	movw	r16, r20
  // end read if in partialBlockRead mode
  readEnd();
    118a:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    118e:	ce 01       	movw	r24, r28
    1190:	0e 94 24 08 	call	0x1048	; 0x1048 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    1194:	ce 01       	movw	r24, r28
    1196:	6c e2       	ldi	r22, 0x2C	; 44
    1198:	71 e0       	ldi	r23, 0x01	; 1
    119a:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    119e:	8d 2d       	mov	r24, r13
    11a0:	80 64       	ori	r24, 0x40	; 64
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    11a2:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    11a4:	0d b4       	in	r0, 0x2d	; 45
    11a6:	07 fe       	sbrs	r0, 7
    11a8:	fd cf       	rjmp	.-6      	; 0x11a4 <_ZN7Sd2Card11cardCommandEhm+0x30>
    11aa:	28 e1       	ldi	r18, 0x18	; 24
    11ac:	30 e0       	ldi	r19, 0x00	; 0

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    11ae:	d8 01       	movw	r26, r16
    11b0:	c7 01       	movw	r24, r14
    11b2:	02 2e       	mov	r0, r18
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <_ZN7Sd2Card11cardCommandEhm+0x4a>
    11b6:	b6 95       	lsr	r27
    11b8:	a7 95       	ror	r26
    11ba:	97 95       	ror	r25
    11bc:	87 95       	ror	r24
    11be:	0a 94       	dec	r0
    11c0:	d2 f7       	brpl	.-12     	; 0x11b6 <_ZN7Sd2Card11cardCommandEhm+0x42>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    11c2:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    11c4:	0d b4       	in	r0, 0x2d	; 45
    11c6:	07 fe       	sbrs	r0, 7
    11c8:	fd cf       	rjmp	.-6      	; 0x11c4 <_ZN7Sd2Card11cardCommandEhm+0x50>
    11ca:	28 50       	subi	r18, 0x08	; 8
    11cc:	30 40       	sbci	r19, 0x00	; 0

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	28 3f       	cpi	r18, 0xF8	; 248
    11d2:	38 07       	cpc	r19, r24
    11d4:	61 f7       	brne	.-40     	; 0x11ae <_ZN7Sd2Card11cardCommandEhm+0x3a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    11d6:	dd 20       	and	r13, r13
    11d8:	11 f4       	brne	.+4      	; 0x11de <_ZN7Sd2Card11cardCommandEhm+0x6a>
    11da:	85 e9       	ldi	r24, 0x95	; 149
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <_ZN7Sd2Card11cardCommandEhm+0x76>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    11de:	88 e0       	ldi	r24, 0x08	; 8
    11e0:	d8 16       	cp	r13, r24
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <_ZN7Sd2Card11cardCommandEhm+0x74>
    11e4:	87 e8       	ldi	r24, 0x87	; 135
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <_ZN7Sd2Card11cardCommandEhm+0x76>
    11e8:	8f ef       	ldi	r24, 0xFF	; 255
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    11ea:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    11ec:	0d b4       	in	r0, 0x2d	; 45
    11ee:	07 fe       	sbrs	r0, 7
    11f0:	fd cf       	rjmp	.-6      	; 0x11ec <_ZN7Sd2Card11cardCommandEhm+0x78>
    11f2:	90 e0       	ldi	r25, 0x00	; 0
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    11f4:	2f ef       	ldi	r18, 0xFF	; 255
    11f6:	2e bd       	out	0x2e, r18	; 46
  while (!(SPSR & (1 << SPIF)));
    11f8:	0d b4       	in	r0, 0x2d	; 45
    11fa:	07 fe       	sbrs	r0, 7
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <_ZN7Sd2Card11cardCommandEhm+0x84>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    11fe:	8e b5       	in	r24, 0x2e	; 46
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    1200:	87 ff       	sbrs	r24, 7
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <_ZN7Sd2Card11cardCommandEhm+0x94>
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	b9 f7       	brne	.-18     	; 0x11f6 <_ZN7Sd2Card11cardCommandEhm+0x82>
    1208:	8a 87       	std	Y+10, r24	; 0x0a
  return status_;
}
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	08 95       	ret

0000121a <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    121a:	cf 92       	push	r12
    121c:	df 92       	push	r13
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	ec 01       	movw	r28, r24
    122c:	7a 01       	movw	r14, r20
    122e:	8b 01       	movw	r16, r22
    1230:	69 01       	movw	r12, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    1232:	41 15       	cp	r20, r1
    1234:	51 05       	cpc	r21, r1
    1236:	61 05       	cpc	r22, r1
    1238:	71 05       	cpc	r23, r1
    123a:	11 f4       	brne	.+4      	; 0x1240 <_ZN7Sd2Card10writeBlockEmPKh+0x26>
    123c:	82 e1       	ldi	r24, 0x12	; 18
    123e:	37 c0       	rjmp	.+110    	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x94>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1240:	8b 85       	ldd	r24, Y+11	; 0x0b
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	39 f0       	breq	.+14     	; 0x1254 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    1246:	29 e0       	ldi	r18, 0x09	; 9
    1248:	ee 0c       	add	r14, r14
    124a:	ff 1c       	adc	r15, r15
    124c:	00 1f       	adc	r16, r16
    124e:	11 1f       	adc	r17, r17
    1250:	2a 95       	dec	r18
    1252:	d1 f7       	brne	.-12     	; 0x1248 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
  if (cardCommand(CMD24, blockNumber)) {
    1254:	ce 01       	movw	r24, r28
    1256:	68 e1       	ldi	r22, 0x18	; 24
    1258:	a8 01       	movw	r20, r16
    125a:	97 01       	movw	r18, r14
    125c:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Sd2Card11cardCommandEhm>
    1260:	88 23       	and	r24, r24
    1262:	11 f0       	breq	.+4      	; 0x1268 <_ZN7Sd2Card10writeBlockEmPKh+0x4e>
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	23 c0       	rjmp	.+70     	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x94>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    1268:	ce 01       	movw	r24, r28
    126a:	6e ef       	ldi	r22, 0xFE	; 254
    126c:	a6 01       	movw	r20, r12
    126e:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN7Sd2Card9writeDataEhPKh>
    1272:	88 23       	and	r24, r24
    1274:	e9 f0       	breq	.+58     	; 0x12b0 <_ZN7Sd2Card10writeBlockEmPKh+0x96>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    1276:	ce 01       	movw	r24, r28
    1278:	68 e5       	ldi	r22, 0x58	; 88
    127a:	72 e0       	ldi	r23, 0x02	; 2
    127c:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN7Sd2Card11waitNotBusyEj>
    1280:	88 23       	and	r24, r24
    1282:	11 f4       	brne	.+4      	; 0x1288 <_ZN7Sd2Card10writeBlockEmPKh+0x6e>
    1284:	85 e1       	ldi	r24, 0x15	; 21
    1286:	13 c0       	rjmp	.+38     	; 0x12ae <_ZN7Sd2Card10writeBlockEmPKh+0x94>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    1288:	ce 01       	movw	r24, r28
    128a:	6d e0       	ldi	r22, 0x0D	; 13
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e0       	ldi	r20, 0x00	; 0
    1292:	50 e0       	ldi	r21, 0x00	; 0
    1294:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Sd2Card11cardCommandEhm>
    1298:	88 23       	and	r24, r24
    129a:	41 f4       	brne	.+16     	; 0x12ac <_ZN7Sd2Card10writeBlockEmPKh+0x92>
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    12a0:	0d b4       	in	r0, 0x2d	; 45
    12a2:	07 fe       	sbrs	r0, 7
    12a4:	fd cf       	rjmp	.-6      	; 0x12a0 <_ZN7Sd2Card10writeBlockEmPKh+0x86>
}
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
  return SPDR;
    12a6:	8e b5       	in	r24, 0x2e	; 46
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    12a8:	88 23       	and	r24, r24
    12aa:	79 f0       	breq	.+30     	; 0x12ca <_ZN7Sd2Card10writeBlockEmPKh+0xb0>
    12ac:	84 e1       	ldi	r24, 0x14	; 20
    12ae:	8d 83       	std	Y+5, r24	; 0x05
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    12b0:	ce 01       	movw	r24, r28
    12b2:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN7Sd2Card14chipSelectHighEv>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	08 95       	ret
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    12ca:	ce 01       	movw	r24, r28
    12cc:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN7Sd2Card14chipSelectHighEv>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	f2 cf       	rjmp	.-28     	; 0x12b8 <_ZN7Sd2Card10writeBlockEmPKh+0x9e>

000012d4 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    12d4:	8f 92       	push	r8
    12d6:	9f 92       	push	r9
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
    12ee:	5a 01       	movw	r10, r20
    12f0:	6b 01       	movw	r12, r22
    12f2:	49 01       	movw	r8, r18
  uint16_t n;
  if (count == 0) return true;
    12f4:	01 15       	cp	r16, r1
    12f6:	11 05       	cpc	r17, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <_ZN7Sd2Card8readDataEmjjPh+0x28>
    12fa:	7b c0       	rjmp	.+246    	; 0x13f2 <_ZN7Sd2Card8readDataEmjjPh+0x11e>
  if ((count + offset) > 512) {
    12fc:	c8 01       	movw	r24, r16
    12fe:	82 0f       	add	r24, r18
    1300:	93 1f       	adc	r25, r19
    1302:	81 50       	subi	r24, 0x01	; 1
    1304:	92 40       	sbci	r25, 0x02	; 2
    1306:	08 f0       	brcs	.+2      	; 0x130a <_ZN7Sd2Card8readDataEmjjPh+0x36>
    1308:	6f c0       	rjmp	.+222    	; 0x13e8 <_ZN7Sd2Card8readDataEmjjPh+0x114>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    130a:	8e 81       	ldd	r24, Y+6	; 0x06
    130c:	88 23       	and	r24, r24
    130e:	71 f0       	breq	.+28     	; 0x132c <_ZN7Sd2Card8readDataEmjjPh+0x58>
    1310:	88 81       	ld	r24, Y
    1312:	99 81       	ldd	r25, Y+1	; 0x01
    1314:	aa 81       	ldd	r26, Y+2	; 0x02
    1316:	bb 81       	ldd	r27, Y+3	; 0x03
    1318:	48 17       	cp	r20, r24
    131a:	59 07       	cpc	r21, r25
    131c:	6a 07       	cpc	r22, r26
    131e:	7b 07       	cpc	r23, r27
    1320:	29 f4       	brne	.+10     	; 0x132c <_ZN7Sd2Card8readDataEmjjPh+0x58>
    1322:	8f 81       	ldd	r24, Y+7	; 0x07
    1324:	98 85       	ldd	r25, Y+8	; 0x08
    1326:	88 16       	cp	r8, r24
    1328:	99 06       	cpc	r9, r25
    132a:	18 f5       	brcc	.+70     	; 0x1372 <_ZN7Sd2Card8readDataEmjjPh+0x9e>
    block_ = block;
    132c:	a8 82       	st	Y, r10
    132e:	b9 82       	std	Y+1, r11	; 0x01
    1330:	ca 82       	std	Y+2, r12	; 0x02
    1332:	db 82       	std	Y+3, r13	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    1334:	8b 85       	ldd	r24, Y+11	; 0x0b
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	39 f0       	breq	.+14     	; 0x1348 <_ZN7Sd2Card8readDataEmjjPh+0x74>
    133a:	69 e0       	ldi	r22, 0x09	; 9
    133c:	aa 0c       	add	r10, r10
    133e:	bb 1c       	adc	r11, r11
    1340:	cc 1c       	adc	r12, r12
    1342:	dd 1c       	adc	r13, r13
    1344:	6a 95       	dec	r22
    1346:	d1 f7       	brne	.-12     	; 0x133c <_ZN7Sd2Card8readDataEmjjPh+0x68>
    if (cardCommand(CMD17, block)) {
    1348:	ce 01       	movw	r24, r28
    134a:	61 e1       	ldi	r22, 0x11	; 17
    134c:	a6 01       	movw	r20, r12
    134e:	95 01       	movw	r18, r10
    1350:	0e 94 ba 08 	call	0x1174	; 0x1174 <_ZN7Sd2Card11cardCommandEhm>
    1354:	88 23       	and	r24, r24
    1356:	19 f0       	breq	.+6      	; 0x135e <_ZN7Sd2Card8readDataEmjjPh+0x8a>
    1358:	83 e0       	ldi	r24, 0x03	; 3
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	45 c0       	rjmp	.+138    	; 0x13e8 <_ZN7Sd2Card8readDataEmjjPh+0x114>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    135e:	ce 01       	movw	r24, r28
    1360:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_ZN7Sd2Card14waitStartBlockEv>
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <_ZN7Sd2Card8readDataEmjjPh+0x96>
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <_ZN7Sd2Card8readDataEmjjPh+0x114>
      goto fail;
    }
    offset_ = 0;
    136a:	18 86       	std	Y+8, r1	; 0x08
    136c:	1f 82       	std	Y+7, r1	; 0x07
    inBlock_ = 1;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	8e 83       	std	Y+6, r24	; 0x06
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	8e bd       	out	0x2e, r24	; 46
    1376:	8f 81       	ldd	r24, Y+7	; 0x07
    1378:	98 85       	ldd	r25, Y+8	; 0x08

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
    137a:	2f ef       	ldi	r18, 0xFF	; 255
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <_ZN7Sd2Card8readDataEmjjPh+0xb4>
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    137e:	0d b4       	in	r0, 0x2d	; 45
    1380:	07 fe       	sbrs	r0, 7
    1382:	fd cf       	rjmp	.-6      	; 0x137e <_ZN7Sd2Card8readDataEmjjPh+0xaa>
    SPDR = 0XFF;
    1384:	2e bd       	out	0x2e, r18	; 46
    1386:	01 96       	adiw	r24, 0x01	; 1
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    1388:	88 15       	cp	r24, r8
    138a:	99 05       	cpc	r25, r9
    138c:	c0 f3       	brcs	.-16     	; 0x137e <_ZN7Sd2Card8readDataEmjjPh+0xaa>
    138e:	98 87       	std	Y+8, r25	; 0x08
    1390:	8f 83       	std	Y+7, r24	; 0x07
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
    1392:	d8 01       	movw	r26, r16
    1394:	11 97       	sbiw	r26, 0x01	; 1
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
    139a:	9f ef       	ldi	r25, 0xFF	; 255
    139c:	0b c0       	rjmp	.+22     	; 0x13b4 <_ZN7Sd2Card8readDataEmjjPh+0xe0>
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    while (!(SPSR & (1 << SPIF)));
    139e:	0d b4       	in	r0, 0x2d	; 45
    13a0:	07 fe       	sbrs	r0, 7
    13a2:	fd cf       	rjmp	.-6      	; 0x139e <_ZN7Sd2Card8readDataEmjjPh+0xca>
    dst[i] = SPDR;
    13a4:	8e b5       	in	r24, 0x2e	; 46
    13a6:	f7 01       	movw	r30, r14
    13a8:	e2 0f       	add	r30, r18
    13aa:	f3 1f       	adc	r31, r19
    13ac:	80 83       	st	Z, r24
    SPDR = 0XFF;
    13ae:	9e bd       	out	0x2e, r25	; 46
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	2a 17       	cp	r18, r26
    13b6:	3b 07       	cpc	r19, r27
    13b8:	90 f3       	brcs	.-28     	; 0x139e <_ZN7Sd2Card8readDataEmjjPh+0xca>
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
    13ba:	0d b4       	in	r0, 0x2d	; 45
    13bc:	07 fe       	sbrs	r0, 7
    13be:	fd cf       	rjmp	.-6      	; 0x13ba <_ZN7Sd2Card8readDataEmjjPh+0xe6>
  dst[n] = SPDR;
    13c0:	8e b5       	in	r24, 0x2e	; 46
    13c2:	ae 0d       	add	r26, r14
    13c4:	bf 1d       	adc	r27, r15
    13c6:	8c 93       	st	X, r24
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    13c8:	2f 81       	ldd	r18, Y+7	; 0x07
    13ca:	38 85       	ldd	r19, Y+8	; 0x08
    13cc:	20 0f       	add	r18, r16
    13ce:	31 1f       	adc	r19, r17
    13d0:	38 87       	std	Y+8, r19	; 0x08
    13d2:	2f 83       	std	Y+7, r18	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	88 23       	and	r24, r24
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <_ZN7Sd2Card8readDataEmjjPh+0x10c>
    13da:	20 50       	subi	r18, 0x00	; 0
    13dc:	32 40       	sbci	r19, 0x02	; 2
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <_ZN7Sd2Card8readDataEmjjPh+0x11e>
    // read rest of data, checksum and set chip select high
    readEnd();
    13e0:	ce 01       	movw	r24, r28
    13e2:	0e 94 97 08 	call	0x112e	; 0x112e <_ZN7Sd2Card7readEndEv>
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <_ZN7Sd2Card8readDataEmjjPh+0x11e>
  }
  return true;

 fail:
  chipSelectHigh();
    13e8:	ce 01       	movw	r24, r28
    13ea:	0e 94 2a 08 	call	0x1054	; 0x1054 <_ZN7Sd2Card14chipSelectHighEv>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <_ZN7Sd2Card8readDataEmjjPh+0x120>
  return false;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
}
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	08 95       	ret

0000140e <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	00 e0       	ldi	r16, 0x00	; 0
    141e:	12 e0       	ldi	r17, 0x02	; 2
    1420:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN7Sd2Card8readDataEmjjPh>
}
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	08 95       	ret

0000142e <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	ec 01       	movw	r28, r24
    1434:	db 01       	movw	r26, r22
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    143a:	20 e2       	ldi	r18, 0x20	; 32
    143c:	fd 01       	movw	r30, r26
    143e:	e8 0f       	add	r30, r24
    1440:	f9 1f       	adc	r31, r25
    1442:	20 83       	st	Z, r18
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	8b 30       	cpi	r24, 0x0B	; 11
    1448:	91 05       	cpc	r25, r1
    144a:	c1 f7       	brne	.-16     	; 0x143c <_ZN6SdFile10make83NameEPKcPh+0xe>
    144c:	57 e0       	ldi	r21, 0x07	; 7
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	21 c0       	rjmp	.+66     	; 0x1494 <_ZN6SdFile10make83NameEPKcPh+0x66>
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
    1452:	2e 32       	cpi	r18, 0x2E	; 46
    1454:	19 f0       	breq	.+6      	; 0x145c <_ZN6SdFile10make83NameEPKcPh+0x2e>
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
    1456:	83 eb       	ldi	r24, 0xB3	; 179
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	07 c0       	rjmp	.+14     	; 0x146a <_ZN6SdFile10make83NameEPKcPh+0x3c>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    145c:	5a 30       	cpi	r21, 0x0A	; 10
    145e:	19 f1       	breq	.+70     	; 0x14a6 <_ZN6SdFile10make83NameEPKcPh+0x78>
    1460:	5a e0       	ldi	r21, 0x0A	; 10
    1462:	48 e0       	ldi	r20, 0x08	; 8
    1464:	17 c0       	rjmp	.+46     	; 0x1494 <_ZN6SdFile10make83NameEPKcPh+0x66>
      i = 8;   // place for extension
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    1466:	32 17       	cp	r19, r18
    1468:	f1 f0       	breq	.+60     	; 0x14a6 <_ZN6SdFile10make83NameEPKcPh+0x78>
    146a:	fc 01       	movw	r30, r24
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	34 91       	lpm	r19, Z+
    1470:	33 23       	and	r19, r19
    1472:	c9 f7       	brne	.-14     	; 0x1466 <_ZN6SdFile10make83NameEPKcPh+0x38>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    1474:	54 17       	cp	r21, r20
    1476:	b8 f0       	brcs	.+46     	; 0x14a6 <_ZN6SdFile10make83NameEPKcPh+0x78>
    1478:	21 32       	cpi	r18, 0x21	; 33
    147a:	a8 f0       	brcs	.+42     	; 0x14a6 <_ZN6SdFile10make83NameEPKcPh+0x78>
    147c:	2f 37       	cpi	r18, 0x7F	; 127
    147e:	98 f4       	brcc	.+38     	; 0x14a6 <_ZN6SdFile10make83NameEPKcPh+0x78>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    1480:	82 2f       	mov	r24, r18
    1482:	81 56       	subi	r24, 0x61	; 97
    1484:	8a 31       	cpi	r24, 0x1A	; 26
    1486:	08 f4       	brcc	.+2      	; 0x148a <_ZN6SdFile10make83NameEPKcPh+0x5c>
    1488:	20 52       	subi	r18, 0x20	; 32
    148a:	fd 01       	movw	r30, r26
    148c:	e4 0f       	add	r30, r20
    148e:	f1 1d       	adc	r31, r1
    1490:	20 83       	st	Z, r18
    1492:	4f 5f       	subi	r20, 0xFF	; 255
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    1494:	29 91       	ld	r18, Y+
    1496:	22 23       	and	r18, r18
    1498:	e1 f6       	brne	.-72     	; 0x1452 <_ZN6SdFile10make83NameEPKcPh+0x24>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	8c 91       	ld	r24, X
    149e:	80 32       	cpi	r24, 0x20	; 32
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <_ZN6SdFile10make83NameEPKcPh+0x7a>
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <_ZN6SdFile10make83NameEPKcPh+0x7a>
    14a6:	90 e0       	ldi	r25, 0x00	; 0
}
    14a8:	89 2f       	mov	r24, r25
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    14b0:	6f 92       	push	r6
    14b2:	7f 92       	push	r7
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ec 01       	movw	r28, r24
    14ce:	7a 01       	movw	r14, r20
    14d0:	8b 01       	movw	r16, r22
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    14d2:	2d 81       	ldd	r18, Y+5	; 0x05
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    14d4:	22 23       	and	r18, r18
    14d6:	09 f4       	brne	.+2      	; 0x14da <_ZN6SdFile7seekSetEm+0x2a>
    14d8:	80 c0       	rjmp	.+256    	; 0x15da <_ZN6SdFile7seekSetEm+0x12a>
    14da:	8b 89       	ldd	r24, Y+19	; 0x13
    14dc:	9c 89       	ldd	r25, Y+20	; 0x14
    14de:	ad 89       	ldd	r26, Y+21	; 0x15
    14e0:	be 89       	ldd	r27, Y+22	; 0x16
    14e2:	84 17       	cp	r24, r20
    14e4:	95 07       	cpc	r25, r21
    14e6:	a6 07       	cpc	r26, r22
    14e8:	b7 07       	cpc	r27, r23
    14ea:	08 f4       	brcc	.+2      	; 0x14ee <_ZN6SdFile7seekSetEm+0x3e>
    14ec:	76 c0       	rjmp	.+236    	; 0x15da <_ZN6SdFile7seekSetEm+0x12a>
    14ee:	85 c0       	rjmp	.+266    	; 0x15fa <_ZN6SdFile7seekSetEm+0x14a>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    14f0:	e1 14       	cp	r14, r1
    14f2:	f1 04       	cpc	r15, r1
    14f4:	01 05       	cpc	r16, r1
    14f6:	11 05       	cpc	r17, r1
    14f8:	49 f4       	brne	.+18     	; 0x150c <_ZN6SdFile7seekSetEm+0x5c>
    // set position to start of file
    curCluster_ = 0;
    14fa:	1e 82       	std	Y+6, r1	; 0x06
    14fc:	1f 82       	std	Y+7, r1	; 0x07
    14fe:	18 86       	std	Y+8, r1	; 0x08
    1500:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
    1502:	1a 86       	std	Y+10, r1	; 0x0a
    1504:	1b 86       	std	Y+11, r1	; 0x0b
    1506:	1c 86       	std	Y+12, r1	; 0x0c
    1508:	1d 86       	std	Y+13, r1	; 0x0d
    150a:	65 c0       	rjmp	.+202    	; 0x15d6 <_ZN6SdFile7seekSetEm+0x126>
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    150c:	2a 85       	ldd	r18, Y+10	; 0x0a
    150e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1510:	4c 85       	ldd	r20, Y+12	; 0x0c
    1512:	5d 85       	ldd	r21, Y+13	; 0x0d
    1514:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1516:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1518:	85 85       	ldd	r24, Z+13	; 0x0d
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	09 96       	adiw	r24, 0x09	; 9
    151e:	21 50       	subi	r18, 0x01	; 1
    1520:	30 40       	sbci	r19, 0x00	; 0
    1522:	40 40       	sbci	r20, 0x00	; 0
    1524:	50 40       	sbci	r21, 0x00	; 0
    1526:	39 01       	movw	r6, r18
    1528:	4a 01       	movw	r8, r20
    152a:	08 2e       	mov	r0, r24
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <_ZN6SdFile7seekSetEm+0x86>
    152e:	96 94       	lsr	r9
    1530:	87 94       	ror	r8
    1532:	77 94       	ror	r7
    1534:	67 94       	ror	r6
    1536:	0a 94       	dec	r0
    1538:	d2 f7       	brpl	.-12     	; 0x152e <_ZN6SdFile7seekSetEm+0x7e>
    153a:	2f 5f       	subi	r18, 0xFF	; 255
    153c:	3f 4f       	sbci	r19, 0xFF	; 255
    153e:	4f 4f       	sbci	r20, 0xFF	; 255
    1540:	5f 4f       	sbci	r21, 0xFF	; 255
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    1542:	08 94       	sec
    1544:	e1 08       	sbc	r14, r1
    1546:	f1 08       	sbc	r15, r1
    1548:	01 09       	sbc	r16, r1
    154a:	11 09       	sbc	r17, r1
    154c:	57 01       	movw	r10, r14
    154e:	68 01       	movw	r12, r16
    1550:	04 c0       	rjmp	.+8      	; 0x155a <_ZN6SdFile7seekSetEm+0xaa>
    1552:	d6 94       	lsr	r13
    1554:	c7 94       	ror	r12
    1556:	b7 94       	ror	r11
    1558:	a7 94       	ror	r10
    155a:	8a 95       	dec	r24
    155c:	d2 f7       	brpl	.-12     	; 0x1552 <_ZN6SdFile7seekSetEm+0xa2>
    155e:	08 94       	sec
    1560:	e1 1c       	adc	r14, r1
    1562:	f1 1c       	adc	r15, r1
    1564:	01 1d       	adc	r16, r1
    1566:	11 1d       	adc	r17, r1

  if (nNew < nCur || curPosition_ == 0) {
    1568:	a6 14       	cp	r10, r6
    156a:	b7 04       	cpc	r11, r7
    156c:	c8 04       	cpc	r12, r8
    156e:	d9 04       	cpc	r13, r9
    1570:	28 f0       	brcs	.+10     	; 0x157c <_ZN6SdFile7seekSetEm+0xcc>
    1572:	21 15       	cp	r18, r1
    1574:	31 05       	cpc	r19, r1
    1576:	41 05       	cpc	r20, r1
    1578:	51 05       	cpc	r21, r1
    157a:	49 f4       	brne	.+18     	; 0x158e <_ZN6SdFile7seekSetEm+0xde>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    157c:	8f 89       	ldd	r24, Y+23	; 0x17
    157e:	98 8d       	ldd	r25, Y+24	; 0x18
    1580:	a9 8d       	ldd	r26, Y+25	; 0x19
    1582:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1584:	8e 83       	std	Y+6, r24	; 0x06
    1586:	9f 83       	std	Y+7, r25	; 0x07
    1588:	a8 87       	std	Y+8, r26	; 0x08
    158a:	b9 87       	std	Y+9, r27	; 0x09
    158c:	16 c0       	rjmp	.+44     	; 0x15ba <_ZN6SdFile7seekSetEm+0x10a>
  } else {
    // advance from curPosition
    nNew -= nCur;
    158e:	a6 18       	sub	r10, r6
    1590:	b7 08       	sbc	r11, r7
    1592:	c8 08       	sbc	r12, r8
    1594:	d9 08       	sbc	r13, r9
    1596:	11 c0       	rjmp	.+34     	; 0x15ba <_ZN6SdFile7seekSetEm+0x10a>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    1598:	4e 81       	ldd	r20, Y+6	; 0x06
    159a:	5f 81       	ldd	r21, Y+7	; 0x07
    159c:	68 85       	ldd	r22, Y+8	; 0x08
    159e:	79 85       	ldd	r23, Y+9	; 0x09
    15a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a4:	94 01       	movw	r18, r8
    15a6:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZNK8SdVolume6fatGetEmPm>
    15aa:	08 94       	sec
    15ac:	a1 08       	sbc	r10, r1
    15ae:	b1 08       	sbc	r11, r1
    15b0:	c1 08       	sbc	r12, r1
    15b2:	d1 08       	sbc	r13, r1
    15b4:	88 23       	and	r24, r24
    15b6:	31 f4       	brne	.+12     	; 0x15c4 <_ZN6SdFile7seekSetEm+0x114>
    15b8:	10 c0       	rjmp	.+32     	; 0x15da <_ZN6SdFile7seekSetEm+0x12a>
    15ba:	86 e0       	ldi	r24, 0x06	; 6
    15bc:	88 2e       	mov	r8, r24
    15be:	91 2c       	mov	r9, r1
    15c0:	8c 0e       	add	r8, r28
    15c2:	9d 1e       	adc	r9, r29
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    15c4:	a1 14       	cp	r10, r1
    15c6:	b1 04       	cpc	r11, r1
    15c8:	c1 04       	cpc	r12, r1
    15ca:	d1 04       	cpc	r13, r1
    15cc:	29 f7       	brne	.-54     	; 0x1598 <_ZN6SdFile7seekSetEm+0xe8>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    15ce:	ea 86       	std	Y+10, r14	; 0x0a
    15d0:	fb 86       	std	Y+11, r15	; 0x0b
    15d2:	0c 87       	std	Y+12, r16	; 0x0c
    15d4:	1d 87       	std	Y+13, r17	; 0x0d
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <_ZN6SdFile7seekSetEm+0x12c>
  return true;
    15da:	80 e0       	ldi	r24, 0x00	; 0
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	8f 90       	pop	r8
    15f4:	7f 90       	pop	r7
    15f6:	6f 90       	pop	r6
    15f8:	08 95       	ret
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	09 f0       	breq	.+2      	; 0x1600 <_ZN6SdFile7seekSetEm+0x150>
    15fe:	78 cf       	rjmp	.-272    	; 0x14f0 <_ZN6SdFile7seekSetEm+0x40>
    1600:	e6 cf       	rjmp	.-52     	; 0x15ce <_ZN6SdFile7seekSetEm+0x11e>

00001602 <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	ec 01       	movw	r28, r24
    1608:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    160a:	6e 85       	ldd	r22, Y+14	; 0x0e
    160c:	7f 85       	ldd	r23, Y+15	; 0x0f
    160e:	88 89       	ldd	r24, Y+16	; 0x10
    1610:	99 89       	ldd	r25, Y+17	; 0x11
    1612:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN8SdVolume13cacheRawBlockEmh>
    1616:	88 23       	and	r24, r24
    1618:	19 f4       	brne	.+6      	; 0x1620 <_ZN6SdFile13cacheDirEntryEh+0x1e>
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	0a c0       	rjmp	.+20     	; 0x1634 <_ZN6SdFile13cacheDirEntryEh+0x32>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    1620:	8a 89       	ldd	r24, Y+18	; 0x12
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	95 e0       	ldi	r25, 0x05	; 5
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	9a 95       	dec	r25
    162e:	e1 f7       	brne	.-8      	; 0x1628 <_ZN6SdFile13cacheDirEntryEh+0x26>
    1630:	23 53       	subi	r18, 0x33	; 51
    1632:	3d 4f       	sbci	r19, 0xFD	; 253
}
    1634:	c9 01       	movw	r24, r18
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    1646:	fc 01       	movw	r30, r24
    1648:	85 81       	ldd	r24, Z+5	; 0x05
    164a:	88 23       	and	r24, r24
    164c:	d9 f1       	breq	.+118    	; 0x16c4 <_ZN6SdFile4syncEv+0x88>

  if (flags_ & F_FILE_DIR_DIRTY) {
    164e:	84 81       	ldd	r24, Z+4	; 0x04
    1650:	87 ff       	sbrs	r24, 7
    1652:	35 c0       	rjmp	.+106    	; 0x16be <_ZN6SdFile4syncEv+0x82>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    1654:	c8 01       	movw	r24, r16
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN6SdFile13cacheDirEntryEh>
    165c:	ec 01       	movw	r28, r24
    if (!d) return false;
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	89 f1       	breq	.+98     	; 0x16c4 <_ZN6SdFile4syncEv+0x88>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    1662:	f8 01       	movw	r30, r16
    1664:	85 81       	ldd	r24, Z+5	; 0x05
    1666:	82 30       	cpi	r24, 0x02	; 2
    1668:	40 f4       	brcc	.+16     	; 0x167a <_ZN6SdFile4syncEv+0x3e>
    166a:	83 89       	ldd	r24, Z+19	; 0x13
    166c:	94 89       	ldd	r25, Z+20	; 0x14
    166e:	a5 89       	ldd	r26, Z+21	; 0x15
    1670:	b6 89       	ldd	r27, Z+22	; 0x16
    1672:	8c 8f       	std	Y+28, r24	; 0x1c
    1674:	9d 8f       	std	Y+29, r25	; 0x1d
    1676:	ae 8f       	std	Y+30, r26	; 0x1e
    1678:	bf 8f       	std	Y+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    167a:	f8 01       	movw	r30, r16
    167c:	87 89       	ldd	r24, Z+23	; 0x17
    167e:	90 8d       	ldd	r25, Z+24	; 0x18
    1680:	9b 8f       	std	Y+27, r25	; 0x1b
    1682:	8a 8f       	std	Y+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
    1684:	87 89       	ldd	r24, Z+23	; 0x17
    1686:	90 8d       	ldd	r25, Z+24	; 0x18
    1688:	a1 8d       	ldd	r26, Z+25	; 0x19
    168a:	b2 8d       	ldd	r27, Z+26	; 0x1a
    168c:	cd 01       	movw	r24, r26
    168e:	aa 27       	eor	r26, r26
    1690:	bb 27       	eor	r27, r27
    1692:	9d 8b       	std	Y+21, r25	; 0x15
    1694:	8c 8b       	std	Y+20, r24	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    1696:	e0 91 cb 02 	lds	r30, 0x02CB
    169a:	f0 91 cc 02 	lds	r31, 0x02CC
    169e:	30 97       	sbiw	r30, 0x00	; 0
    16a0:	51 f0       	breq	.+20     	; 0x16b6 <_ZN6SdFile4syncEv+0x7a>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    16a2:	be 01       	movw	r22, r28
    16a4:	6a 5e       	subi	r22, 0xEA	; 234
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	ce 01       	movw	r24, r28
    16aa:	48 96       	adiw	r24, 0x18	; 24
    16ac:	09 95       	icall
      d->lastAccessDate = d->lastWriteDate;
    16ae:	88 8d       	ldd	r24, Y+24	; 0x18
    16b0:	99 8d       	ldd	r25, Y+25	; 0x19
    16b2:	9b 8b       	std	Y+19, r25	; 0x13
    16b4:	8a 8b       	std	Y+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    16b6:	f8 01       	movw	r30, r16
    16b8:	84 81       	ldd	r24, Z+4	; 0x04
    16ba:	8f 77       	andi	r24, 0x7F	; 127
    16bc:	84 83       	std	Z+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
    16be:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN8SdVolume10cacheFlushEv>
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <_ZN6SdFile4syncEv+0x8a>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
}
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
  if (!sync())return false;
    16d6:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN6SdFile4syncEv>
    16da:	88 23       	and	r24, r24
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <_ZN6SdFile5closeEv+0x12>
  type_ = FAT_FILE_TYPE_CLOSED;
    16de:	1d 82       	std	Y+5, r1	; 0x05
    16e0:	81 e0       	ldi	r24, 0x01	; 1
  return true;
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    16e8:	6f 92       	push	r6
    16ea:	7f 92       	push	r7
    16ec:	8f 92       	push	r8
    16ee:	9f 92       	push	r9
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	00 d0       	rcall	.+0      	; 0x1706 <_ZN6SdFile8truncateEm+0x1e>
    1706:	00 d0       	rcall	.+0      	; 0x1708 <_ZN6SdFile8truncateEm+0x20>
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	7c 01       	movw	r14, r24
    170e:	5a 01       	movw	r10, r20
    1710:	6b 01       	movw	r12, r22
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    1712:	dc 01       	movw	r26, r24
    1714:	15 96       	adiw	r26, 0x05	; 5
    1716:	8c 91       	ld	r24, X
    1718:	15 97       	sbiw	r26, 0x05	; 5
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	09 f0       	breq	.+2      	; 0x1720 <_ZN6SdFile8truncateEm+0x38>
    171e:	8f c0       	rjmp	.+286    	; 0x183e <_ZN6SdFile8truncateEm+0x156>
    1720:	14 96       	adiw	r26, 0x04	; 4
    1722:	8c 91       	ld	r24, X
    1724:	81 ff       	sbrs	r24, 1
    1726:	8b c0       	rjmp	.+278    	; 0x183e <_ZN6SdFile8truncateEm+0x156>
    1728:	9e c0       	rjmp	.+316    	; 0x1866 <_ZN6SdFile8truncateEm+0x17e>

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	a1 05       	cpc	r26, r1
    172e:	b1 05       	cpc	r27, r1
    1730:	11 f4       	brne	.+4      	; 0x1736 <_ZN6SdFile8truncateEm+0x4e>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	85 c0       	rjmp	.+266    	; 0x1840 <_ZN6SdFile8truncateEm+0x158>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    1736:	f7 01       	movw	r30, r14
    1738:	62 84       	ldd	r6, Z+10	; 0x0a
    173a:	73 84       	ldd	r7, Z+11	; 0x0b
    173c:	84 84       	ldd	r8, Z+12	; 0x0c
    173e:	95 84       	ldd	r9, Z+13	; 0x0d

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    1740:	c7 01       	movw	r24, r14
    1742:	b6 01       	movw	r22, r12
    1744:	a5 01       	movw	r20, r10
    1746:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN6SdFile7seekSetEm>
    174a:	88 23       	and	r24, r24
    174c:	09 f4       	brne	.+2      	; 0x1750 <_ZN6SdFile8truncateEm+0x68>
    174e:	77 c0       	rjmp	.+238    	; 0x183e <_ZN6SdFile8truncateEm+0x156>
    1750:	d7 01       	movw	r26, r14
    1752:	5b 96       	adiw	r26, 0x1b	; 27
    1754:	8d 91       	ld	r24, X+
    1756:	9c 91       	ld	r25, X
    1758:	5c 97       	sbiw	r26, 0x1c	; 28

  if (length == 0) {
    175a:	a1 14       	cp	r10, r1
    175c:	b1 04       	cpc	r11, r1
    175e:	c1 04       	cpc	r12, r1
    1760:	d1 04       	cpc	r13, r1
    1762:	89 f4       	brne	.+34     	; 0x1786 <_ZN6SdFile8truncateEm+0x9e>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    1764:	57 96       	adiw	r26, 0x17	; 23
    1766:	4d 91       	ld	r20, X+
    1768:	5d 91       	ld	r21, X+
    176a:	6d 91       	ld	r22, X+
    176c:	7c 91       	ld	r23, X
    176e:	5a 97       	sbiw	r26, 0x1a	; 26
    1770:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZN8SdVolume9freeChainEm>
    1774:	88 23       	and	r24, r24
    1776:	09 f4       	brne	.+2      	; 0x177a <_ZN6SdFile8truncateEm+0x92>
    1778:	62 c0       	rjmp	.+196    	; 0x183e <_ZN6SdFile8truncateEm+0x156>
    firstCluster_ = 0;
    177a:	f7 01       	movw	r30, r14
    177c:	17 8a       	std	Z+23, r1	; 0x17
    177e:	10 8e       	std	Z+24, r1	; 0x18
    1780:	11 8e       	std	Z+25, r1	; 0x19
    1782:	12 8e       	std	Z+26, r1	; 0x1a
    1784:	3d c0       	rjmp	.+122    	; 0x1800 <_ZN6SdFile8truncateEm+0x118>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    1786:	d7 01       	movw	r26, r14
    1788:	16 96       	adiw	r26, 0x06	; 6
    178a:	4d 91       	ld	r20, X+
    178c:	5d 91       	ld	r21, X+
    178e:	6d 91       	ld	r22, X+
    1790:	7c 91       	ld	r23, X
    1792:	19 97       	sbiw	r26, 0x09	; 9
    1794:	9e 01       	movw	r18, r28
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZNK8SdVolume6fatGetEmPm>
    179e:	88 23       	and	r24, r24
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <_ZN6SdFile8truncateEm+0xbc>
    17a2:	4d c0       	rjmp	.+154    	; 0x183e <_ZN6SdFile8truncateEm+0x156>

    if (!vol_->isEOC(toFree)) {
    17a4:	d7 01       	movw	r26, r14
    17a6:	5b 96       	adiw	r26, 0x1b	; 27
    17a8:	ed 91       	ld	r30, X+
    17aa:	fc 91       	ld	r31, X
    17ac:	5c 97       	sbiw	r26, 0x1c	; 28
    17ae:	49 81       	ldd	r20, Y+1	; 0x01
    17b0:	5a 81       	ldd	r21, Y+2	; 0x02
    17b2:	6b 81       	ldd	r22, Y+3	; 0x03
    17b4:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    17b6:	87 89       	ldd	r24, Z+23	; 0x17
    17b8:	80 31       	cpi	r24, 0x10	; 16
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <_ZN6SdFile8truncateEm+0xde>
    17bc:	88 ef       	ldi	r24, 0xF8	; 248
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	af ef       	ldi	r26, 0xFF	; 255
    17c2:	bf e0       	ldi	r27, 0x0F	; 15
    17c4:	04 c0       	rjmp	.+8      	; 0x17ce <_ZN6SdFile8truncateEm+0xe6>
    17c6:	88 ef       	ldi	r24, 0xF8	; 248
    17c8:	9f ef       	ldi	r25, 0xFF	; 255
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	48 17       	cp	r20, r24
    17d0:	59 07       	cpc	r21, r25
    17d2:	6a 07       	cpc	r22, r26
    17d4:	7b 07       	cpc	r23, r27
    17d6:	a0 f4       	brcc	.+40     	; 0x1800 <_ZN6SdFile8truncateEm+0x118>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    17d8:	cf 01       	movw	r24, r30
    17da:	0e 94 10 13 	call	0x2620	; 0x2620 <_ZN8SdVolume9freeChainEm>
    17de:	88 23       	and	r24, r24
    17e0:	71 f1       	breq	.+92     	; 0x183e <_ZN6SdFile8truncateEm+0x156>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    17e2:	f7 01       	movw	r30, r14
    17e4:	46 81       	ldd	r20, Z+6	; 0x06
    17e6:	57 81       	ldd	r21, Z+7	; 0x07
    17e8:	60 85       	ldd	r22, Z+8	; 0x08
    17ea:	71 85       	ldd	r23, Z+9	; 0x09
    17ec:	83 8d       	ldd	r24, Z+27	; 0x1b
    17ee:	94 8d       	ldd	r25, Z+28	; 0x1c
    17f0:	0f ef       	ldi	r16, 0xFF	; 255
    17f2:	1f ef       	ldi	r17, 0xFF	; 255
    17f4:	2f ef       	ldi	r18, 0xFF	; 255
    17f6:	3f e0       	ldi	r19, 0x0F	; 15
    17f8:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN8SdVolume6fatPutEmm>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    17fc:	88 23       	and	r24, r24
    17fe:	f9 f0       	breq	.+62     	; 0x183e <_ZN6SdFile8truncateEm+0x156>
    }
  }
  fileSize_ = length;
    1800:	d7 01       	movw	r26, r14
    1802:	53 96       	adiw	r26, 0x13	; 19
    1804:	ad 92       	st	X+, r10
    1806:	bd 92       	st	X+, r11
    1808:	cd 92       	st	X+, r12
    180a:	dc 92       	st	X, r13
    180c:	56 97       	sbiw	r26, 0x16	; 22

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    180e:	14 96       	adiw	r26, 0x04	; 4
    1810:	8c 91       	ld	r24, X
    1812:	14 97       	sbiw	r26, 0x04	; 4
    1814:	80 68       	ori	r24, 0x80	; 128
    1816:	14 96       	adiw	r26, 0x04	; 4
    1818:	8c 93       	st	X, r24

  if (!sync()) return false;
    181a:	c7 01       	movw	r24, r14
    181c:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN6SdFile4syncEv>
    1820:	88 23       	and	r24, r24
    1822:	69 f0       	breq	.+26     	; 0x183e <_ZN6SdFile8truncateEm+0x156>

  // set file to correct position
  return seekSet(newPos);
    1824:	b6 01       	movw	r22, r12
    1826:	a5 01       	movw	r20, r10
    1828:	6a 14       	cp	r6, r10
    182a:	7b 04       	cpc	r7, r11
    182c:	8c 04       	cpc	r8, r12
    182e:	9d 04       	cpc	r9, r13
    1830:	10 f4       	brcc	.+4      	; 0x1836 <_ZN6SdFile8truncateEm+0x14e>
    1832:	b4 01       	movw	r22, r8
    1834:	a3 01       	movw	r20, r6
    1836:	c7 01       	movw	r24, r14
    1838:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN6SdFile7seekSetEm>
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <_ZN6SdFile8truncateEm+0x158>
    183e:	80 e0       	ldi	r24, 0x00	; 0
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	08 95       	ret
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;

  // error if length is greater than current size
  if (length > fileSize_) return false;
    1866:	f7 01       	movw	r30, r14
    1868:	83 89       	ldd	r24, Z+19	; 0x13
    186a:	94 89       	ldd	r25, Z+20	; 0x14
    186c:	a5 89       	ldd	r26, Z+21	; 0x15
    186e:	b6 89       	ldd	r27, Z+22	; 0x16
    1870:	84 17       	cp	r24, r20
    1872:	95 07       	cpc	r25, r21
    1874:	a6 07       	cpc	r26, r22
    1876:	b7 07       	cpc	r27, r23
    1878:	08 f0       	brcs	.+2      	; 0x187c <_ZN6SdFile8truncateEm+0x194>
    187a:	57 cf       	rjmp	.-338    	; 0x172a <_ZN6SdFile8truncateEm+0x42>
    187c:	e0 cf       	rjmp	.-64     	; 0x183e <_ZN6SdFile8truncateEm+0x156>

0000187e <_ZN6SdFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    187e:	2f 92       	push	r2
    1880:	3f 92       	push	r3
    1882:	4f 92       	push	r4
    1884:	5f 92       	push	r5
    1886:	6f 92       	push	r6
    1888:	7f 92       	push	r7
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	ec 01       	movw	r28, r24
    18a4:	2a 01       	movw	r4, r20
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	88 23       	and	r24, r24
    18aa:	09 f4       	brne	.+2      	; 0x18ae <_ZN6SdFile4readEPvj+0x30>
    18ac:	c6 c0       	rjmp	.+396    	; 0x1a3a <_ZN6SdFile4readEPvj+0x1bc>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	80 ff       	sbrs	r24, 0
    18b2:	c3 c0       	rjmp	.+390    	; 0x1a3a <_ZN6SdFile4readEPvj+0x1bc>
    18b4:	d8 c0       	rjmp	.+432    	; 0x1a66 <_ZN6SdFile4readEPvj+0x1e8>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    18b6:	25 01       	movw	r4, r10
    18b8:	4e 18       	sub	r4, r14
    18ba:	5f 08       	sbc	r5, r15
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    18bc:	4b 01       	movw	r8, r22
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    18be:	76 e0       	ldi	r23, 0x06	; 6
    18c0:	27 2e       	mov	r2, r23
    18c2:	31 2c       	mov	r3, r1
    18c4:	2c 0e       	add	r2, r28
    18c6:	3d 1e       	adc	r3, r29
    18c8:	32 01       	movw	r6, r4
    18ca:	b1 c0       	rjmp	.+354    	; 0x1a2e <_ZN6SdFile4readEPvj+0x1b0>

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    18cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    18ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    18d0:	4c 85       	ldd	r20, Y+12	; 0x0c
    18d2:	5d 85       	ldd	r21, Y+13	; 0x0d
    18d4:	6f ef       	ldi	r22, 0xFF	; 255
    18d6:	a6 2e       	mov	r10, r22
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	b6 2e       	mov	r11, r22
    18dc:	a2 22       	and	r10, r18
    18de:	b3 22       	and	r11, r19
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	79 01       	movw	r14, r18
    18e4:	8a 01       	movw	r16, r20
    18e6:	99 e0       	ldi	r25, 0x09	; 9
    18e8:	16 95       	lsr	r17
    18ea:	07 95       	ror	r16
    18ec:	f7 94       	ror	r15
    18ee:	e7 94       	ror	r14
    18f0:	9a 95       	dec	r25
    18f2:	d1 f7       	brne	.-12     	; 0x18e8 <_ZN6SdFile4readEPvj+0x6a>
    18f4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    18f6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    18f8:	82 30       	cpi	r24, 0x02	; 2
    18fa:	49 f4       	brne	.+18     	; 0x190e <_ZN6SdFile4readEPvj+0x90>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    18fc:	42 8d       	ldd	r20, Z+26	; 0x1a
    18fe:	53 8d       	ldd	r21, Z+27	; 0x1b
    1900:	64 8d       	ldd	r22, Z+28	; 0x1c
    1902:	75 8d       	ldd	r23, Z+29	; 0x1d
    1904:	4e 0d       	add	r20, r14
    1906:	5f 1d       	adc	r21, r15
    1908:	60 1f       	adc	r22, r16
    190a:	71 1f       	adc	r23, r17
    190c:	3f c0       	rjmp	.+126    	; 0x198c <_ZN6SdFile4readEPvj+0x10e>
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    190e:	d4 80       	ldd	r13, Z+4	; 0x04
    1910:	da 94       	dec	r13
    1912:	de 20       	and	r13, r14
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
      if (offset == 0 && blockOfCluster == 0) {
    1914:	a1 14       	cp	r10, r1
    1916:	b1 04       	cpc	r11, r1
    1918:	d9 f4       	brne	.+54     	; 0x1950 <_ZN6SdFile4readEPvj+0xd2>
    191a:	dd 20       	and	r13, r13
    191c:	c9 f4       	brne	.+50     	; 0x1950 <_ZN6SdFile4readEPvj+0xd2>
        // start of new cluster
        if (curPosition_ == 0) {
    191e:	21 15       	cp	r18, r1
    1920:	31 05       	cpc	r19, r1
    1922:	41 05       	cpc	r20, r1
    1924:	51 05       	cpc	r21, r1
    1926:	49 f4       	brne	.+18     	; 0x193a <_ZN6SdFile4readEPvj+0xbc>
          // use first cluster in file
          curCluster_ = firstCluster_;
    1928:	8f 89       	ldd	r24, Y+23	; 0x17
    192a:	98 8d       	ldd	r25, Y+24	; 0x18
    192c:	a9 8d       	ldd	r26, Y+25	; 0x19
    192e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1930:	8e 83       	std	Y+6, r24	; 0x06
    1932:	9f 83       	std	Y+7, r25	; 0x07
    1934:	a8 87       	std	Y+8, r26	; 0x08
    1936:	b9 87       	std	Y+9, r27	; 0x09
    1938:	0b c0       	rjmp	.+22     	; 0x1950 <_ZN6SdFile4readEPvj+0xd2>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    193a:	4e 81       	ldd	r20, Y+6	; 0x06
    193c:	5f 81       	ldd	r21, Y+7	; 0x07
    193e:	68 85       	ldd	r22, Y+8	; 0x08
    1940:	79 85       	ldd	r23, Y+9	; 0x09
    1942:	cf 01       	movw	r24, r30
    1944:	91 01       	movw	r18, r2
    1946:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZNK8SdVolume6fatGetEmPm>
    194a:	88 23       	and	r24, r24
    194c:	09 f4       	brne	.+2      	; 0x1950 <_ZN6SdFile4readEPvj+0xd2>
    194e:	75 c0       	rjmp	.+234    	; 0x1a3a <_ZN6SdFile4readEPvj+0x1bc>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1950:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1952:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1954:	4e 81       	ldd	r20, Y+6	; 0x06
    1956:	5f 81       	ldd	r21, Y+7	; 0x07
    1958:	68 85       	ldd	r22, Y+8	; 0x08
    195a:	79 85       	ldd	r23, Y+9	; 0x09
    195c:	42 50       	subi	r20, 0x02	; 2
    195e:	50 40       	sbci	r21, 0x00	; 0
    1960:	60 40       	sbci	r22, 0x00	; 0
    1962:	70 40       	sbci	r23, 0x00	; 0
    1964:	05 84       	ldd	r0, Z+13	; 0x0d
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <_ZN6SdFile4readEPvj+0xf2>
    1968:	44 0f       	add	r20, r20
    196a:	55 1f       	adc	r21, r21
    196c:	66 1f       	adc	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	0a 94       	dec	r0
    1972:	d2 f7       	brpl	.-12     	; 0x1968 <_ZN6SdFile4readEPvj+0xea>
    1974:	86 85       	ldd	r24, Z+14	; 0x0e
    1976:	97 85       	ldd	r25, Z+15	; 0x0f
    1978:	a0 89       	ldd	r26, Z+16	; 0x10
    197a:	b1 89       	ldd	r27, Z+17	; 0x11
    197c:	48 0f       	add	r20, r24
    197e:	59 1f       	adc	r21, r25
    1980:	6a 1f       	adc	r22, r26
    1982:	7b 1f       	adc	r23, r27
    1984:	4d 0d       	add	r20, r13
    1986:	51 1d       	adc	r21, r1
    1988:	61 1d       	adc	r22, r1
    198a:	71 1d       	adc	r23, r1
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	92 e0       	ldi	r25, 0x02	; 2
    1990:	8a 19       	sub	r24, r10
    1992:	9b 09       	sbc	r25, r11
    1994:	63 01       	movw	r12, r6
    1996:	86 15       	cp	r24, r6
    1998:	97 05       	cpc	r25, r7
    199a:	08 f4       	brcc	.+2      	; 0x199e <_ZN6SdFile4readEPvj+0x120>
    199c:	6c 01       	movw	r12, r24

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    199e:	8c 81       	ldd	r24, Y+4	; 0x04
    19a0:	86 fd       	sbrc	r24, 6
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <_ZN6SdFile4readEPvj+0x132>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	c8 16       	cp	r12, r24
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	d8 06       	cpc	r13, r24
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <_ZN6SdFile4readEPvj+0x132>
    19ae:	73 c0       	rjmp	.+230    	; 0x1a96 <_ZN6SdFile4readEPvj+0x218>
    19b0:	80 91 4a 02 	lds	r24, 0x024A
    19b4:	90 91 4b 02 	lds	r25, 0x024B
    19b8:	a0 91 4c 02 	lds	r26, 0x024C
    19bc:	b0 91 4d 02 	lds	r27, 0x024D
    19c0:	48 17       	cp	r20, r24
    19c2:	59 07       	cpc	r21, r25
    19c4:	6a 07       	cpc	r22, r26
    19c6:	7b 07       	cpc	r23, r27
    19c8:	09 f4       	brne	.+2      	; 0x19cc <_ZN6SdFile4readEPvj+0x14e>
    19ca:	65 c0       	rjmp	.+202    	; 0x1a96 <_ZN6SdFile4readEPvj+0x218>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    19cc:	80 91 cd 04 	lds	r24, 0x04CD
    19d0:	90 91 ce 04 	lds	r25, 0x04CE
    19d4:	95 01       	movw	r18, r10
    19d6:	86 01       	movw	r16, r12
    19d8:	74 01       	movw	r14, r8
    19da:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_ZN7Sd2Card8readDataEmjjPh>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    19de:	88 23       	and	r24, r24
    19e0:	61 f1       	breq	.+88     	; 0x1a3a <_ZN6SdFile4readEPvj+0x1bc>
      dst += n;
    19e2:	8c 0c       	add	r8, r12
    19e4:	9d 1c       	adc	r9, r13
    19e6:	12 c0       	rjmp	.+36     	; 0x1a0c <_ZN6SdFile4readEPvj+0x18e>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    19e8:	95 01       	movw	r18, r10
    19ea:	23 53       	subi	r18, 0x33	; 51
    19ec:	3d 4f       	sbci	r19, 0xFD	; 253
      uint8_t* end = src + n;
    19ee:	a9 01       	movw	r20, r18
    19f0:	4c 0d       	add	r20, r12
    19f2:	5d 1d       	adc	r21, r13
    19f4:	d4 01       	movw	r26, r8
    19f6:	f9 01       	movw	r30, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <_ZN6SdFile4readEPvj+0x180>
      while (src != end) *dst++ = *src++;
    19fa:	81 91       	ld	r24, Z+
    19fc:	8d 93       	st	X+, r24
    19fe:	e4 17       	cp	r30, r20
    1a00:	f5 07       	cpc	r31, r21
    1a02:	d9 f7       	brne	.-10     	; 0x19fa <_ZN6SdFile4readEPvj+0x17c>
    1a04:	e2 1b       	sub	r30, r18
    1a06:	f3 0b       	sbc	r31, r19
    1a08:	8e 0e       	add	r8, r30
    1a0a:	9f 1e       	adc	r9, r31
    }
    curPosition_ += n;
    1a0c:	96 01       	movw	r18, r12
    1a0e:	40 e0       	ldi	r20, 0x00	; 0
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a14:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a16:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a18:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a1a:	82 0f       	add	r24, r18
    1a1c:	93 1f       	adc	r25, r19
    1a1e:	a4 1f       	adc	r26, r20
    1a20:	b5 1f       	adc	r27, r21
    1a22:	8a 87       	std	Y+10, r24	; 0x0a
    1a24:	9b 87       	std	Y+11, r25	; 0x0b
    1a26:	ac 87       	std	Y+12, r26	; 0x0c
    1a28:	bd 87       	std	Y+13, r27	; 0x0d
    toRead -= n;
    1a2a:	6c 18       	sub	r6, r12
    1a2c:	7d 08       	sbc	r7, r13
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    1a2e:	61 14       	cp	r6, r1
    1a30:	71 04       	cpc	r7, r1
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <_ZN6SdFile4readEPvj+0x1b8>
    1a34:	4b cf       	rjmp	.-362    	; 0x18cc <_ZN6SdFile4readEPvj+0x4e>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    1a36:	a2 01       	movw	r20, r4
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <_ZN6SdFile4readEPvj+0x1c0>
    1a3a:	4f ef       	ldi	r20, 0xFF	; 255
    1a3c:	5f ef       	ldi	r21, 0xFF	; 255
}
    1a3e:	ca 01       	movw	r24, r20
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	ff 90       	pop	r15
    1a4a:	ef 90       	pop	r14
    1a4c:	df 90       	pop	r13
    1a4e:	cf 90       	pop	r12
    1a50:	bf 90       	pop	r11
    1a52:	af 90       	pop	r10
    1a54:	9f 90       	pop	r9
    1a56:	8f 90       	pop	r8
    1a58:	7f 90       	pop	r7
    1a5a:	6f 90       	pop	r6
    1a5c:	5f 90       	pop	r5
    1a5e:	4f 90       	pop	r4
    1a60:	3f 90       	pop	r3
    1a62:	2f 90       	pop	r2
    1a64:	08 95       	ret

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    1a66:	ab 88       	ldd	r10, Y+19	; 0x13
    1a68:	bc 88       	ldd	r11, Y+20	; 0x14
    1a6a:	cd 88       	ldd	r12, Y+21	; 0x15
    1a6c:	de 88       	ldd	r13, Y+22	; 0x16
    1a6e:	ea 84       	ldd	r14, Y+10	; 0x0a
    1a70:	fb 84       	ldd	r15, Y+11	; 0x0b
    1a72:	0c 85       	ldd	r16, Y+12	; 0x0c
    1a74:	1d 85       	ldd	r17, Y+13	; 0x0d
    1a76:	9a 01       	movw	r18, r20
    1a78:	40 e0       	ldi	r20, 0x00	; 0
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	d6 01       	movw	r26, r12
    1a7e:	c5 01       	movw	r24, r10
    1a80:	8e 19       	sub	r24, r14
    1a82:	9f 09       	sbc	r25, r15
    1a84:	a0 0b       	sbc	r26, r16
    1a86:	b1 0b       	sbc	r27, r17
    1a88:	82 17       	cp	r24, r18
    1a8a:	93 07       	cpc	r25, r19
    1a8c:	a4 07       	cpc	r26, r20
    1a8e:	b5 07       	cpc	r27, r21
    1a90:	08 f4       	brcc	.+2      	; 0x1a94 <_ZN6SdFile4readEPvj+0x216>
    1a92:	11 cf       	rjmp	.-478    	; 0x18b6 <_ZN6SdFile4readEPvj+0x38>
    1a94:	13 cf       	rjmp	.-474    	; 0x18bc <_ZN6SdFile4readEPvj+0x3e>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    1a96:	cb 01       	movw	r24, r22
    1a98:	ba 01       	movw	r22, r20
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN8SdVolume13cacheRawBlockEmh>
    1aa0:	88 23       	and	r24, r24
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <_ZN6SdFile4readEPvj+0x228>
    1aa4:	a1 cf       	rjmp	.-190    	; 0x19e8 <_ZN6SdFile4readEPvj+0x16a>
    1aa6:	c9 cf       	rjmp	.-110    	; 0x1a3a <_ZN6SdFile4readEPvj+0x1bc>

00001aa8 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    1aa8:	cf 92       	push	r12
    1aaa:	df 92       	push	r13
    1aac:	ef 92       	push	r14
    1aae:	ff 92       	push	r15
    1ab0:	0f 93       	push	r16
    1ab2:	1f 93       	push	r17
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	0f 92       	push	r0
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	6c 01       	movw	r12, r24
  // error if not directory
  if (!isDir()) return NULL;
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	85 81       	ldd	r24, Z+5	; 0x05
    1ac4:	82 30       	cpi	r24, 0x02	; 2
    1ac6:	70 f0       	brcs	.+28     	; 0x1ae4 <_ZN6SdFile12readDirCacheEv+0x3c>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    1ac8:	e2 84       	ldd	r14, Z+10	; 0x0a
    1aca:	f3 84       	ldd	r15, Z+11	; 0x0b
    1acc:	04 85       	ldd	r16, Z+12	; 0x0c
    1ace:	15 85       	ldd	r17, Z+13	; 0x0d
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    1ad0:	c6 01       	movw	r24, r12
    1ad2:	be 01       	movw	r22, r28
    1ad4:	6f 5f       	subi	r22, 0xFF	; 255
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	41 e0       	ldi	r20, 0x01	; 1
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	0e 94 3f 0c 	call	0x187e	; 0x187e <_ZN6SdFile4readEPvj>
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	69 f0       	breq	.+26     	; 0x1afe <_ZN6SdFile12readDirCacheEv+0x56>
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
}
    1ae8:	c9 01       	movw	r24, r18
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	08 95       	ret

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    1afe:	f6 01       	movw	r30, r12
    1b00:	82 85       	ldd	r24, Z+10	; 0x0a
    1b02:	93 85       	ldd	r25, Z+11	; 0x0b
    1b04:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b06:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b08:	4f 96       	adiw	r24, 0x1f	; 31
    1b0a:	a1 1d       	adc	r26, r1
    1b0c:	b1 1d       	adc	r27, r1
    1b0e:	82 87       	std	Z+10, r24	; 0x0a
    1b10:	93 87       	std	Z+11, r25	; 0x0b
    1b12:	a4 87       	std	Z+12, r26	; 0x0c
    1b14:	b5 87       	std	Z+13, r27	; 0x0d

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    1b16:	f5 e0       	ldi	r31, 0x05	; 5
    1b18:	16 95       	lsr	r17
    1b1a:	07 95       	ror	r16
    1b1c:	f7 94       	ror	r15
    1b1e:	e7 94       	ror	r14
    1b20:	fa 95       	dec	r31
    1b22:	d1 f7       	brne	.-12     	; 0x1b18 <_ZN6SdFile12readDirCacheEv+0x70>
    1b24:	8e 2d       	mov	r24, r14
    1b26:	8f 70       	andi	r24, 0x0F	; 15
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	e5 e0       	ldi	r30, 0x05	; 5
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	ea 95       	dec	r30
    1b34:	e1 f7       	brne	.-8      	; 0x1b2e <_ZN6SdFile12readDirCacheEv+0x86>
    1b36:	23 53       	subi	r18, 0x33	; 51
    1b38:	3d 4f       	sbci	r19, 0xFD	; 253
    1b3a:	d6 cf       	rjmp	.-84     	; 0x1ae8 <_ZN6SdFile12readDirCacheEv+0x40>

00001b3c <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	ec 01       	movw	r28, r24
    1b44:	14 2f       	mov	r17, r20
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    1b46:	e6 2f       	mov	r30, r22
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	75 e0       	ldi	r23, 0x05	; 5
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	7a 95       	dec	r23
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <_ZN6SdFile15openCachedEntryEhh+0x10>
    1b54:	e3 53       	subi	r30, 0x33	; 51
    1b56:	fd 4f       	sbci	r31, 0xFD	; 253

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    1b58:	83 85       	ldd	r24, Z+11	; 0x0b
    1b5a:	81 71       	andi	r24, 0x11	; 17
    1b5c:	21 f0       	breq	.+8      	; 0x1b66 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    1b5e:	84 2f       	mov	r24, r20
    1b60:	82 74       	andi	r24, 0x42	; 66
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    1b64:	54 c0       	rjmp	.+168    	; 0x1c0e <_ZN6SdFile15openCachedEntryEhh+0xd2>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    1b66:	6a 8b       	std	Y+18, r22	; 0x12
  dirBlock_ = SdVolume::cacheBlockNumber_;
    1b68:	80 91 4a 02 	lds	r24, 0x024A
    1b6c:	90 91 4b 02 	lds	r25, 0x024B
    1b70:	a0 91 4c 02 	lds	r26, 0x024C
    1b74:	b0 91 4d 02 	lds	r27, 0x024D
    1b78:	8e 87       	std	Y+14, r24	; 0x0e
    1b7a:	9f 87       	std	Y+15, r25	; 0x0f
    1b7c:	a8 8b       	std	Y+16, r26	; 0x10
    1b7e:	b9 8b       	std	Y+17, r27	; 0x11

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    1b80:	84 89       	ldd	r24, Z+20	; 0x14
    1b82:	95 89       	ldd	r25, Z+21	; 0x15
    1b84:	a0 e0       	ldi	r26, 0x00	; 0
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	bc 01       	movw	r22, r24
    1b8a:	55 27       	eor	r21, r21
    1b8c:	44 27       	eor	r20, r20
  firstCluster_ |= p->firstClusterLow;
    1b8e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b90:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b92:	a0 e0       	ldi	r26, 0x00	; 0
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	48 2b       	or	r20, r24
    1b98:	59 2b       	or	r21, r25
    1b9a:	6a 2b       	or	r22, r26
    1b9c:	7b 2b       	or	r23, r27
    1b9e:	4f 8b       	std	Y+23, r20	; 0x17
    1ba0:	58 8f       	std	Y+24, r21	; 0x18
    1ba2:	69 8f       	std	Y+25, r22	; 0x19
    1ba4:	7a 8f       	std	Y+26, r23	; 0x1a
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    1ba6:	83 85       	ldd	r24, Z+11	; 0x0b
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	88 71       	andi	r24, 0x18	; 24
    1bac:	90 70       	andi	r25, 0x00	; 0

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	51 f4       	brne	.+20     	; 0x1bc6 <_ZN6SdFile15openCachedEntryEhh+0x8a>
    fileSize_ = p->fileSize;
    1bb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1bb4:	95 8d       	ldd	r25, Z+29	; 0x1d
    1bb6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1bb8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1bba:	8b 8b       	std	Y+19, r24	; 0x13
    1bbc:	9c 8b       	std	Y+20, r25	; 0x14
    1bbe:	ad 8b       	std	Y+21, r26	; 0x15
    1bc0:	be 8b       	std	Y+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	0c c0       	rjmp	.+24     	; 0x1bde <_ZN6SdFile15openCachedEntryEhh+0xa2>
  } else if (DIR_IS_SUBDIR(p)) {
    1bc6:	40 97       	sbiw	r24, 0x10	; 16
    1bc8:	11 f5       	brne	.+68     	; 0x1c0e <_ZN6SdFile15openCachedEntryEhh+0xd2>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    1bca:	9e 01       	movw	r18, r28
    1bcc:	2d 5e       	subi	r18, 0xED	; 237
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bd4:	0e 94 69 13 	call	0x26d2	; 0x26d2 <_ZNK8SdVolume9chainSizeEmPm>
    1bd8:	88 23       	and	r24, r24
    1bda:	c9 f0       	breq	.+50     	; 0x1c0e <_ZN6SdFile15openCachedEntryEhh+0xd2>
    type_ = FAT_FILE_TYPE_SUBDIR;
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	8d 83       	std	Y+5, r24	; 0x05
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    1be0:	81 2f       	mov	r24, r17
    1be2:	8f 70       	andi	r24, 0x0F	; 15
    1be4:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    1be6:	1e 82       	std	Y+6, r1	; 0x06
    1be8:	1f 82       	std	Y+7, r1	; 0x07
    1bea:	18 86       	std	Y+8, r1	; 0x08
    1bec:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    1bee:	1a 86       	std	Y+10, r1	; 0x0a
    1bf0:	1b 86       	std	Y+11, r1	; 0x0b
    1bf2:	1c 86       	std	Y+12, r1	; 0x0c
    1bf4:	1d 86       	std	Y+13, r1	; 0x0d

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    1bf6:	16 fd       	sbrc	r17, 6
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <_ZN6SdFile15openCachedEntryEhh+0xc2>
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	09 c0       	rjmp	.+18     	; 0x1c10 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    1bfe:	ce 01       	movw	r24, r28
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	50 e0       	ldi	r21, 0x00	; 0
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	70 e0       	ldi	r23, 0x00	; 0
    1c08:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN6SdFile8truncateEm>
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
  return true;
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	08 95       	ret

00001c18 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    1c1e:	9c 01       	movw	r18, r24
    1c20:	2a 5f       	subi	r18, 0xFA	; 250
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <_ZN8SdVolume15allocContiguousEmPm>
    1c34:	88 23       	and	r24, r24
    1c36:	a1 f0       	breq	.+40     	; 0x1c60 <_ZN6SdFile10addClusterEv+0x48>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	a9 8d       	ldd	r26, Y+25	; 0x19
    1c3e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	a1 05       	cpc	r26, r1
    1c44:	b1 05       	cpc	r27, r1
    1c46:	59 f4       	brne	.+22     	; 0x1c5e <_ZN6SdFile10addClusterEv+0x46>
    firstCluster_ = curCluster_;
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4c:	a8 85       	ldd	r26, Y+8	; 0x08
    1c4e:	b9 85       	ldd	r27, Y+9	; 0x09
    1c50:	8f 8b       	std	Y+23, r24	; 0x17
    1c52:	98 8f       	std	Y+24, r25	; 0x18
    1c54:	a9 8f       	std	Y+25, r26	; 0x19
    1c56:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    1c58:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5a:	80 68       	ori	r24, 0x80	; 128
    1c5c:	8c 83       	std	Y+4, r24	; 0x04
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	08 95       	ret

00001c66 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    1c66:	2f 92       	push	r2
    1c68:	3f 92       	push	r3
    1c6a:	4f 92       	push	r4
    1c6c:	5f 92       	push	r5
    1c6e:	7f 92       	push	r7
    1c70:	8f 92       	push	r8
    1c72:	9f 92       	push	r9
    1c74:	af 92       	push	r10
    1c76:	bf 92       	push	r11
    1c78:	cf 92       	push	r12
    1c7a:	df 92       	push	r13
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <_ZN6SdFile5writeEPKvj+0x24>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <_ZN6SdFile5writeEPKvj+0x26>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <_ZN6SdFile5writeEPKvj+0x28>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	6c 01       	movw	r12, r24
    1c94:	16 2f       	mov	r17, r22
    1c96:	07 2f       	mov	r16, r23
    1c98:	5e 83       	std	Y+6, r21	; 0x06
    1c9a:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	15 96       	adiw	r26, 0x05	; 5
    1ca0:	8c 91       	ld	r24, X
    1ca2:	15 97       	sbiw	r26, 0x05	; 5
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <_ZN6SdFile5writeEPKvj+0x44>
    1ca8:	70 c1       	rjmp	.+736    	; 0x1f8a <_ZN6SdFile5writeEPKvj+0x324>
    1caa:	14 96       	adiw	r26, 0x04	; 4
    1cac:	8c 91       	ld	r24, X
    1cae:	81 ff       	sbrs	r24, 1
    1cb0:	6c c1       	rjmp	.+728    	; 0x1f8a <_ZN6SdFile5writeEPKvj+0x324>
    1cb2:	8e c1       	rjmp	.+796    	; 0x1fd0 <_ZN6SdFile5writeEPKvj+0x36a>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1cb4:	f6 01       	movw	r30, r12
    1cb6:	43 89       	ldd	r20, Z+19	; 0x13
    1cb8:	54 89       	ldd	r21, Z+20	; 0x14
    1cba:	65 89       	ldd	r22, Z+21	; 0x15
    1cbc:	76 89       	ldd	r23, Z+22	; 0x16
    1cbe:	82 85       	ldd	r24, Z+10	; 0x0a
    1cc0:	93 85       	ldd	r25, Z+11	; 0x0b
    1cc2:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cc4:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cc6:	84 17       	cp	r24, r20
    1cc8:	95 07       	cpc	r25, r21
    1cca:	a6 07       	cpc	r26, r22
    1ccc:	b7 07       	cpc	r27, r23
    1cce:	31 f0       	breq	.+12     	; 0x1cdc <_ZN6SdFile5writeEPKvj+0x76>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1cd0:	c6 01       	movw	r24, r12
    1cd2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    1cd6:	88 23       	and	r24, r24
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <_ZN6SdFile5writeEPKvj+0x76>
    1cda:	57 c1       	rjmp	.+686    	; 0x1f8a <_ZN6SdFile5writeEPKvj+0x324>
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    1cdc:	81 2f       	mov	r24, r17
    1cde:	90 2f       	mov	r25, r16
    1ce0:	9c 01       	movw	r18, r24
    1ce2:	29 01       	movw	r4, r18
    1ce4:	2d 80       	ldd	r2, Y+5	; 0x05
    1ce6:	3e 80       	ldd	r3, Y+6	; 0x06
    1ce8:	17 c1       	rjmp	.+558    	; 0x1f18 <_ZN6SdFile5writeEPKvj+0x2b2>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    1cea:	d6 01       	movw	r26, r12
    1cec:	5b 96       	adiw	r26, 0x1b	; 27
    1cee:	ed 91       	ld	r30, X+
    1cf0:	fc 91       	ld	r31, X
    1cf2:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1cf4:	da 01       	movw	r26, r20
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	19 e0       	ldi	r17, 0x09	; 9
    1cfa:	b6 95       	lsr	r27
    1cfc:	a7 95       	ror	r26
    1cfe:	97 95       	ror	r25
    1d00:	87 95       	ror	r24
    1d02:	1a 95       	dec	r17
    1d04:	d1 f7       	brne	.-12     	; 0x1cfa <_ZN6SdFile5writeEPKvj+0x94>
    1d06:	74 80       	ldd	r7, Z+4	; 0x04
    1d08:	7a 94       	dec	r7
    1d0a:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    1d0c:	7f ef       	ldi	r23, 0xFF	; 255
    1d0e:	87 2e       	mov	r8, r23
    1d10:	71 e0       	ldi	r23, 0x01	; 1
    1d12:	97 2e       	mov	r9, r23
    1d14:	82 22       	and	r8, r18
    1d16:	93 22       	and	r9, r19
    if (blockOfCluster == 0 && blockOffset == 0) {
    1d18:	77 20       	and	r7, r7
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <_ZN6SdFile5writeEPKvj+0xb8>
    1d1c:	4e c0       	rjmp	.+156    	; 0x1dba <_ZN6SdFile5writeEPKvj+0x154>
    1d1e:	81 14       	cp	r8, r1
    1d20:	91 04       	cpc	r9, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <_ZN6SdFile5writeEPKvj+0xc0>
    1d24:	4a c0       	rjmp	.+148    	; 0x1dba <_ZN6SdFile5writeEPKvj+0x154>
      // start of new cluster
      if (curCluster_ == 0) {
    1d26:	d6 01       	movw	r26, r12
    1d28:	16 96       	adiw	r26, 0x06	; 6
    1d2a:	4d 91       	ld	r20, X+
    1d2c:	5d 91       	ld	r21, X+
    1d2e:	6d 91       	ld	r22, X+
    1d30:	7c 91       	ld	r23, X
    1d32:	19 97       	sbiw	r26, 0x09	; 9
    1d34:	41 15       	cp	r20, r1
    1d36:	51 05       	cpc	r21, r1
    1d38:	61 05       	cpc	r22, r1
    1d3a:	71 05       	cpc	r23, r1
    1d3c:	81 f4       	brne	.+32     	; 0x1d5e <_ZN6SdFile5writeEPKvj+0xf8>
        if (firstCluster_ == 0) {
    1d3e:	57 96       	adiw	r26, 0x17	; 23
    1d40:	8d 91       	ld	r24, X+
    1d42:	9d 91       	ld	r25, X+
    1d44:	0d 90       	ld	r0, X+
    1d46:	bc 91       	ld	r27, X
    1d48:	a0 2d       	mov	r26, r0
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	a1 05       	cpc	r26, r1
    1d4e:	b1 05       	cpc	r27, r1
    1d50:	49 f1       	breq	.+82     	; 0x1da4 <_ZN6SdFile5writeEPKvj+0x13e>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
    1d52:	f6 01       	movw	r30, r12
    1d54:	86 83       	std	Z+6, r24	; 0x06
    1d56:	97 83       	std	Z+7, r25	; 0x07
    1d58:	a0 87       	std	Z+8, r26	; 0x08
    1d5a:	b1 87       	std	Z+9, r27	; 0x09
    1d5c:	2e c0       	rjmp	.+92     	; 0x1dba <_ZN6SdFile5writeEPKvj+0x154>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1d5e:	cf 01       	movw	r24, r30
    1d60:	9e 01       	movw	r18, r28
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZNK8SdVolume6fatGetEmPm>
    1d6a:	88 23       	and	r24, r24
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <_ZN6SdFile5writeEPKvj+0x10a>
    1d6e:	14 c1       	rjmp	.+552    	; 0x1f98 <_ZN6SdFile5writeEPKvj+0x332>
        if (vol_->isEOC(next)) {
    1d70:	29 81       	ldd	r18, Y+1	; 0x01
    1d72:	3a 81       	ldd	r19, Y+2	; 0x02
    1d74:	4b 81       	ldd	r20, Y+3	; 0x03
    1d76:	5c 81       	ldd	r21, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1d78:	d6 01       	movw	r26, r12
    1d7a:	5b 96       	adiw	r26, 0x1b	; 27
    1d7c:	ed 91       	ld	r30, X+
    1d7e:	fc 91       	ld	r31, X
    1d80:	5c 97       	sbiw	r26, 0x1c	; 28
    1d82:	87 89       	ldd	r24, Z+23	; 0x17
    1d84:	80 31       	cpi	r24, 0x10	; 16
    1d86:	29 f0       	breq	.+10     	; 0x1d92 <_ZN6SdFile5writeEPKvj+0x12c>
    1d88:	88 ef       	ldi	r24, 0xF8	; 248
    1d8a:	9f ef       	ldi	r25, 0xFF	; 255
    1d8c:	af ef       	ldi	r26, 0xFF	; 255
    1d8e:	bf e0       	ldi	r27, 0x0F	; 15
    1d90:	04 c0       	rjmp	.+8      	; 0x1d9a <_ZN6SdFile5writeEPKvj+0x134>
    1d92:	88 ef       	ldi	r24, 0xF8	; 248
    1d94:	9f ef       	ldi	r25, 0xFF	; 255
    1d96:	a0 e0       	ldi	r26, 0x00	; 0
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	28 17       	cp	r18, r24
    1d9c:	39 07       	cpc	r19, r25
    1d9e:	4a 07       	cpc	r20, r26
    1da0:	5b 07       	cpc	r21, r27
    1da2:	30 f0       	brcs	.+12     	; 0x1db0 <_ZN6SdFile5writeEPKvj+0x14a>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1da4:	c6 01       	movw	r24, r12
    1da6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN6SdFile10addClusterEv>
    1daa:	88 23       	and	r24, r24
    1dac:	31 f4       	brne	.+12     	; 0x1dba <_ZN6SdFile5writeEPKvj+0x154>
    1dae:	ed c0       	rjmp	.+474    	; 0x1f8a <_ZN6SdFile5writeEPKvj+0x324>
        } else {
          curCluster_ = next;
    1db0:	f6 01       	movw	r30, r12
    1db2:	26 83       	std	Z+6, r18	; 0x06
    1db4:	37 83       	std	Z+7, r19	; 0x07
    1db6:	40 87       	std	Z+8, r20	; 0x08
    1db8:	51 87       	std	Z+9, r21	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	92 e0       	ldi	r25, 0x02	; 2
    1dbe:	88 19       	sub	r24, r8
    1dc0:	99 09       	sbc	r25, r9
    1dc2:	51 01       	movw	r10, r2
    1dc4:	82 15       	cp	r24, r2
    1dc6:	93 05       	cpc	r25, r3
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <_ZN6SdFile5writeEPKvj+0x166>
    1dca:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    1dcc:	d6 01       	movw	r26, r12
    1dce:	5b 96       	adiw	r26, 0x1b	; 27
    1dd0:	ed 91       	ld	r30, X+
    1dd2:	fc 91       	ld	r31, X
    1dd4:	5c 97       	sbiw	r26, 0x1c	; 28
    1dd6:	16 96       	adiw	r26, 0x06	; 6
    1dd8:	ed 90       	ld	r14, X+
    1dda:	fd 90       	ld	r15, X+
    1ddc:	0d 91       	ld	r16, X+
    1dde:	1c 91       	ld	r17, X
    1de0:	19 97       	sbiw	r26, 0x09	; 9
    1de2:	8e ef       	ldi	r24, 0xFE	; 254
    1de4:	9f ef       	ldi	r25, 0xFF	; 255
    1de6:	af ef       	ldi	r26, 0xFF	; 255
    1de8:	bf ef       	ldi	r27, 0xFF	; 255
    1dea:	e8 0e       	add	r14, r24
    1dec:	f9 1e       	adc	r15, r25
    1dee:	0a 1f       	adc	r16, r26
    1df0:	1b 1f       	adc	r17, r27
    1df2:	05 84       	ldd	r0, Z+13	; 0x0d
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <_ZN6SdFile5writeEPKvj+0x198>
    1df6:	ee 0c       	add	r14, r14
    1df8:	ff 1c       	adc	r15, r15
    1dfa:	00 1f       	adc	r16, r16
    1dfc:	11 1f       	adc	r17, r17
    1dfe:	0a 94       	dec	r0
    1e00:	d2 f7       	brpl	.-12     	; 0x1df6 <_ZN6SdFile5writeEPKvj+0x190>
    1e02:	86 85       	ldd	r24, Z+14	; 0x0e
    1e04:	97 85       	ldd	r25, Z+15	; 0x0f
    1e06:	a0 89       	ldd	r26, Z+16	; 0x10
    1e08:	b1 89       	ldd	r27, Z+17	; 0x11
    1e0a:	e8 0e       	add	r14, r24
    1e0c:	f9 1e       	adc	r15, r25
    1e0e:	0a 1f       	adc	r16, r26
    1e10:	1b 1f       	adc	r17, r27
    1e12:	e7 0c       	add	r14, r7
    1e14:	f1 1c       	adc	r15, r1
    1e16:	01 1d       	adc	r16, r1
    1e18:	11 1d       	adc	r17, r1
    if (n == 512) {
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a9 16       	cp	r10, r25
    1e1e:	92 e0       	ldi	r25, 0x02	; 2
    1e20:	b9 06       	cpc	r11, r25
    1e22:	51 f5       	brne	.+84     	; 0x1e78 <_ZN6SdFile5writeEPKvj+0x212>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    1e24:	80 91 4a 02 	lds	r24, 0x024A
    1e28:	90 91 4b 02 	lds	r25, 0x024B
    1e2c:	a0 91 4c 02 	lds	r26, 0x024C
    1e30:	b0 91 4d 02 	lds	r27, 0x024D
    1e34:	8e 15       	cp	r24, r14
    1e36:	9f 05       	cpc	r25, r15
    1e38:	a0 07       	cpc	r26, r16
    1e3a:	b1 07       	cpc	r27, r17
    1e3c:	61 f4       	brne	.+24     	; 0x1e56 <_ZN6SdFile5writeEPKvj+0x1f0>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1e3e:	8f ef       	ldi	r24, 0xFF	; 255
    1e40:	9f ef       	ldi	r25, 0xFF	; 255
    1e42:	af ef       	ldi	r26, 0xFF	; 255
    1e44:	bf ef       	ldi	r27, 0xFF	; 255
    1e46:	80 93 4a 02 	sts	0x024A, r24
    1e4a:	90 93 4b 02 	sts	0x024B, r25
    1e4e:	a0 93 4c 02 	sts	0x024C, r26
    1e52:	b0 93 4d 02 	sts	0x024D, r27
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1e56:	80 91 cd 04 	lds	r24, 0x04CD
    1e5a:	90 91 ce 04 	lds	r25, 0x04CE
    1e5e:	b8 01       	movw	r22, r16
    1e60:	a7 01       	movw	r20, r14
    1e62:	92 01       	movw	r18, r4
    1e64:	0e 94 0d 09 	call	0x121a	; 0x121a <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1e68:	88 23       	and	r24, r24
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <_ZN6SdFile5writeEPKvj+0x208>
    1e6c:	8e c0       	rjmp	.+284    	; 0x1f8a <_ZN6SdFile5writeEPKvj+0x324>
      src += 512;
    1e6e:	a0 e0       	ldi	r26, 0x00	; 0
    1e70:	b2 e0       	ldi	r27, 0x02	; 2
    1e72:	4a 0e       	add	r4, r26
    1e74:	5b 1e       	adc	r5, r27
    1e76:	3e c0       	rjmp	.+124    	; 0x1ef4 <_ZN6SdFile5writeEPKvj+0x28e>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1e78:	81 14       	cp	r8, r1
    1e7a:	91 04       	cpc	r9, r1
    1e7c:	09 f5       	brne	.+66     	; 0x1ec0 <_ZN6SdFile5writeEPKvj+0x25a>
    1e7e:	f6 01       	movw	r30, r12
    1e80:	22 85       	ldd	r18, Z+10	; 0x0a
    1e82:	33 85       	ldd	r19, Z+11	; 0x0b
    1e84:	44 85       	ldd	r20, Z+12	; 0x0c
    1e86:	55 85       	ldd	r21, Z+13	; 0x0d
    1e88:	83 89       	ldd	r24, Z+19	; 0x13
    1e8a:	94 89       	ldd	r25, Z+20	; 0x14
    1e8c:	a5 89       	ldd	r26, Z+21	; 0x15
    1e8e:	b6 89       	ldd	r27, Z+22	; 0x16
    1e90:	28 17       	cp	r18, r24
    1e92:	39 07       	cpc	r19, r25
    1e94:	4a 07       	cpc	r20, r26
    1e96:	5b 07       	cpc	r21, r27
    1e98:	98 f0       	brcs	.+38     	; 0x1ec0 <_ZN6SdFile5writeEPKvj+0x25a>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1e9a:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN8SdVolume10cacheFlushEv>
    1e9e:	88 23       	and	r24, r24
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <_ZN6SdFile5writeEPKvj+0x23e>
    1ea2:	73 c0       	rjmp	.+230    	; 0x1f8a <_ZN6SdFile5writeEPKvj+0x324>
        SdVolume::cacheBlockNumber_ = block;
    1ea4:	e0 92 4a 02 	sts	0x024A, r14
    1ea8:	f0 92 4b 02 	sts	0x024B, r15
    1eac:	00 93 4c 02 	sts	0x024C, r16
    1eb0:	10 93 4d 02 	sts	0x024D, r17
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1eb4:	80 91 cf 04 	lds	r24, 0x04CF
    1eb8:	81 60       	ori	r24, 0x01	; 1
    1eba:	80 93 cf 04 	sts	0x04CF, r24
    1ebe:	08 c0       	rjmp	.+16     	; 0x1ed0 <_ZN6SdFile5writeEPKvj+0x26a>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	b7 01       	movw	r22, r14
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN8SdVolume13cacheRawBlockEmh>
    1eca:	88 23       	and	r24, r24
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <_ZN6SdFile5writeEPKvj+0x26a>
    1ece:	5d c0       	rjmp	.+186    	; 0x1f8a <_ZN6SdFile5writeEPKvj+0x324>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    1ed0:	94 01       	movw	r18, r8
    1ed2:	23 53       	subi	r18, 0x33	; 51
    1ed4:	3d 4f       	sbci	r19, 0xFD	; 253
      uint8_t* end = dst + n;
    1ed6:	a9 01       	movw	r20, r18
    1ed8:	4a 0d       	add	r20, r10
    1eda:	5b 1d       	adc	r21, r11
    1edc:	d2 01       	movw	r26, r4
    1ede:	f9 01       	movw	r30, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <_ZN6SdFile5writeEPKvj+0x280>
      while (dst != end) *dst++ = *src++;
    1ee2:	8d 91       	ld	r24, X+
    1ee4:	81 93       	st	Z+, r24
    1ee6:	e4 17       	cp	r30, r20
    1ee8:	f5 07       	cpc	r31, r21
    1eea:	d9 f7       	brne	.-10     	; 0x1ee2 <_ZN6SdFile5writeEPKvj+0x27c>
    1eec:	e2 1b       	sub	r30, r18
    1eee:	f3 0b       	sbc	r31, r19
    1ef0:	4e 0e       	add	r4, r30
    1ef2:	5f 1e       	adc	r5, r31
    }
    nToWrite -= n;
    1ef4:	2a 18       	sub	r2, r10
    1ef6:	3b 08       	sbc	r3, r11
    curPosition_ += n;
    1ef8:	95 01       	movw	r18, r10
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	f6 01       	movw	r30, r12
    1f00:	82 85       	ldd	r24, Z+10	; 0x0a
    1f02:	93 85       	ldd	r25, Z+11	; 0x0b
    1f04:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f06:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f08:	82 0f       	add	r24, r18
    1f0a:	93 1f       	adc	r25, r19
    1f0c:	a4 1f       	adc	r26, r20
    1f0e:	b5 1f       	adc	r27, r21
    1f10:	82 87       	std	Z+10, r24	; 0x0a
    1f12:	93 87       	std	Z+11, r25	; 0x0b
    1f14:	a4 87       	std	Z+12, r26	; 0x0c
    1f16:	b5 87       	std	Z+13, r27	; 0x0d
    1f18:	d6 01       	movw	r26, r12
    1f1a:	1a 96       	adiw	r26, 0x0a	; 10
    1f1c:	2d 91       	ld	r18, X+
    1f1e:	3d 91       	ld	r19, X+
    1f20:	4d 91       	ld	r20, X+
    1f22:	5c 91       	ld	r21, X
    1f24:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1f26:	21 14       	cp	r2, r1
    1f28:	31 04       	cpc	r3, r1
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <_ZN6SdFile5writeEPKvj+0x2c8>
    1f2c:	de ce       	rjmp	.-580    	; 0x1cea <_ZN6SdFile5writeEPKvj+0x84>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1f2e:	53 96       	adiw	r26, 0x13	; 19
    1f30:	8d 91       	ld	r24, X+
    1f32:	9d 91       	ld	r25, X+
    1f34:	0d 90       	ld	r0, X+
    1f36:	bc 91       	ld	r27, X
    1f38:	a0 2d       	mov	r26, r0
    1f3a:	82 17       	cp	r24, r18
    1f3c:	93 07       	cpc	r25, r19
    1f3e:	a4 07       	cpc	r26, r20
    1f40:	b5 07       	cpc	r27, r21
    1f42:	48 f4       	brcc	.+18     	; 0x1f56 <_ZN6SdFile5writeEPKvj+0x2f0>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    1f44:	f6 01       	movw	r30, r12
    1f46:	23 8b       	std	Z+19, r18	; 0x13
    1f48:	34 8b       	std	Z+20, r19	; 0x14
    1f4a:	45 8b       	std	Z+21, r20	; 0x15
    1f4c:	56 8b       	std	Z+22, r21	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    1f4e:	84 81       	ldd	r24, Z+4	; 0x04
    1f50:	80 68       	ori	r24, 0x80	; 128
    1f52:	84 83       	std	Z+4, r24	; 0x04
    1f54:	11 c0       	rjmp	.+34     	; 0x1f78 <_ZN6SdFile5writeEPKvj+0x312>
  } else if (dateTime_ && nbyte) {
    1f56:	80 91 cb 02 	lds	r24, 0x02CB
    1f5a:	90 91 cc 02 	lds	r25, 0x02CC
    1f5e:	89 2b       	or	r24, r25
    1f60:	59 f0       	breq	.+22     	; 0x1f78 <_ZN6SdFile5writeEPKvj+0x312>
    1f62:	8d 81       	ldd	r24, Y+5	; 0x05
    1f64:	9e 81       	ldd	r25, Y+6	; 0x06
    1f66:	89 2b       	or	r24, r25
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <_ZN6SdFile5writeEPKvj+0x312>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1f6a:	d6 01       	movw	r26, r12
    1f6c:	14 96       	adiw	r26, 0x04	; 4
    1f6e:	8c 91       	ld	r24, X
    1f70:	14 97       	sbiw	r26, 0x04	; 4
    1f72:	80 68       	ori	r24, 0x80	; 128
    1f74:	14 96       	adiw	r26, 0x04	; 4
    1f76:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    1f78:	f6 01       	movw	r30, r12
    1f7a:	84 81       	ldd	r24, Z+4	; 0x04
    1f7c:	83 ff       	sbrs	r24, 3
    1f7e:	0e c0       	rjmp	.+28     	; 0x1f9c <_ZN6SdFile5writeEPKvj+0x336>
    if (!sync()) goto writeErrorReturn;
    1f80:	c6 01       	movw	r24, r12
    1f82:	0e 94 1e 0b 	call	0x163c	; 0x163c <_ZN6SdFile4syncEv>
    1f86:	88 23       	and	r24, r24
    1f88:	49 f4       	brne	.+18     	; 0x1f9c <_ZN6SdFile5writeEPKvj+0x336>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	d6 01       	movw	r26, r12
    1f90:	13 96       	adiw	r26, 0x03	; 3
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
    1f96:	12 97       	sbiw	r26, 0x02	; 2
    1f98:	1e 82       	std	Y+6, r1	; 0x06
    1f9a:	1d 82       	std	Y+5, r1	; 0x05
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	26 96       	adiw	r28, 0x06	; 6
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	cf 90       	pop	r12
    1fbc:	bf 90       	pop	r11
    1fbe:	af 90       	pop	r10
    1fc0:	9f 90       	pop	r9
    1fc2:	8f 90       	pop	r8
    1fc4:	7f 90       	pop	r7
    1fc6:	5f 90       	pop	r5
    1fc8:	4f 90       	pop	r4
    1fca:	3f 90       	pop	r3
    1fcc:	2f 90       	pop	r2
    1fce:	08 95       	ret

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1fd0:	82 fd       	sbrc	r24, 2
    1fd2:	70 ce       	rjmp	.-800    	; 0x1cb4 <_ZN6SdFile5writeEPKvj+0x4e>
    1fd4:	83 ce       	rjmp	.-762    	; 0x1cdc <_ZN6SdFile5writeEPKvj+0x76>

00001fd6 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	0f 92       	push	r0
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    1fe2:	be 01       	movw	r22, r28
    1fe4:	6f 5f       	subi	r22, 0xFF	; 255
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <_ZN6SdFile5writeEPKvj>
}
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <_ZN6SdFile13addDirClusterEv>:
  return true;
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	ec 01       	movw	r28, r24
  if (!addCluster()) return false;
    2008:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN6SdFile10addClusterEv>
    200c:	88 23       	and	r24, r24
    200e:	09 f4       	brne	.+2      	; 0x2012 <_ZN6SdFile13addDirClusterEv+0x1a>
    2010:	4e c0       	rjmp	.+156    	; 0x20ae <_ZN6SdFile13addDirClusterEv+0xb6>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    2012:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2014:	fc 8d       	ldd	r31, Y+28	; 0x1c
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    2016:	ee 80       	ldd	r14, Y+6	; 0x06
    2018:	ff 80       	ldd	r15, Y+7	; 0x07
    201a:	08 85       	ldd	r16, Y+8	; 0x08
    201c:	19 85       	ldd	r17, Y+9	; 0x09
    201e:	8e ef       	ldi	r24, 0xFE	; 254
    2020:	9f ef       	ldi	r25, 0xFF	; 255
    2022:	af ef       	ldi	r26, 0xFF	; 255
    2024:	bf ef       	ldi	r27, 0xFF	; 255
    2026:	e8 0e       	add	r14, r24
    2028:	f9 1e       	adc	r15, r25
    202a:	0a 1f       	adc	r16, r26
    202c:	1b 1f       	adc	r17, r27
    202e:	05 84       	ldd	r0, Z+13	; 0x0d
    2030:	04 c0       	rjmp	.+8      	; 0x203a <_ZN6SdFile13addDirClusterEv+0x42>
    2032:	ee 0c       	add	r14, r14
    2034:	ff 1c       	adc	r15, r15
    2036:	00 1f       	adc	r16, r16
    2038:	11 1f       	adc	r17, r17
    203a:	0a 94       	dec	r0
    203c:	d2 f7       	brpl	.-12     	; 0x2032 <_ZN6SdFile13addDirClusterEv+0x3a>
    203e:	86 85       	ldd	r24, Z+14	; 0x0e
    2040:	97 85       	ldd	r25, Z+15	; 0x0f
    2042:	a0 89       	ldd	r26, Z+16	; 0x10
    2044:	b1 89       	ldd	r27, Z+17	; 0x11
    2046:	e8 0e       	add	r14, r24
    2048:	f9 1e       	adc	r15, r25
    204a:	0a 1f       	adc	r16, r26
    204c:	1b 1f       	adc	r17, r27
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    204e:	d4 80       	ldd	r13, Z+4	; 0x04
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    2050:	08 94       	sec
    2052:	e1 08       	sbc	r14, r1
    2054:	f1 08       	sbc	r15, r1
    2056:	01 09       	sbc	r16, r1
    2058:	11 09       	sbc	r17, r1
    205a:	0b c0       	rjmp	.+22     	; 0x2072 <_ZN6SdFile13addDirClusterEv+0x7a>
    205c:	c8 01       	movw	r24, r16
    205e:	b7 01       	movw	r22, r14
    2060:	6d 0d       	add	r22, r13
    2062:	71 1d       	adc	r23, r1
    2064:	81 1d       	adc	r24, r1
    2066:	91 1d       	adc	r25, r1
    2068:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN8SdVolume14cacheZeroBlockEm>
    206c:	88 23       	and	r24, r24
    206e:	f9 f0       	breq	.+62     	; 0x20ae <_ZN6SdFile13addDirClusterEv+0xb6>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    2070:	da 94       	dec	r13
    2072:	dd 20       	and	r13, r13
    2074:	99 f7       	brne	.-26     	; 0x205c <_ZN6SdFile13addDirClusterEv+0x64>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    2076:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2078:	fc 8d       	ldd	r31, Y+28	; 0x1c
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	32 e0       	ldi	r19, 0x02	; 2
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	05 84       	ldd	r0, Z+13	; 0x0d
    2084:	04 c0       	rjmp	.+8      	; 0x208e <_ZN6SdFile13addDirClusterEv+0x96>
    2086:	22 0f       	add	r18, r18
    2088:	33 1f       	adc	r19, r19
    208a:	44 1f       	adc	r20, r20
    208c:	55 1f       	adc	r21, r21
    208e:	0a 94       	dec	r0
    2090:	d2 f7       	brpl	.-12     	; 0x2086 <_ZN6SdFile13addDirClusterEv+0x8e>
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	ad 89       	ldd	r26, Y+21	; 0x15
    2098:	be 89       	ldd	r27, Y+22	; 0x16
    209a:	82 0f       	add	r24, r18
    209c:	93 1f       	adc	r25, r19
    209e:	a4 1f       	adc	r26, r20
    20a0:	b5 1f       	adc	r27, r21
    20a2:	8b 8b       	std	Y+19, r24	; 0x13
    20a4:	9c 8b       	std	Y+20, r25	; 0x14
    20a6:	ad 8b       	std	Y+21, r26	; 0x15
    20a8:	be 8b       	std	Y+22, r27	; 0x16
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <_ZN6SdFile13addDirClusterEv+0xb8>
  return true;
    20ae:	80 e0       	ldi	r24, 0x00	; 0
}
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	08 95       	ret

000020c0 <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    20c0:	6f 92       	push	r6
    20c2:	7f 92       	push	r7
    20c4:	8f 92       	push	r8
    20c6:	9f 92       	push	r9
    20c8:	af 92       	push	r10
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	2b 97       	sbiw	r28, 0x0b	; 11
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	5c 01       	movw	r10, r24
    20ee:	6b 01       	movw	r12, r22
    20f0:	82 2e       	mov	r8, r18
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    20f2:	dc 01       	movw	r26, r24
    20f4:	15 96       	adiw	r26, 0x05	; 5
    20f6:	8c 91       	ld	r24, X
    20f8:	88 23       	and	r24, r24
    20fa:	09 f0       	breq	.+2      	; 0x20fe <_ZN6SdFile4openEPS_PKch+0x3e>
    20fc:	d2 c0       	rjmp	.+420    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>

  if (!make83Name(fileName, dname)) return false;
    20fe:	ca 01       	movw	r24, r20
    2100:	8e 01       	movw	r16, r28
    2102:	0f 5f       	subi	r16, 0xFF	; 255
    2104:	1f 4f       	sbci	r17, 0xFF	; 255
    2106:	b8 01       	movw	r22, r16
    2108:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZN6SdFile10make83NameEPKcPh>
    210c:	88 23       	and	r24, r24
    210e:	09 f4       	brne	.+2      	; 0x2112 <_ZN6SdFile4openEPS_PKch+0x52>
    2110:	c8 c0       	rjmp	.+400    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>
  vol_ = dirFile->vol_;
    2112:	f6 01       	movw	r30, r12
    2114:	83 8d       	ldd	r24, Z+27	; 0x1b
    2116:	94 8d       	ldd	r25, Z+28	; 0x1c
    2118:	d5 01       	movw	r26, r10
    211a:	5c 96       	adiw	r26, 0x1c	; 28
    211c:	9c 93       	st	X, r25
    211e:	8e 93       	st	-X, r24
    2120:	5b 97       	sbiw	r26, 0x1b	; 27
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    2122:	16 82       	std	Z+6, r1	; 0x06
    2124:	17 82       	std	Z+7, r1	; 0x07
    2126:	10 86       	std	Z+8, r1	; 0x08
    2128:	11 86       	std	Z+9, r1	; 0x09
    212a:	d6 01       	movw	r26, r12
    212c:	1a 96       	adiw	r26, 0x0a	; 10
    212e:	1d 92       	st	X+, r1
    2130:	1d 92       	st	X+, r1
    2132:	1d 92       	st	X+, r1
    2134:	1c 92       	st	X, r1
    2136:	1d 97       	sbiw	r26, 0x0d	; 13
    2138:	99 24       	eor	r9, r9
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    213a:	38 01       	movw	r6, r16
    213c:	41 c0       	rjmp	.+130    	; 0x21c0 <_ZN6SdFile4openEPS_PKch+0x100>
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    213e:	c6 01       	movw	r24, r12
    2140:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN6SdFile12readDirCacheEv>
    2144:	fc 01       	movw	r30, r24
    if (p == NULL) return false;
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	09 f4       	brne	.+2      	; 0x214c <_ZN6SdFile4openEPS_PKch+0x8c>
    214a:	ab c0       	rjmp	.+342    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    214c:	85 e0       	ldi	r24, 0x05	; 5
    214e:	16 95       	lsr	r17
    2150:	07 95       	ror	r16
    2152:	f7 94       	ror	r15
    2154:	e7 94       	ror	r14
    2156:	8a 95       	dec	r24
    2158:	d1 f7       	brne	.-12     	; 0x214e <_ZN6SdFile4openEPS_PKch+0x8e>
    215a:	1e 2d       	mov	r17, r14
    215c:	1f 70       	andi	r17, 0x0F	; 15
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    215e:	80 81       	ld	r24, Z
    2160:	88 23       	and	r24, r24
    2162:	11 f0       	breq	.+4      	; 0x2168 <_ZN6SdFile4openEPS_PKch+0xa8>
    2164:	85 3e       	cpi	r24, 0xE5	; 229
    2166:	d1 f4       	brne	.+52     	; 0x219c <_ZN6SdFile4openEPS_PKch+0xdc>
      // remember first empty slot
      if (!emptyFound) {
    2168:	99 20       	and	r9, r9
    216a:	91 f4       	brne	.+36     	; 0x2190 <_ZN6SdFile4openEPS_PKch+0xd0>
        emptyFound = true;
        dirIndex_ = index;
    216c:	d5 01       	movw	r26, r10
    216e:	52 96       	adiw	r26, 0x12	; 18
    2170:	1c 93       	st	X, r17
    2172:	52 97       	sbiw	r26, 0x12	; 18
        dirBlock_ = SdVolume::cacheBlockNumber_;
    2174:	20 91 4a 02 	lds	r18, 0x024A
    2178:	30 91 4b 02 	lds	r19, 0x024B
    217c:	40 91 4c 02 	lds	r20, 0x024C
    2180:	50 91 4d 02 	lds	r21, 0x024D
    2184:	1e 96       	adiw	r26, 0x0e	; 14
    2186:	2d 93       	st	X+, r18
    2188:	3d 93       	st	X+, r19
    218a:	4d 93       	st	X+, r20
    218c:	5c 93       	st	X, r21
    218e:	51 97       	sbiw	r26, 0x11	; 17
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    2190:	80 81       	ld	r24, Z
    2192:	88 23       	and	r24, r24
    2194:	99 f4       	brne	.+38     	; 0x21bc <_ZN6SdFile4openEPS_PKch+0xfc>
    2196:	99 24       	eor	r9, r9
    2198:	93 94       	inc	r9
    219a:	21 c0       	rjmp	.+66     	; 0x21de <_ZN6SdFile4openEPS_PKch+0x11e>
    } else if (!memcmp(dname, p->name, 11)) {
    219c:	c3 01       	movw	r24, r6
    219e:	bf 01       	movw	r22, r30
    21a0:	4b e0       	ldi	r20, 0x0B	; 11
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <memcmp>
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	51 f4       	brne	.+20     	; 0x21c0 <_ZN6SdFile4openEPS_PKch+0x100>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    21ac:	88 2d       	mov	r24, r8
    21ae:	80 73       	andi	r24, 0x30	; 48
    21b0:	80 33       	cpi	r24, 0x30	; 48
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <_ZN6SdFile4openEPS_PKch+0xf6>
    21b4:	76 c0       	rjmp	.+236    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    21b6:	c5 01       	movw	r24, r10
    21b8:	61 2f       	mov	r22, r17
    21ba:	6f c0       	rjmp	.+222    	; 0x229a <_ZN6SdFile4openEPS_PKch+0x1da>
    21bc:	99 24       	eor	r9, r9
    21be:	93 94       	inc	r9

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    21c0:	f6 01       	movw	r30, r12
    21c2:	e2 84       	ldd	r14, Z+10	; 0x0a
    21c4:	f3 84       	ldd	r15, Z+11	; 0x0b
    21c6:	04 85       	ldd	r16, Z+12	; 0x0c
    21c8:	15 85       	ldd	r17, Z+13	; 0x0d
    21ca:	83 89       	ldd	r24, Z+19	; 0x13
    21cc:	94 89       	ldd	r25, Z+20	; 0x14
    21ce:	a5 89       	ldd	r26, Z+21	; 0x15
    21d0:	b6 89       	ldd	r27, Z+22	; 0x16
    21d2:	e8 16       	cp	r14, r24
    21d4:	f9 06       	cpc	r15, r25
    21d6:	0a 07       	cpc	r16, r26
    21d8:	1b 07       	cpc	r17, r27
    21da:	08 f4       	brcc	.+2      	; 0x21de <_ZN6SdFile4openEPS_PKch+0x11e>
    21dc:	b0 cf       	rjmp	.-160    	; 0x213e <_ZN6SdFile4openEPS_PKch+0x7e>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    21de:	88 2d       	mov	r24, r8
    21e0:	82 71       	andi	r24, 0x12	; 18
    21e2:	82 31       	cpi	r24, 0x12	; 18
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <_ZN6SdFile4openEPS_PKch+0x128>
    21e6:	5d c0       	rjmp	.+186    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    21e8:	99 20       	and	r9, r9
    21ea:	41 f0       	breq	.+16     	; 0x21fc <_ZN6SdFile4openEPS_PKch+0x13c>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    21ec:	c5 01       	movw	r24, r10
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	0e 94 01 0b 	call	0x1602	; 0x1602 <_ZN6SdFile13cacheDirEntryEh>
    21f4:	8c 01       	movw	r16, r24
    if (!p) return false;
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	89 f4       	brne	.+34     	; 0x221c <_ZN6SdFile4openEPS_PKch+0x15c>
    21fa:	53 c0       	rjmp	.+166    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    21fc:	d6 01       	movw	r26, r12
    21fe:	15 96       	adiw	r26, 0x05	; 5
    2200:	8c 91       	ld	r24, X
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	09 f4       	brne	.+2      	; 0x2208 <_ZN6SdFile4openEPS_PKch+0x148>
    2206:	4d c0       	rjmp	.+154    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    2208:	c6 01       	movw	r24, r12
    220a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN6SdFile13addDirClusterEv>
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <_ZN6SdFile4openEPS_PKch+0x154>
    2212:	47 c0       	rjmp	.+142    	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>

    // use first entry in cluster
    dirIndex_ = 0;
    2214:	f5 01       	movw	r30, r10
    2216:	12 8a       	std	Z+18, r1	; 0x12
    2218:	0d ec       	ldi	r16, 0xCD	; 205
    221a:	12 e0       	ldi	r17, 0x02	; 2
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    221c:	80 e2       	ldi	r24, 0x20	; 32
    221e:	d8 01       	movw	r26, r16
    2220:	1d 92       	st	X+, r1
    2222:	8a 95       	dec	r24
    2224:	e9 f7       	brne	.-6      	; 0x2220 <_ZN6SdFile4openEPS_PKch+0x160>
  memcpy(p->name, dname, 11);
    2226:	d8 01       	movw	r26, r16
    2228:	fe 01       	movw	r30, r28
    222a:	31 96       	adiw	r30, 0x01	; 1
    222c:	8b e0       	ldi	r24, 0x0B	; 11
    222e:	01 90       	ld	r0, Z+
    2230:	0d 92       	st	X+, r0
    2232:	81 50       	subi	r24, 0x01	; 1
    2234:	e1 f7       	brne	.-8      	; 0x222e <_ZN6SdFile4openEPS_PKch+0x16e>

  // set timestamps
  if (dateTime_) {
    2236:	e0 91 cb 02 	lds	r30, 0x02CB
    223a:	f0 91 cc 02 	lds	r31, 0x02CC
    223e:	30 97       	sbiw	r30, 0x00	; 0
    2240:	39 f0       	breq	.+14     	; 0x2250 <_ZN6SdFile4openEPS_PKch+0x190>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    2242:	b8 01       	movw	r22, r16
    2244:	62 5f       	subi	r22, 0xF2	; 242
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	c8 01       	movw	r24, r16
    224a:	40 96       	adiw	r24, 0x10	; 16
    224c:	09 95       	icall
    224e:	09 c0       	rjmp	.+18     	; 0x2262 <_ZN6SdFile4openEPS_PKch+0x1a2>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    2250:	81 e2       	ldi	r24, 0x21	; 33
    2252:	98 e2       	ldi	r25, 0x28	; 40
    2254:	f8 01       	movw	r30, r16
    2256:	91 8b       	std	Z+17, r25	; 0x11
    2258:	80 8b       	std	Z+16, r24	; 0x10
    p->creationTime = FAT_DEFAULT_TIME;
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	98 e0       	ldi	r25, 0x08	; 8
    225e:	97 87       	std	Z+15, r25	; 0x0f
    2260:	86 87       	std	Z+14, r24	; 0x0e
  }
  p->lastAccessDate = p->creationDate;
    2262:	d8 01       	movw	r26, r16
    2264:	50 96       	adiw	r26, 0x10	; 16
    2266:	8d 91       	ld	r24, X+
    2268:	9c 91       	ld	r25, X
    226a:	51 97       	sbiw	r26, 0x11	; 17
    226c:	53 96       	adiw	r26, 0x13	; 19
    226e:	9c 93       	st	X, r25
    2270:	8e 93       	st	-X, r24
    2272:	52 97       	sbiw	r26, 0x12	; 18
  p->lastWriteDate = p->creationDate;
    2274:	59 96       	adiw	r26, 0x19	; 25
    2276:	9c 93       	st	X, r25
    2278:	8e 93       	st	-X, r24
    227a:	58 97       	sbiw	r26, 0x18	; 24
  p->lastWriteTime = p->creationTime;
    227c:	1e 96       	adiw	r26, 0x0e	; 14
    227e:	8d 91       	ld	r24, X+
    2280:	9c 91       	ld	r25, X
    2282:	1f 97       	sbiw	r26, 0x0f	; 15
    2284:	57 96       	adiw	r26, 0x17	; 23
    2286:	9c 93       	st	X, r25
    2288:	8e 93       	st	-X, r24
    228a:	56 97       	sbiw	r26, 0x16	; 22

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    228c:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN8SdVolume10cacheFlushEv>
    2290:	88 23       	and	r24, r24
    2292:	39 f0       	breq	.+14     	; 0x22a2 <_ZN6SdFile4openEPS_PKch+0x1e2>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    2294:	c5 01       	movw	r24, r10
    2296:	f5 01       	movw	r30, r10
    2298:	62 89       	ldd	r22, Z+18	; 0x12
    229a:	48 2d       	mov	r20, r8
    229c:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN6SdFile15openCachedEntryEhh>
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <_ZN6SdFile4openEPS_PKch+0x1e4>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
}
    22a4:	2b 96       	adiw	r28, 0x0b	; 11
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	ef 90       	pop	r14
    22bc:	df 90       	pop	r13
    22be:	cf 90       	pop	r12
    22c0:	bf 90       	pop	r11
    22c2:	af 90       	pop	r10
    22c4:	9f 90       	pop	r9
    22c6:	8f 90       	pop	r8
    22c8:	7f 90       	pop	r7
    22ca:	6f 90       	pop	r6
    22cc:	08 95       	ret

000022ce <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    22ce:	80 91 cf 04 	lds	r24, 0x04CF
    22d2:	88 23       	and	r24, r24
    22d4:	99 f1       	breq	.+102    	; 0x233c <_ZN8SdVolume10cacheFlushEv+0x6e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    22d6:	40 91 4a 02 	lds	r20, 0x024A
    22da:	50 91 4b 02 	lds	r21, 0x024B
    22de:	60 91 4c 02 	lds	r22, 0x024C
    22e2:	70 91 4d 02 	lds	r23, 0x024D
    22e6:	80 91 cd 04 	lds	r24, 0x04CD
    22ea:	90 91 ce 04 	lds	r25, 0x04CE
    22ee:	2d ec       	ldi	r18, 0xCD	; 205
    22f0:	32 e0       	ldi	r19, 0x02	; 2
    22f2:	0e 94 0d 09 	call	0x121a	; 0x121a <_ZN7Sd2Card10writeBlockEmPKh>
    22f6:	88 23       	and	r24, r24
    22f8:	19 f1       	breq	.+70     	; 0x2340 <_ZN8SdVolume10cacheFlushEv+0x72>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    22fa:	40 91 d0 04 	lds	r20, 0x04D0
    22fe:	50 91 d1 04 	lds	r21, 0x04D1
    2302:	60 91 d2 04 	lds	r22, 0x04D2
    2306:	70 91 d3 04 	lds	r23, 0x04D3
    230a:	41 15       	cp	r20, r1
    230c:	51 05       	cpc	r21, r1
    230e:	61 05       	cpc	r22, r1
    2310:	71 05       	cpc	r23, r1
    2312:	91 f0       	breq	.+36     	; 0x2338 <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2314:	80 91 cd 04 	lds	r24, 0x04CD
    2318:	90 91 ce 04 	lds	r25, 0x04CE
    231c:	2d ec       	ldi	r18, 0xCD	; 205
    231e:	32 e0       	ldi	r19, 0x02	; 2
    2320:	0e 94 0d 09 	call	0x121a	; 0x121a <_ZN7Sd2Card10writeBlockEmPKh>
    2324:	88 23       	and	r24, r24
    2326:	61 f0       	breq	.+24     	; 0x2340 <_ZN8SdVolume10cacheFlushEv+0x72>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2328:	10 92 d0 04 	sts	0x04D0, r1
    232c:	10 92 d1 04 	sts	0x04D1, r1
    2330:	10 92 d2 04 	sts	0x04D2, r1
    2334:	10 92 d3 04 	sts	0x04D3, r1
    }
    cacheDirty_ = 0;
    2338:	10 92 cf 04 	sts	0x04CF, r1
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	08 95       	ret
    2340:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
    2342:	08 95       	ret

00002344 <_ZN8SdVolume14cacheZeroBlockEm>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2344:	ef 92       	push	r14
    2346:	ff 92       	push	r15
    2348:	0f 93       	push	r16
    234a:	1f 93       	push	r17
    234c:	7b 01       	movw	r14, r22
    234e:	8c 01       	movw	r16, r24
  if (!cacheFlush()) return false;
    2350:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN8SdVolume10cacheFlushEv>
    2354:	88 23       	and	r24, r24
    2356:	a9 f0       	breq	.+42     	; 0x2382 <_ZN8SdVolume14cacheZeroBlockEm+0x3e>
    2358:	ed ec       	ldi	r30, 0xCD	; 205
    235a:	f2 e0       	ldi	r31, 0x02	; 2

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    235c:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	ed 3c       	cpi	r30, 0xCD	; 205
    2362:	f8 07       	cpc	r31, r24
    2364:	d9 f7       	brne	.-10     	; 0x235c <_ZN8SdVolume14cacheZeroBlockEm+0x18>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2366:	e0 92 4a 02 	sts	0x024A, r14
    236a:	f0 92 4b 02 	sts	0x024B, r15
    236e:	00 93 4c 02 	sts	0x024C, r16
    2372:	10 93 4d 02 	sts	0x024D, r17
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2376:	80 91 cf 04 	lds	r24, 0x04CF
    237a:	81 60       	ori	r24, 0x01	; 1
    237c:	80 93 cf 04 	sts	0x04CF, r24
    2380:	81 e0       	ldi	r24, 0x01	; 1
  cacheSetDirty();
  return true;
}
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	08 95       	ret

0000238c <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	7b 01       	movw	r14, r22
    2398:	8c 01       	movw	r16, r24
    239a:	d4 2e       	mov	r13, r20
  if (cacheBlockNumber_ != blockNumber) {
    239c:	80 91 4a 02 	lds	r24, 0x024A
    23a0:	90 91 4b 02 	lds	r25, 0x024B
    23a4:	a0 91 4c 02 	lds	r26, 0x024C
    23a8:	b0 91 4d 02 	lds	r27, 0x024D
    23ac:	8e 15       	cp	r24, r14
    23ae:	9f 05       	cpc	r25, r15
    23b0:	a0 07       	cpc	r26, r16
    23b2:	b1 07       	cpc	r27, r17
    23b4:	c1 f0       	breq	.+48     	; 0x23e6 <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
    23b6:	0e 94 67 11 	call	0x22ce	; 0x22ce <_ZN8SdVolume10cacheFlushEv>
    23ba:	88 23       	and	r24, r24
    23bc:	d9 f0       	breq	.+54     	; 0x23f4 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    23be:	80 91 cd 04 	lds	r24, 0x04CD
    23c2:	90 91 ce 04 	lds	r25, 0x04CE
    23c6:	b8 01       	movw	r22, r16
    23c8:	a7 01       	movw	r20, r14
    23ca:	2d ec       	ldi	r18, 0xCD	; 205
    23cc:	32 e0       	ldi	r19, 0x02	; 2
    23ce:	0e 94 07 0a 	call	0x140e	; 0x140e <_ZN7Sd2Card9readBlockEmPh>
    23d2:	88 23       	and	r24, r24
    23d4:	79 f0       	breq	.+30     	; 0x23f4 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    cacheBlockNumber_ = blockNumber;
    23d6:	e0 92 4a 02 	sts	0x024A, r14
    23da:	f0 92 4b 02 	sts	0x024B, r15
    23de:	00 93 4c 02 	sts	0x024C, r16
    23e2:	10 93 4d 02 	sts	0x024D, r17
  }
  cacheDirty_ |= action;
    23e6:	80 91 cf 04 	lds	r24, 0x04CF
    23ea:	8d 29       	or	r24, r13
    23ec:	80 93 cf 04 	sts	0x04CF, r24
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	01 c0       	rjmp	.+2      	; 0x23f6 <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
  return true;
    23f4:	80 e0       	ldi	r24, 0x00	; 0
}
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	08 95       	ret

00002402 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2402:	4f 92       	push	r4
    2404:	5f 92       	push	r5
    2406:	6f 92       	push	r6
    2408:	7f 92       	push	r7
    240a:	8f 92       	push	r8
    240c:	9f 92       	push	r9
    240e:	af 92       	push	r10
    2410:	bf 92       	push	r11
    2412:	cf 92       	push	r12
    2414:	df 92       	push	r13
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	ec 01       	movw	r28, r24
    2424:	6a 01       	movw	r12, r20
    2426:	7b 01       	movw	r14, r22
    2428:	28 01       	movw	r4, r16
    242a:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    242c:	42 30       	cpi	r20, 0x02	; 2
    242e:	51 05       	cpc	r21, r1
    2430:	61 05       	cpc	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	08 f4       	brcc	.+2      	; 0x2438 <_ZN8SdVolume6fatPutEmm+0x36>
    2436:	6f c0       	rjmp	.+222    	; 0x2516 <_ZN8SdVolume6fatPutEmm+0x114>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	ab 85       	ldd	r26, Y+11	; 0x0b
    243e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	a1 1d       	adc	r26, r1
    2444:	b1 1d       	adc	r27, r1
    2446:	84 17       	cp	r24, r20
    2448:	95 07       	cpc	r25, r21
    244a:	a6 07       	cpc	r26, r22
    244c:	b7 07       	cpc	r27, r23
    244e:	08 f4       	brcc	.+2      	; 0x2452 <_ZN8SdVolume6fatPutEmm+0x50>
    2450:	62 c0       	rjmp	.+196    	; 0x2516 <_ZN8SdVolume6fatPutEmm+0x114>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2452:	2b 89       	ldd	r18, Y+19	; 0x13
    2454:	3c 89       	ldd	r19, Y+20	; 0x14
    2456:	4d 89       	ldd	r20, Y+21	; 0x15
    2458:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    245a:	8f 89       	ldd	r24, Y+23	; 0x17
    245c:	80 31       	cpi	r24, 0x10	; 16
    245e:	29 f4       	brne	.+10     	; 0x246a <_ZN8SdVolume6fatPutEmm+0x68>
    2460:	99 27       	eor	r25, r25
    2462:	8f 2d       	mov	r24, r15
    2464:	7e 2d       	mov	r23, r14
    2466:	6d 2d       	mov	r22, r13
    2468:	09 c0       	rjmp	.+18     	; 0x247c <_ZN8SdVolume6fatPutEmm+0x7a>
    246a:	c7 01       	movw	r24, r14
    246c:	b6 01       	movw	r22, r12
    246e:	17 e0       	ldi	r17, 0x07	; 7
    2470:	96 95       	lsr	r25
    2472:	87 95       	ror	r24
    2474:	77 95       	ror	r23
    2476:	67 95       	ror	r22
    2478:	1a 95       	dec	r17
    247a:	d1 f7       	brne	.-12     	; 0x2470 <_ZN8SdVolume6fatPutEmm+0x6e>
    247c:	4b 01       	movw	r8, r22
    247e:	5c 01       	movw	r10, r24
    2480:	82 0e       	add	r8, r18
    2482:	93 1e       	adc	r9, r19
    2484:	a4 1e       	adc	r10, r20
    2486:	b5 1e       	adc	r11, r21

  if (lba != cacheBlockNumber_) {
    2488:	80 91 4a 02 	lds	r24, 0x024A
    248c:	90 91 4b 02 	lds	r25, 0x024B
    2490:	a0 91 4c 02 	lds	r26, 0x024C
    2494:	b0 91 4d 02 	lds	r27, 0x024D
    2498:	88 16       	cp	r8, r24
    249a:	99 06       	cpc	r9, r25
    249c:	aa 06       	cpc	r10, r26
    249e:	bb 06       	cpc	r11, r27
    24a0:	39 f0       	breq	.+14     	; 0x24b0 <_ZN8SdVolume6fatPutEmm+0xae>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    24a2:	c5 01       	movw	r24, r10
    24a4:	b4 01       	movw	r22, r8
    24a6:	40 e0       	ldi	r20, 0x00	; 0
    24a8:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN8SdVolume13cacheRawBlockEmh>
    24ac:	88 23       	and	r24, r24
    24ae:	99 f1       	breq	.+102    	; 0x2516 <_ZN8SdVolume6fatPutEmm+0x114>
  }
  // store entry
  if (fatType_ == 16) {
    24b0:	8f 89       	ldd	r24, Y+23	; 0x17
    24b2:	80 31       	cpi	r24, 0x10	; 16
    24b4:	49 f4       	brne	.+18     	; 0x24c8 <_ZN8SdVolume6fatPutEmm+0xc6>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    24b6:	f6 01       	movw	r30, r12
    24b8:	f0 70       	andi	r31, 0x00	; 0
    24ba:	ee 0f       	add	r30, r30
    24bc:	ff 1f       	adc	r31, r31
    24be:	e3 53       	subi	r30, 0x33	; 51
    24c0:	fd 4f       	sbci	r31, 0xFD	; 253
    24c2:	51 82       	std	Z+1, r5	; 0x01
    24c4:	40 82       	st	Z, r4
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <_ZN8SdVolume6fatPutEmm+0xe0>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    24c8:	f6 01       	movw	r30, r12
    24ca:	ef 77       	andi	r30, 0x7F	; 127
    24cc:	f0 70       	andi	r31, 0x00	; 0
    24ce:	ee 0f       	add	r30, r30
    24d0:	ff 1f       	adc	r31, r31
    24d2:	ee 0f       	add	r30, r30
    24d4:	ff 1f       	adc	r31, r31
    24d6:	e3 53       	subi	r30, 0x33	; 51
    24d8:	fd 4f       	sbci	r31, 0xFD	; 253
    24da:	40 82       	st	Z, r4
    24dc:	51 82       	std	Z+1, r5	; 0x01
    24de:	62 82       	std	Z+2, r6	; 0x02
    24e0:	73 82       	std	Z+3, r7	; 0x03
    24e2:	80 91 cf 04 	lds	r24, 0x04CF
    24e6:	81 60       	ori	r24, 0x01	; 1
    24e8:	80 93 cf 04 	sts	0x04CF, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    24ec:	8a 89       	ldd	r24, Y+18	; 0x12
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	80 f0       	brcs	.+32     	; 0x2512 <_ZN8SdVolume6fatPutEmm+0x110>
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	af 81       	ldd	r26, Y+7	; 0x07
    24f8:	b8 85       	ldd	r27, Y+8	; 0x08
    24fa:	88 0e       	add	r8, r24
    24fc:	99 1e       	adc	r9, r25
    24fe:	aa 1e       	adc	r10, r26
    2500:	bb 1e       	adc	r11, r27
    2502:	80 92 d0 04 	sts	0x04D0, r8
    2506:	90 92 d1 04 	sts	0x04D1, r9
    250a:	a0 92 d2 04 	sts	0x04D2, r10
    250e:	b0 92 d3 04 	sts	0x04D3, r11
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	01 c0       	rjmp	.+2      	; 0x2518 <_ZN8SdVolume6fatPutEmm+0x116>
    2516:	80 e0       	ldi	r24, 0x00	; 0
  return true;
}
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	7f 90       	pop	r7
    2532:	6f 90       	pop	r6
    2534:	5f 90       	pop	r5
    2536:	4f 90       	pop	r4
    2538:	08 95       	ret

0000253a <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    253a:	cf 92       	push	r12
    253c:	df 92       	push	r13
    253e:	ef 92       	push	r14
    2540:	ff 92       	push	r15
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	ec 01       	movw	r28, r24
    254c:	7a 01       	movw	r14, r20
    254e:	8b 01       	movw	r16, r22
    2550:	69 01       	movw	r12, r18
  if (cluster > (clusterCount_ + 1)) return false;
    2552:	89 85       	ldd	r24, Y+9	; 0x09
    2554:	9a 85       	ldd	r25, Y+10	; 0x0a
    2556:	ab 85       	ldd	r26, Y+11	; 0x0b
    2558:	bc 85       	ldd	r27, Y+12	; 0x0c
    255a:	01 96       	adiw	r24, 0x01	; 1
    255c:	a1 1d       	adc	r26, r1
    255e:	b1 1d       	adc	r27, r1
    2560:	84 17       	cp	r24, r20
    2562:	95 07       	cpc	r25, r21
    2564:	a6 07       	cpc	r26, r22
    2566:	b7 07       	cpc	r27, r23
    2568:	08 f4       	brcc	.+2      	; 0x256c <_ZNK8SdVolume6fatGetEmPm+0x32>
    256a:	50 c0       	rjmp	.+160    	; 0x260c <_ZNK8SdVolume6fatGetEmPm+0xd2>
  uint32_t lba = fatStartBlock_;
    256c:	2b 89       	ldd	r18, Y+19	; 0x13
    256e:	3c 89       	ldd	r19, Y+20	; 0x14
    2570:	4d 89       	ldd	r20, Y+21	; 0x15
    2572:	5e 89       	ldd	r21, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2574:	8f 89       	ldd	r24, Y+23	; 0x17
    2576:	80 31       	cpi	r24, 0x10	; 16
    2578:	29 f4       	brne	.+10     	; 0x2584 <_ZNK8SdVolume6fatGetEmPm+0x4a>
    257a:	99 27       	eor	r25, r25
    257c:	81 2f       	mov	r24, r17
    257e:	70 2f       	mov	r23, r16
    2580:	6f 2d       	mov	r22, r15
    2582:	09 c0       	rjmp	.+18     	; 0x2596 <_ZNK8SdVolume6fatGetEmPm+0x5c>
    2584:	c8 01       	movw	r24, r16
    2586:	b7 01       	movw	r22, r14
    2588:	e7 e0       	ldi	r30, 0x07	; 7
    258a:	96 95       	lsr	r25
    258c:	87 95       	ror	r24
    258e:	77 95       	ror	r23
    2590:	67 95       	ror	r22
    2592:	ea 95       	dec	r30
    2594:	d1 f7       	brne	.-12     	; 0x258a <_ZNK8SdVolume6fatGetEmPm+0x50>
    2596:	26 0f       	add	r18, r22
    2598:	37 1f       	adc	r19, r23
    259a:	48 1f       	adc	r20, r24
    259c:	59 1f       	adc	r21, r25
  if (lba != cacheBlockNumber_) {
    259e:	80 91 4a 02 	lds	r24, 0x024A
    25a2:	90 91 4b 02 	lds	r25, 0x024B
    25a6:	a0 91 4c 02 	lds	r26, 0x024C
    25aa:	b0 91 4d 02 	lds	r27, 0x024D
    25ae:	28 17       	cp	r18, r24
    25b0:	39 07       	cpc	r19, r25
    25b2:	4a 07       	cpc	r20, r26
    25b4:	5b 07       	cpc	r21, r27
    25b6:	39 f0       	breq	.+14     	; 0x25c6 <_ZNK8SdVolume6fatGetEmPm+0x8c>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    25b8:	ca 01       	movw	r24, r20
    25ba:	b9 01       	movw	r22, r18
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	0e 94 c6 11 	call	0x238c	; 0x238c <_ZN8SdVolume13cacheRawBlockEmh>
    25c2:	88 23       	and	r24, r24
    25c4:	19 f1       	breq	.+70     	; 0x260c <_ZNK8SdVolume6fatGetEmPm+0xd2>
  }
  if (fatType_ == 16) {
    25c6:	8f 89       	ldd	r24, Y+23	; 0x17
    25c8:	80 31       	cpi	r24, 0x10	; 16
    25ca:	59 f4       	brne	.+22     	; 0x25e2 <_ZNK8SdVolume6fatGetEmPm+0xa8>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    25cc:	f7 01       	movw	r30, r14
    25ce:	f0 70       	andi	r31, 0x00	; 0
    25d0:	ee 0f       	add	r30, r30
    25d2:	ff 1f       	adc	r31, r31
    25d4:	e3 53       	subi	r30, 0x33	; 51
    25d6:	fd 4f       	sbci	r31, 0xFD	; 253
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	0e c0       	rjmp	.+28     	; 0x25fe <_ZNK8SdVolume6fatGetEmPm+0xc4>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    25e2:	f7 01       	movw	r30, r14
    25e4:	ef 77       	andi	r30, 0x7F	; 127
    25e6:	f0 70       	andi	r31, 0x00	; 0
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	ee 0f       	add	r30, r30
    25ee:	ff 1f       	adc	r31, r31
    25f0:	e3 53       	subi	r30, 0x33	; 51
    25f2:	fd 4f       	sbci	r31, 0xFD	; 253
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	a2 81       	ldd	r26, Z+2	; 0x02
    25fa:	b3 81       	ldd	r27, Z+3	; 0x03
    25fc:	bf 70       	andi	r27, 0x0F	; 15
    25fe:	f6 01       	movw	r30, r12
    2600:	80 83       	st	Z, r24
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	a2 83       	std	Z+2, r26	; 0x02
    2606:	b3 83       	std	Z+3, r27	; 0x03
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	01 c0       	rjmp	.+2      	; 0x260e <_ZNK8SdVolume6fatGetEmPm+0xd4>
    260c:	80 e0       	ldi	r24, 0x00	; 0
  }
  return true;
}
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	ff 90       	pop	r15
    2618:	ef 90       	pop	r14
    261a:	df 90       	pop	r13
    261c:	cf 90       	pop	r12
    261e:	08 95       	ret

00002620 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    2620:	af 92       	push	r10
    2622:	bf 92       	push	r11
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	00 d0       	rcall	.+0      	; 0x2636 <_ZN8SdVolume9freeChainEm+0x16>
    2636:	00 d0       	rcall	.+0      	; 0x2638 <_ZN8SdVolume9freeChainEm+0x18>
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	6c 01       	movw	r12, r24
    263e:	7a 01       	movw	r14, r20
    2640:	8b 01       	movw	r16, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	a0 e0       	ldi	r26, 0x00	; 0
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	f6 01       	movw	r30, r12
    264c:	80 83       	st	Z, r24
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	a2 83       	std	Z+2, r26	; 0x02
    2652:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2654:	5e 01       	movw	r10, r28
    2656:	08 94       	sec
    2658:	a1 1c       	adc	r10, r1
    265a:	b1 1c       	adc	r11, r1
    265c:	c6 01       	movw	r24, r12
    265e:	b8 01       	movw	r22, r16
    2660:	a7 01       	movw	r20, r14
    2662:	95 01       	movw	r18, r10
    2664:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZNK8SdVolume6fatGetEmPm>
    2668:	88 23       	and	r24, r24
    266a:	19 f1       	breq	.+70     	; 0x26b2 <_ZN8SdVolume9freeChainEm+0x92>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    266c:	c6 01       	movw	r24, r12
    266e:	b8 01       	movw	r22, r16
    2670:	a7 01       	movw	r20, r14
    2672:	00 e0       	ldi	r16, 0x00	; 0
    2674:	10 e0       	ldi	r17, 0x00	; 0
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN8SdVolume6fatPutEmm>
    267e:	88 23       	and	r24, r24
    2680:	c1 f0       	breq	.+48     	; 0x26b2 <_ZN8SdVolume9freeChainEm+0x92>

    cluster = next;
    2682:	e9 80       	ldd	r14, Y+1	; 0x01
    2684:	fa 80       	ldd	r15, Y+2	; 0x02
    2686:	0b 81       	ldd	r16, Y+3	; 0x03
    2688:	1c 81       	ldd	r17, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    268a:	f6 01       	movw	r30, r12
    268c:	87 89       	ldd	r24, Z+23	; 0x17
    268e:	80 31       	cpi	r24, 0x10	; 16
    2690:	29 f0       	breq	.+10     	; 0x269c <_ZN8SdVolume9freeChainEm+0x7c>
    2692:	88 ef       	ldi	r24, 0xF8	; 248
    2694:	9f ef       	ldi	r25, 0xFF	; 255
    2696:	af ef       	ldi	r26, 0xFF	; 255
    2698:	bf e0       	ldi	r27, 0x0F	; 15
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <_ZN8SdVolume9freeChainEm+0x84>
    269c:	88 ef       	ldi	r24, 0xF8	; 248
    269e:	9f ef       	ldi	r25, 0xFF	; 255
    26a0:	a0 e0       	ldi	r26, 0x00	; 0
    26a2:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    26a4:	e8 16       	cp	r14, r24
    26a6:	f9 06       	cpc	r15, r25
    26a8:	0a 07       	cpc	r16, r26
    26aa:	1b 07       	cpc	r17, r27
    26ac:	b8 f2       	brcs	.-82     	; 0x265c <_ZN8SdVolume9freeChainEm+0x3c>
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	01 c0       	rjmp	.+2      	; 0x26b4 <_ZN8SdVolume9freeChainEm+0x94>
    26b2:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	1f 91       	pop	r17
    26c2:	0f 91       	pop	r16
    26c4:	ff 90       	pop	r15
    26c6:	ef 90       	pop	r14
    26c8:	df 90       	pop	r13
    26ca:	cf 90       	pop	r12
    26cc:	bf 90       	pop	r11
    26ce:	af 90       	pop	r10
    26d0:	08 95       	ret

000026d2 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    26d2:	4f 92       	push	r4
    26d4:	5f 92       	push	r5
    26d6:	6f 92       	push	r6
    26d8:	7f 92       	push	r7
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <_ZNK8SdVolume9chainSizeEmPm+0x22>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <_ZNK8SdVolume9chainSizeEmPm+0x24>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	6c 01       	movw	r12, r24
    26fc:	49 83       	std	Y+1, r20	; 0x01
    26fe:	5a 83       	std	Y+2, r21	; 0x02
    2700:	6b 83       	std	Y+3, r22	; 0x03
    2702:	7c 83       	std	Y+4, r23	; 0x04
    2704:	39 01       	movw	r6, r18
    2706:	ee 24       	eor	r14, r14
    2708:	ff 24       	eor	r15, r15
    270a:	87 01       	movw	r16, r14
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    270c:	2e 01       	movw	r4, r28
    270e:	08 94       	sec
    2710:	41 1c       	adc	r4, r1
    2712:	51 1c       	adc	r5, r1
    s += 512UL << clusterSizeShift_;
    2714:	81 2c       	mov	r8, r1
    2716:	a2 e0       	ldi	r26, 0x02	; 2
    2718:	9a 2e       	mov	r9, r26
    271a:	a1 2c       	mov	r10, r1
    271c:	b1 2c       	mov	r11, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    271e:	49 81       	ldd	r20, Y+1	; 0x01
    2720:	5a 81       	ldd	r21, Y+2	; 0x02
    2722:	6b 81       	ldd	r22, Y+3	; 0x03
    2724:	7c 81       	ldd	r23, Y+4	; 0x04
    2726:	c6 01       	movw	r24, r12
    2728:	92 01       	movw	r18, r4
    272a:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZNK8SdVolume6fatGetEmPm>
    272e:	88 23       	and	r24, r24
    2730:	51 f1       	breq	.+84     	; 0x2786 <_ZNK8SdVolume9chainSizeEmPm+0xb4>
    s += 512UL << clusterSizeShift_;
    2732:	d5 01       	movw	r26, r10
    2734:	c4 01       	movw	r24, r8
    2736:	f6 01       	movw	r30, r12
    2738:	05 84       	ldd	r0, Z+13	; 0x0d
    273a:	04 c0       	rjmp	.+8      	; 0x2744 <_ZNK8SdVolume9chainSizeEmPm+0x72>
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	aa 1f       	adc	r26, r26
    2742:	bb 1f       	adc	r27, r27
    2744:	0a 94       	dec	r0
    2746:	d2 f7       	brpl	.-12     	; 0x273c <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    2748:	e8 0e       	add	r14, r24
    274a:	f9 1e       	adc	r15, r25
    274c:	0a 1f       	adc	r16, r26
    274e:	1b 1f       	adc	r17, r27
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2750:	29 81       	ldd	r18, Y+1	; 0x01
    2752:	3a 81       	ldd	r19, Y+2	; 0x02
    2754:	4b 81       	ldd	r20, Y+3	; 0x03
    2756:	5c 81       	ldd	r21, Y+4	; 0x04
    2758:	87 89       	ldd	r24, Z+23	; 0x17
    275a:	80 31       	cpi	r24, 0x10	; 16
    275c:	29 f0       	breq	.+10     	; 0x2768 <_ZNK8SdVolume9chainSizeEmPm+0x96>
    275e:	88 ef       	ldi	r24, 0xF8	; 248
    2760:	9f ef       	ldi	r25, 0xFF	; 255
    2762:	af ef       	ldi	r26, 0xFF	; 255
    2764:	bf e0       	ldi	r27, 0x0F	; 15
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <_ZNK8SdVolume9chainSizeEmPm+0x9e>
    2768:	88 ef       	ldi	r24, 0xF8	; 248
    276a:	9f ef       	ldi	r25, 0xFF	; 255
    276c:	a0 e0       	ldi	r26, 0x00	; 0
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	28 17       	cp	r18, r24
    2772:	39 07       	cpc	r19, r25
    2774:	4a 07       	cpc	r20, r26
    2776:	5b 07       	cpc	r21, r27
    2778:	90 f2       	brcs	.-92     	; 0x271e <_ZNK8SdVolume9chainSizeEmPm+0x4c>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    277a:	f3 01       	movw	r30, r6
    277c:	e0 82       	st	Z, r14
    277e:	f1 82       	std	Z+1, r15	; 0x01
    2780:	02 83       	std	Z+2, r16	; 0x02
    2782:	13 83       	std	Z+3, r17	; 0x03
    2784:	81 e0       	ldi	r24, 0x01	; 1
  return true;
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
    2796:	ff 90       	pop	r15
    2798:	ef 90       	pop	r14
    279a:	df 90       	pop	r13
    279c:	cf 90       	pop	r12
    279e:	bf 90       	pop	r11
    27a0:	af 90       	pop	r10
    27a2:	9f 90       	pop	r9
    27a4:	8f 90       	pop	r8
    27a6:	7f 90       	pop	r7
    27a8:	6f 90       	pop	r6
    27aa:	5f 90       	pop	r5
    27ac:	4f 90       	pop	r4
    27ae:	08 95       	ret

000027b0 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    27b0:	2f 92       	push	r2
    27b2:	3f 92       	push	r3
    27b4:	4f 92       	push	r4
    27b6:	5f 92       	push	r5
    27b8:	6f 92       	push	r6
    27ba:	7f 92       	push	r7
    27bc:	8f 92       	push	r8
    27be:	9f 92       	push	r9
    27c0:	af 92       	push	r10
    27c2:	bf 92       	push	r11
    27c4:	cf 92       	push	r12
    27c6:	df 92       	push	r13
    27c8:	ef 92       	push	r14
    27ca:	ff 92       	push	r15
    27cc:	0f 93       	push	r16
    27ce:	1f 93       	push	r17
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	2f 97       	sbiw	r28, 0x0f	; 15
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	1c 01       	movw	r2, r24
    27e6:	4a 87       	std	Y+10, r20	; 0x0a
    27e8:	5b 87       	std	Y+11, r21	; 0x0b
    27ea:	6c 87       	std	Y+12, r22	; 0x0c
    27ec:	7d 87       	std	Y+13, r23	; 0x0d
    27ee:	3f 87       	std	Y+15, r19	; 0x0f
    27f0:	2e 87       	std	Y+14, r18	; 0x0e

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    27f2:	d9 01       	movw	r26, r18
    27f4:	0d 91       	ld	r16, X+
    27f6:	1d 91       	ld	r17, X+
    27f8:	2d 91       	ld	r18, X+
    27fa:	3c 91       	ld	r19, X
    27fc:	01 15       	cp	r16, r1
    27fe:	11 05       	cpc	r17, r1
    2800:	21 05       	cpc	r18, r1
    2802:	31 05       	cpc	r19, r1
    2804:	49 f0       	breq	.+18     	; 0x2818 <_ZN8SdVolume15allocContiguousEmPm+0x68>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2806:	48 01       	movw	r8, r16
    2808:	59 01       	movw	r10, r18
    280a:	08 94       	sec
    280c:	81 1c       	adc	r8, r1
    280e:	91 1c       	adc	r9, r1
    2810:	a1 1c       	adc	r10, r1
    2812:	b1 1c       	adc	r11, r1
    2814:	19 86       	std	Y+9, r1	; 0x09
    2816:	10 c0       	rjmp	.+32     	; 0x2838 <_ZN8SdVolume15allocContiguousEmPm+0x88>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2818:	fc 01       	movw	r30, r24
    281a:	80 80       	ld	r8, Z
    281c:	91 80       	ldd	r9, Z+1	; 0x01
    281e:	a2 80       	ldd	r10, Z+2	; 0x02
    2820:	b3 80       	ldd	r11, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2822:	19 86       	std	Y+9, r1	; 0x09
    2824:	8a 85       	ldd	r24, Y+10	; 0x0a
    2826:	9b 85       	ldd	r25, Y+11	; 0x0b
    2828:	ac 85       	ldd	r26, Y+12	; 0x0c
    282a:	bd 85       	ldd	r27, Y+13	; 0x0d
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	a1 05       	cpc	r26, r1
    2830:	b1 05       	cpc	r27, r1
    2832:	11 f4       	brne	.+4      	; 0x2838 <_ZN8SdVolume15allocContiguousEmPm+0x88>
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	99 87       	std	Y+9, r25	; 0x09
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2838:	d1 01       	movw	r26, r2
    283a:	19 96       	adiw	r26, 0x09	; 9
    283c:	8d 91       	ld	r24, X+
    283e:	9d 91       	ld	r25, X+
    2840:	0d 90       	ld	r0, X+
    2842:	bc 91       	ld	r27, X
    2844:	a0 2d       	mov	r26, r0
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	a1 1d       	adc	r26, r1
    284a:	b1 1d       	adc	r27, r1
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	af 83       	std	Y+7, r26	; 0x07
    2852:	b8 87       	std	Y+8, r27	; 0x08
    2854:	75 01       	movw	r14, r10
    2856:	64 01       	movw	r12, r8
    2858:	44 24       	eor	r4, r4
    285a:	55 24       	eor	r5, r5
    285c:	32 01       	movw	r6, r4
    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    285e:	8e 01       	movw	r16, r28
    2860:	0f 5f       	subi	r16, 0xFF	; 255
    2862:	1f 4f       	sbci	r17, 0xFF	; 255
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2864:	f1 01       	movw	r30, r2
    2866:	81 85       	ldd	r24, Z+9	; 0x09
    2868:	92 85       	ldd	r25, Z+10	; 0x0a
    286a:	a3 85       	ldd	r26, Z+11	; 0x0b
    286c:	b4 85       	ldd	r27, Z+12	; 0x0c
    286e:	48 16       	cp	r4, r24
    2870:	59 06       	cpc	r5, r25
    2872:	6a 06       	cpc	r6, r26
    2874:	7b 06       	cpc	r7, r27
    2876:	08 f0       	brcs	.+2      	; 0x287a <_ZN8SdVolume15allocContiguousEmPm+0xca>
    2878:	90 c0       	rjmp	.+288    	; 0x299a <_ZN8SdVolume15allocContiguousEmPm+0x1ea>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	af 81       	ldd	r26, Y+7	; 0x07
    2880:	b8 85       	ldd	r27, Y+8	; 0x08
    2882:	8c 15       	cp	r24, r12
    2884:	9d 05       	cpc	r25, r13
    2886:	ae 05       	cpc	r26, r14
    2888:	bf 05       	cpc	r27, r15
    288a:	50 f4       	brcc	.+20     	; 0x28a0 <_ZN8SdVolume15allocContiguousEmPm+0xf0>
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	88 2e       	mov	r8, r24
    2890:	91 2c       	mov	r9, r1
    2892:	a1 2c       	mov	r10, r1
    2894:	b1 2c       	mov	r11, r1
    2896:	b2 e0       	ldi	r27, 0x02	; 2
    2898:	cb 2e       	mov	r12, r27
    289a:	d1 2c       	mov	r13, r1
    289c:	e1 2c       	mov	r14, r1
    289e:	f1 2c       	mov	r15, r1
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    28a0:	c1 01       	movw	r24, r2
    28a2:	b7 01       	movw	r22, r14
    28a4:	a6 01       	movw	r20, r12
    28a6:	98 01       	movw	r18, r16
    28a8:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZNK8SdVolume6fatGetEmPm>
    28ac:	88 23       	and	r24, r24
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <_ZN8SdVolume15allocContiguousEmPm+0x102>
    28b0:	74 c0       	rjmp	.+232    	; 0x299a <_ZN8SdVolume15allocContiguousEmPm+0x1ea>

    if (f != 0) {
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	ab 81       	ldd	r26, Y+3	; 0x03
    28b8:	bc 81       	ldd	r27, Y+4	; 0x04
    28ba:	a7 01       	movw	r20, r14
    28bc:	96 01       	movw	r18, r12
    28be:	2f 5f       	subi	r18, 0xFF	; 255
    28c0:	3f 4f       	sbci	r19, 0xFF	; 255
    28c2:	4f 4f       	sbci	r20, 0xFF	; 255
    28c4:	5f 4f       	sbci	r21, 0xFF	; 255
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	a1 05       	cpc	r26, r1
    28ca:	b1 05       	cpc	r27, r1
    28cc:	19 f0       	breq	.+6      	; 0x28d4 <_ZN8SdVolume15allocContiguousEmPm+0x124>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    28ce:	49 01       	movw	r8, r18
    28d0:	5a 01       	movw	r10, r20
    28d2:	0d c0       	rjmp	.+26     	; 0x28ee <_ZN8SdVolume15allocContiguousEmPm+0x13e>
    } else if ((endCluster - bgnCluster + 1) == count) {
    28d4:	28 19       	sub	r18, r8
    28d6:	39 09       	sbc	r19, r9
    28d8:	4a 09       	sbc	r20, r10
    28da:	5b 09       	sbc	r21, r11
    28dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28de:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e0:	ac 85       	ldd	r26, Y+12	; 0x0c
    28e2:	bd 85       	ldd	r27, Y+13	; 0x0d
    28e4:	28 17       	cp	r18, r24
    28e6:	39 07       	cpc	r19, r25
    28e8:	4a 07       	cpc	r20, r26
    28ea:	5b 07       	cpc	r21, r27
    28ec:	59 f0       	breq	.+22     	; 0x2904 <_ZN8SdVolume15allocContiguousEmPm+0x154>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    28ee:	08 94       	sec
    28f0:	41 1c       	adc	r4, r1
    28f2:	51 1c       	adc	r5, r1
    28f4:	61 1c       	adc	r6, r1
    28f6:	71 1c       	adc	r7, r1
    28f8:	08 94       	sec
    28fa:	c1 1c       	adc	r12, r1
    28fc:	d1 1c       	adc	r13, r1
    28fe:	e1 1c       	adc	r14, r1
    2900:	f1 1c       	adc	r15, r1
    2902:	b0 cf       	rjmp	.-160    	; 0x2864 <_ZN8SdVolume15allocContiguousEmPm+0xb4>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2904:	c1 01       	movw	r24, r2
    2906:	a6 01       	movw	r20, r12
    2908:	b7 01       	movw	r22, r14
    290a:	0f ef       	ldi	r16, 0xFF	; 255
    290c:	1f ef       	ldi	r17, 0xFF	; 255
    290e:	2f ef       	ldi	r18, 0xFF	; 255
    2910:	3f e0       	ldi	r19, 0x0F	; 15
    2912:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2916:	88 23       	and	r24, r24
    2918:	99 f4       	brne	.+38     	; 0x2940 <_ZN8SdVolume15allocContiguousEmPm+0x190>
    291a:	3f c0       	rjmp	.+126    	; 0x299a <_ZN8SdVolume15allocContiguousEmPm+0x1ea>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    291c:	26 01       	movw	r4, r12
    291e:	37 01       	movw	r6, r14
    2920:	08 94       	sec
    2922:	41 08       	sbc	r4, r1
    2924:	51 08       	sbc	r5, r1
    2926:	61 08       	sbc	r6, r1
    2928:	71 08       	sbc	r7, r1
    292a:	c1 01       	movw	r24, r2
    292c:	b3 01       	movw	r22, r6
    292e:	a2 01       	movw	r20, r4
    2930:	97 01       	movw	r18, r14
    2932:	86 01       	movw	r16, r12
    2934:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN8SdVolume6fatPutEmm>
    2938:	88 23       	and	r24, r24
    293a:	79 f1       	breq	.+94     	; 0x299a <_ZN8SdVolume15allocContiguousEmPm+0x1ea>
    293c:	73 01       	movw	r14, r6
    293e:	62 01       	movw	r12, r4
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2940:	8c 14       	cp	r8, r12
    2942:	9d 04       	cpc	r9, r13
    2944:	ae 04       	cpc	r10, r14
    2946:	bf 04       	cpc	r11, r15
    2948:	48 f3       	brcs	.-46     	; 0x291c <_ZN8SdVolume15allocContiguousEmPm+0x16c>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    294a:	ae 85       	ldd	r26, Y+14	; 0x0e
    294c:	bf 85       	ldd	r27, Y+15	; 0x0f
    294e:	4d 91       	ld	r20, X+
    2950:	5d 91       	ld	r21, X+
    2952:	6d 91       	ld	r22, X+
    2954:	7c 91       	ld	r23, X
    2956:	41 15       	cp	r20, r1
    2958:	51 05       	cpc	r21, r1
    295a:	61 05       	cpc	r22, r1
    295c:	71 05       	cpc	r23, r1
    295e:	39 f0       	breq	.+14     	; 0x296e <_ZN8SdVolume15allocContiguousEmPm+0x1be>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    2960:	c1 01       	movw	r24, r2
    2962:	95 01       	movw	r18, r10
    2964:	84 01       	movw	r16, r8
    2966:	0e 94 01 12 	call	0x2402	; 0x2402 <_ZN8SdVolume6fatPutEmm>
    296a:	88 23       	and	r24, r24
    296c:	b1 f0       	breq	.+44     	; 0x299a <_ZN8SdVolume15allocContiguousEmPm+0x1ea>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    296e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2970:	ff 85       	ldd	r31, Y+15	; 0x0f
    2972:	80 82       	st	Z, r8
    2974:	91 82       	std	Z+1, r9	; 0x01
    2976:	a2 82       	std	Z+2, r10	; 0x02
    2978:	b3 82       	std	Z+3, r11	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    297a:	f9 85       	ldd	r31, Y+9	; 0x09
    297c:	ff 23       	and	r31, r31
    297e:	59 f0       	breq	.+22     	; 0x2996 <_ZN8SdVolume15allocContiguousEmPm+0x1e6>
    2980:	08 94       	sec
    2982:	81 1c       	adc	r8, r1
    2984:	91 1c       	adc	r9, r1
    2986:	a1 1c       	adc	r10, r1
    2988:	b1 1c       	adc	r11, r1
    298a:	d1 01       	movw	r26, r2
    298c:	8d 92       	st	X+, r8
    298e:	9d 92       	st	X+, r9
    2990:	ad 92       	st	X+, r10
    2992:	bc 92       	st	X, r11
    2994:	13 97       	sbiw	r26, 0x03	; 3
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	01 c0       	rjmp	.+2      	; 0x299c <_ZN8SdVolume15allocContiguousEmPm+0x1ec>
    299a:	80 e0       	ldi	r24, 0x00	; 0

  return true;
}
    299c:	2f 96       	adiw	r28, 0x0f	; 15
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	ef 90       	pop	r14
    29b4:	df 90       	pop	r13
    29b6:	cf 90       	pop	r12
    29b8:	bf 90       	pop	r11
    29ba:	af 90       	pop	r10
    29bc:	9f 90       	pop	r9
    29be:	8f 90       	pop	r8
    29c0:	7f 90       	pop	r7
    29c2:	6f 90       	pop	r6
    29c4:	5f 90       	pop	r5
    29c6:	4f 90       	pop	r4
    29c8:	3f 90       	pop	r3
    29ca:	2f 90       	pop	r2
    29cc:	08 95       	ret

000029ce <_GLOBAL__I_current_steps>:

double Z_STEPS_PER_INCH;
double Z_STEPS_PER_MM;

//default to inches for units
double xStepsPerUnit = X_STEPS_PER_MM;
    29ce:	80 91 8c 05 	lds	r24, 0x058C
    29d2:	90 91 8d 05 	lds	r25, 0x058D
    29d6:	a0 91 8e 05 	lds	r26, 0x058E
    29da:	b0 91 8f 05 	lds	r27, 0x058F
    29de:	80 93 a0 05 	sts	0x05A0, r24
    29e2:	90 93 a1 05 	sts	0x05A1, r25
    29e6:	a0 93 a2 05 	sts	0x05A2, r26
    29ea:	b0 93 a3 05 	sts	0x05A3, r27
double yStepsPerUnit = Y_STEPS_PER_MM;
    29ee:	80 91 94 05 	lds	r24, 0x0594
    29f2:	90 91 95 05 	lds	r25, 0x0595
    29f6:	a0 91 96 05 	lds	r26, 0x0596
    29fa:	b0 91 97 05 	lds	r27, 0x0597
    29fe:	80 93 a4 05 	sts	0x05A4, r24
    2a02:	90 93 a5 05 	sts	0x05A5, r25
    2a06:	a0 93 a6 05 	sts	0x05A6, r26
    2a0a:	b0 93 a7 05 	sts	0x05A7, r27
double zStepsPerUnit = Z_STEPS_PER_MM;
    2a0e:	80 91 9c 05 	lds	r24, 0x059C
    2a12:	90 91 9d 05 	lds	r25, 0x059D
    2a16:	a0 91 9e 05 	lds	r26, 0x059E
    2a1a:	b0 91 9f 05 	lds	r27, 0x059F
    2a1e:	80 93 a8 05 	sts	0x05A8, r24
    2a22:	90 93 a9 05 	sts	0x05A9, r25
    2a26:	a0 93 aa 05 	sts	0x05AA, r26
    2a2a:	b0 93 ab 05 	sts	0x05AB, r27

void resetLocation() {
	goToZMax(); // go to max height to keep bit out of the way
	goToYMin();
	goToXMin();
}
    2a2e:	08 95       	ret

00002a30 <_Z11read_switchi>:
	digitalWrite(step_pin, LOW);
	delayMicroseconds(5);
}

bool read_switch(int pin) {
	return digitalRead(pin) ^ SENSORS_INVERTING;
    2a30:	0e 94 f6 28 	call	0x51ec	; 0x51ec <digitalRead>
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	89 2b       	or	r24, r25
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <_Z11read_switchi+0xc>
    2a3a:	21 e0       	ldi	r18, 0x01	; 1
}
    2a3c:	82 2f       	mov	r24, r18
    2a3e:	08 95       	ret

00002a40 <_Z8can_stepiilli>:
	}

}

bool can_step(int min_pin, int max_pin, long current, long target,
		int direction) {
    2a40:	cf 92       	push	r12
    2a42:	df 92       	push	r13
    2a44:	ef 92       	push	r14
    2a46:	ff 92       	push	r15
    2a48:	0f 93       	push	r16
    2a4a:	1f 93       	push	r17
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
    2a50:	eb 01       	movw	r28, r22
	//stop us if we're on target
	if (target == current) {
    2a52:	e2 16       	cp	r14, r18
    2a54:	f3 06       	cpc	r15, r19
    2a56:	04 07       	cpc	r16, r20
    2a58:	15 07       	cpc	r17, r21
    2a5a:	61 f0       	breq	.+24     	; 0x2a74 <_Z8can_stepiilli+0x34>
		return false;
	}
	//stop us if we're at home and still going
	if (read_switch(min_pin) && !direction) {
    2a5c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_Z11read_switchi>
    2a60:	88 23       	and	r24, r24
    2a62:	91 f0       	breq	.+36     	; 0x2a88 <_Z8can_stepiilli+0x48>
    2a64:	c1 14       	cp	r12, r1
    2a66:	d1 04       	cpc	r13, r1
    2a68:	79 f4       	brne	.+30     	; 0x2a88 <_Z8can_stepiilli+0x48>
    2a6a:	04 c0       	rjmp	.+8      	; 0x2a74 <_Z8can_stepiilli+0x34>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	cd 28       	or	r12, r13
    2a70:	11 f4       	brne	.+4      	; 0x2a76 <_Z8can_stepiilli+0x36>
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <_Z8can_stepiilli+0x52>
		//	Serial.println(direction) ;
		//Serial.println("hit minimum pin");
		return false;
	}
	//stop us if we're at max and still going
	if (read_switch(max_pin) && direction) {
    2a74:	80 e0       	ldi	r24, 0x00	; 0
		//Serial.println("hit maximum pin");
		return false;
	}
	//default to being able to step
	return true;
}
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	1f 91       	pop	r17
    2a7c:	0f 91       	pop	r16
    2a7e:	ff 90       	pop	r15
    2a80:	ef 90       	pop	r14
    2a82:	df 90       	pop	r13
    2a84:	cf 90       	pop	r12
    2a86:	08 95       	ret
		//	Serial.println(direction) ;
		//Serial.println("hit minimum pin");
		return false;
	}
	//stop us if we're at max and still going
	if (read_switch(max_pin) && direction) {
    2a88:	ce 01       	movw	r24, r28
    2a8a:	0e 94 18 15 	call	0x2a30	; 0x2a30 <_Z11read_switchi>
    2a8e:	88 23       	and	r24, r24
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <_Z8can_stepiilli+0x2c>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	f0 cf       	rjmp	.-32     	; 0x2a76 <_Z8can_stepiilli+0x36>

00002a96 <_Z8canZStepv>:
bool canYStep() {
	return can_step(Y_MIN_PIN, Y_MAX_PIN, current_steps.y, target_steps.y,
			y_direction);
}

bool canZStep() {
    2a96:	cf 92       	push	r12
    2a98:	df 92       	push	r13
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
	return can_step(Z_MIN_PIN, Z_MAX_PIN, current_steps.z, target_steps.z,
			z_direction);
    2aa2:	20 91 dc 04 	lds	r18, 0x04DC
    2aa6:	30 91 dd 04 	lds	r19, 0x04DD
    2aaa:	40 91 de 04 	lds	r20, 0x04DE
    2aae:	50 91 df 04 	lds	r21, 0x04DF
    2ab2:	e0 90 e8 04 	lds	r14, 0x04E8
    2ab6:	f0 90 e9 04 	lds	r15, 0x04E9
    2aba:	00 91 ea 04 	lds	r16, 0x04EA
    2abe:	10 91 eb 04 	lds	r17, 0x04EB
    2ac2:	c0 90 57 02 	lds	r12, 0x0257
    2ac6:	d0 90 58 02 	lds	r13, 0x0258
    2aca:	80 e1       	ldi	r24, 0x10	; 16
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	63 e1       	ldi	r22, 0x13	; 19
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	0e 94 20 15 	call	0x2a40	; 0x2a40 <_Z8can_stepiilli>
}
    2ad6:	1f 91       	pop	r17
    2ad8:	0f 91       	pop	r16
    2ada:	ff 90       	pop	r15
    2adc:	ef 90       	pop	r14
    2ade:	df 90       	pop	r13
    2ae0:	cf 90       	pop	r12
    2ae2:	08 95       	ret

00002ae4 <_Z8canYStepv>:
bool canXStep() {
	return can_step(X_MIN_PIN, X_MAX_PIN, current_steps.x, target_steps.x,
			x_direction);
}

bool canYStep() {
    2ae4:	cf 92       	push	r12
    2ae6:	df 92       	push	r13
    2ae8:	ef 92       	push	r14
    2aea:	ff 92       	push	r15
    2aec:	0f 93       	push	r16
    2aee:	1f 93       	push	r17
	return can_step(Y_MIN_PIN, Y_MAX_PIN, current_steps.y, target_steps.y,
			y_direction);
    2af0:	20 91 d8 04 	lds	r18, 0x04D8
    2af4:	30 91 d9 04 	lds	r19, 0x04D9
    2af8:	40 91 da 04 	lds	r20, 0x04DA
    2afc:	50 91 db 04 	lds	r21, 0x04DB
    2b00:	e0 90 e4 04 	lds	r14, 0x04E4
    2b04:	f0 90 e5 04 	lds	r15, 0x04E5
    2b08:	00 91 e6 04 	lds	r16, 0x04E6
    2b0c:	10 91 e7 04 	lds	r17, 0x04E7
    2b10:	c0 90 55 02 	lds	r12, 0x0255
    2b14:	d0 90 56 02 	lds	r13, 0x0256
    2b18:	8f e0       	ldi	r24, 0x0F	; 15
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	62 e1       	ldi	r22, 0x12	; 18
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	0e 94 20 15 	call	0x2a40	; 0x2a40 <_Z8can_stepiilli>
}
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	ff 90       	pop	r15
    2b2a:	ef 90       	pop	r14
    2b2c:	df 90       	pop	r13
    2b2e:	cf 90       	pop	r12
    2b30:	08 95       	ret

00002b32 <_Z8canXStepv>:

bool read_switch(int pin) {
	return digitalRead(pin) ^ SENSORS_INVERTING;
}

bool canXStep() {
    2b32:	cf 92       	push	r12
    2b34:	df 92       	push	r13
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
	return can_step(X_MIN_PIN, X_MAX_PIN, current_steps.x, target_steps.x,
			x_direction);
    2b3e:	20 91 d4 04 	lds	r18, 0x04D4
    2b42:	30 91 d5 04 	lds	r19, 0x04D5
    2b46:	40 91 d6 04 	lds	r20, 0x04D6
    2b4a:	50 91 d7 04 	lds	r21, 0x04D7
    2b4e:	e0 90 e0 04 	lds	r14, 0x04E0
    2b52:	f0 90 e1 04 	lds	r15, 0x04E1
    2b56:	00 91 e2 04 	lds	r16, 0x04E2
    2b5a:	10 91 e3 04 	lds	r17, 0x04E3
    2b5e:	c0 90 53 02 	lds	r12, 0x0253
    2b62:	d0 90 54 02 	lds	r13, 0x0254
    2b66:	8e e0       	ldi	r24, 0x0E	; 14
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	61 e1       	ldi	r22, 0x11	; 17
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <_Z8can_stepiilli>
}
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	ff 90       	pop	r15
    2b78:	ef 90       	pop	r14
    2b7a:	df 90       	pop	r13
    2b7c:	cf 90       	pop	r12
    2b7e:	08 95       	ret

00002b80 <_Z24calculate_feedrate_delayd>:
		delay(milliDelay);
	else
		delayMicroseconds(feedRateDelay);
}

long calculate_feedrate_delay(double feedrate) {
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	7b 01       	movw	r14, r22
    2b8a:	8c 01       	movw	r16, r24
	// (D/S) is distance per step
	// So conversion is 1/(D/T) *(D/S) = (T/S)
	// or feedRateDelay = 1/feedRate * 1/stepPerUnit
	//  just use zsteps for now
	// This really should use the hypotonuse but doesn't need to be that acurate yet
	if (feedrate == 0)
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	0e 94 23 2a 	call	0x5446	; 0x5446 <__cmpsf2>
    2b98:	88 23       	and	r24, r24
    2b9a:	29 f4       	brne	.+10     	; 0x2ba6 <_Z24calculate_feedrate_delayd+0x26>
    2b9c:	2c e2       	ldi	r18, 0x2C	; 44
    2b9e:	31 e0       	ldi	r19, 0x01	; 1
    2ba0:	40 e0       	ldi	r20, 0x00	; 0
    2ba2:	50 e0       	ldi	r21, 0x00	; 0
    2ba4:	4e c0       	rjmp	.+156    	; 0x2c42 <_Z24calculate_feedrate_delayd+0xc2>
		return getMinDelay();
	double delay = 1.0 / to_steps(zStepsPerUnit, feedrate);
	delay = delay * 60 * 1000000; // convert from minutes to microseconds
    2ba6:	c8 01       	movw	r24, r16
    2ba8:	b7 01       	movw	r22, r14
    2baa:	20 91 a8 05 	lds	r18, 0x05A8
    2bae:	30 91 a9 05 	lds	r19, 0x05A9
    2bb2:	40 91 aa 05 	lds	r20, 0x05AA
    2bb6:	50 91 ab 05 	lds	r21, 0x05AB
    2bba:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    2bbe:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    2bc2:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    2bc6:	9b 01       	movw	r18, r22
    2bc8:	ac 01       	movw	r20, r24
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	80 e8       	ldi	r24, 0x80	; 128
    2bd0:	9f e3       	ldi	r25, 0x3F	; 63
    2bd2:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	40 e7       	ldi	r20, 0x70	; 112
    2bdc:	52 e4       	ldi	r21, 0x42	; 66
    2bde:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	34 e2       	ldi	r19, 0x24	; 36
    2be6:	44 e7       	ldi	r20, 0x74	; 116
    2be8:	59 e4       	ldi	r21, 0x49	; 73
    2bea:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    2bee:	7b 01       	movw	r14, r22
    2bf0:	8c 01       	movw	r16, r24
	Serial.print("delay: ");
    2bf2:	84 e3       	ldi	r24, 0x34	; 52
    2bf4:	96 e0       	ldi	r25, 0x06	; 6
    2bf6:	68 e1       	ldi	r22, 0x18	; 24
    2bf8:	71 e0       	ldi	r23, 0x01	; 1
    2bfa:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZN5Print5printEPKc>
	Serial.println(delay);
    2bfe:	84 e3       	ldi	r24, 0x34	; 52
    2c00:	96 e0       	ldi	r25, 0x06	; 6
    2c02:	b8 01       	movw	r22, r16
    2c04:	a7 01       	movw	r20, r14
    2c06:	22 e0       	ldi	r18, 0x02	; 2
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <_ZN5Print7printlnEdi>
	if (delay < getMinDelay())
    2c0e:	c8 01       	movw	r24, r16
    2c10:	b7 01       	movw	r22, r14
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	46 e9       	ldi	r20, 0x96	; 150
    2c18:	53 e4       	ldi	r21, 0x43	; 67
    2c1a:	0e 94 23 2a 	call	0x5446	; 0x5446 <__cmpsf2>
    2c1e:	88 23       	and	r24, r24
    2c20:	54 f4       	brge	.+20     	; 0x2c36 <_Z24calculate_feedrate_delayd+0xb6>
    2c22:	0f 2e       	mov	r0, r31
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	ef 2e       	mov	r14, r31
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	ff 2e       	mov	r15, r31
    2c2c:	f6 e9       	ldi	r31, 0x96	; 150
    2c2e:	0f 2f       	mov	r16, r31
    2c30:	f3 e4       	ldi	r31, 0x43	; 67
    2c32:	1f 2f       	mov	r17, r31
    2c34:	f0 2d       	mov	r31, r0
		delay = getMinDelay();
	return delay;
    2c36:	c8 01       	movw	r24, r16
    2c38:	b7 01       	movw	r22, r14
    2c3a:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    2c3e:	9b 01       	movw	r18, r22
    2c40:	ac 01       	movw	r20, r24
	 // move duration / master_steps = time between steps for master axis.
	 double delay = ((distance * 60000000.0) / feedrate) / master_steps;
	 if(delay < getMaxSpeed()) delay = getMaxSpeed();
	 return delay;
	 */
}
    2c42:	b9 01       	movw	r22, r18
    2c44:	ca 01       	movw	r24, r20
    2c46:	1f 91       	pop	r17
    2c48:	0f 91       	pop	r16
    2c4a:	ff 90       	pop	r15
    2c4c:	ef 90       	pop	r14
    2c4e:	08 95       	ret

00002c50 <_Z11setFeedRated>:
	z_direction = dir;
	digitalWrite(Z_DIR_PIN, dir ^ Z_INVERT);
}

void setFeedRate(double feedRate) {
	myFeedRateDelay = calculate_feedrate_delay(feedRate);
    2c50:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <_Z24calculate_feedrate_delayd>
    2c54:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    2c58:	60 93 f8 04 	sts	0x04F8, r22
    2c5c:	70 93 f9 04 	sts	0x04F9, r23
    2c60:	80 93 fa 04 	sts	0x04FA, r24
    2c64:	90 93 fb 04 	sts	0x04FB, r25

}
    2c68:	08 95       	ret

00002c6a <_Z13delaySteppersl>:
	myFeedRateDelay = getMinDelay();
}

void delaySteppers(long feedRateDelay) {
	long milliDelay = 0;
	if (feedRateDelay >= 16383) {
    2c6a:	6f 3f       	cpi	r22, 0xFF	; 255
    2c6c:	2f e3       	ldi	r18, 0x3F	; 63
    2c6e:	72 07       	cpc	r23, r18
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	82 07       	cpc	r24, r18
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	92 07       	cpc	r25, r18
    2c78:	5c f0       	brlt	.+22     	; 0x2c90 <_Z13delaySteppersl+0x26>
		milliDelay = feedRateDelay / 1000;
	}
	//	Serial.print("feedRateDelay: ");
	//	Serial.println(feedRateDelay);
	if (milliDelay > 0)
		delay(milliDelay);
    2c7a:	28 ee       	ldi	r18, 0xE8	; 232
    2c7c:	33 e0       	ldi	r19, 0x03	; 3
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <__divmodsi4>
    2c86:	ca 01       	movw	r24, r20
    2c88:	b9 01       	movw	r22, r18
    2c8a:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <delay>
    2c8e:	08 95       	ret
	else
		delayMicroseconds(feedRateDelay);
    2c90:	cb 01       	movw	r24, r22
    2c92:	0e 94 1e 28 	call	0x503c	; 0x503c <delayMicroseconds>
    2c96:	08 95       	ret

00002c98 <_Z13setZDirectioni>:
void setYDirection(int dir) {
	y_direction = dir;
	digitalWrite(Y_DIR_PIN, dir ^ Y_INVERT);
}

void setZDirection(int dir) {
    2c98:	68 2f       	mov	r22, r24
	z_direction = dir;
    2c9a:	80 93 57 02 	sts	0x0257, r24
    2c9e:	90 93 58 02 	sts	0x0258, r25
	digitalWrite(Z_DIR_PIN, dir ^ Z_INVERT);
    2ca2:	84 e0       	ldi	r24, 0x04	; 4
    2ca4:	0e 94 a2 28 	call	0x5144	; 0x5144 <digitalWrite>
}
    2ca8:	08 95       	ret

00002caa <_Z13setYDirectioni>:
	x_direction = dir;
	digitalWrite(X_DIR_PIN, dir ^ X_INVERT);
}

void setYDirection(int dir) {
	y_direction = dir;
    2caa:	80 93 55 02 	sts	0x0255, r24
    2cae:	90 93 56 02 	sts	0x0256, r25
	digitalWrite(Y_DIR_PIN, dir ^ Y_INVERT);
    2cb2:	61 e0       	ldi	r22, 0x01	; 1
    2cb4:	68 27       	eor	r22, r24
    2cb6:	83 e0       	ldi	r24, 0x03	; 3
    2cb8:	0e 94 a2 28 	call	0x5144	; 0x5144 <digitalWrite>
}
    2cbc:	08 95       	ret

00002cbe <_Z13setXDirectioni>:
	setYDirection(target_steps.y > current_steps.y);
	setZDirection(target_steps.z > current_steps.z);
}

void setXDirection(int dir) {
	x_direction = dir;
    2cbe:	80 93 53 02 	sts	0x0253, r24
    2cc2:	90 93 54 02 	sts	0x0254, r25
	digitalWrite(X_DIR_PIN, dir ^ X_INVERT);
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	68 27       	eor	r22, r24
    2cca:	82 e0       	ldi	r24, 0x02	; 2
    2ccc:	0e 94 a2 28 	call	0x5144	; 0x5144 <digitalWrite>
}
    2cd0:	08 95       	ret

00002cd2 <_Z12setDirectionv>:

	setDirection();
}
void setDirection() {
//what is our direction
	setXDirection(target_steps.x > current_steps.x);
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	70 e0       	ldi	r23, 0x00	; 0
    2cd6:	20 91 e0 04 	lds	r18, 0x04E0
    2cda:	30 91 e1 04 	lds	r19, 0x04E1
    2cde:	40 91 e2 04 	lds	r20, 0x04E2
    2ce2:	50 91 e3 04 	lds	r21, 0x04E3
    2ce6:	80 91 d4 04 	lds	r24, 0x04D4
    2cea:	90 91 d5 04 	lds	r25, 0x04D5
    2cee:	a0 91 d6 04 	lds	r26, 0x04D6
    2cf2:	b0 91 d7 04 	lds	r27, 0x04D7
    2cf6:	82 17       	cp	r24, r18
    2cf8:	93 07       	cpc	r25, r19
    2cfa:	a4 07       	cpc	r26, r20
    2cfc:	b5 07       	cpc	r27, r21
    2cfe:	14 f4       	brge	.+4      	; 0x2d04 <_Z12setDirectionv+0x32>
    2d00:	61 e0       	ldi	r22, 0x01	; 1
    2d02:	70 e0       	ldi	r23, 0x00	; 0
    2d04:	cb 01       	movw	r24, r22
    2d06:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <_Z13setXDirectioni>
	setYDirection(target_steps.y > current_steps.y);
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	70 e0       	ldi	r23, 0x00	; 0
    2d0e:	20 91 e4 04 	lds	r18, 0x04E4
    2d12:	30 91 e5 04 	lds	r19, 0x04E5
    2d16:	40 91 e6 04 	lds	r20, 0x04E6
    2d1a:	50 91 e7 04 	lds	r21, 0x04E7
    2d1e:	80 91 d8 04 	lds	r24, 0x04D8
    2d22:	90 91 d9 04 	lds	r25, 0x04D9
    2d26:	a0 91 da 04 	lds	r26, 0x04DA
    2d2a:	b0 91 db 04 	lds	r27, 0x04DB
    2d2e:	82 17       	cp	r24, r18
    2d30:	93 07       	cpc	r25, r19
    2d32:	a4 07       	cpc	r26, r20
    2d34:	b5 07       	cpc	r27, r21
    2d36:	14 f4       	brge	.+4      	; 0x2d3c <_Z12setDirectionv+0x6a>
    2d38:	61 e0       	ldi	r22, 0x01	; 1
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	0e 94 55 16 	call	0x2caa	; 0x2caa <_Z13setYDirectioni>
	setZDirection(target_steps.z > current_steps.z);
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	70 e0       	ldi	r23, 0x00	; 0
    2d46:	20 91 e8 04 	lds	r18, 0x04E8
    2d4a:	30 91 e9 04 	lds	r19, 0x04E9
    2d4e:	40 91 ea 04 	lds	r20, 0x04EA
    2d52:	50 91 eb 04 	lds	r21, 0x04EB
    2d56:	80 91 dc 04 	lds	r24, 0x04DC
    2d5a:	90 91 dd 04 	lds	r25, 0x04DD
    2d5e:	a0 91 de 04 	lds	r26, 0x04DE
    2d62:	b0 91 df 04 	lds	r27, 0x04DF
    2d66:	82 17       	cp	r24, r18
    2d68:	93 07       	cpc	r25, r19
    2d6a:	a4 07       	cpc	r26, r20
    2d6c:	b5 07       	cpc	r27, r21
    2d6e:	14 f4       	brge	.+4      	; 0x2d74 <_Z12setDirectionv+0xa2>
    2d70:	61 e0       	ldi	r22, 0x01	; 1
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	cb 01       	movw	r24, r22
    2d76:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_Z13setZDirectioni>
}
    2d7a:	08 95       	ret

00002d7c <_Z16calculate_deltasv>:

	calculate_deltas();
}

void calculate_deltas() {
	delta_steps.x = abs(target_steps.x - current_steps.x);
    2d7c:	20 91 e0 04 	lds	r18, 0x04E0
    2d80:	30 91 e1 04 	lds	r19, 0x04E1
    2d84:	40 91 e2 04 	lds	r20, 0x04E2
    2d88:	50 91 e3 04 	lds	r21, 0x04E3
    2d8c:	80 91 d4 04 	lds	r24, 0x04D4
    2d90:	90 91 d5 04 	lds	r25, 0x04D5
    2d94:	a0 91 d6 04 	lds	r26, 0x04D6
    2d98:	b0 91 d7 04 	lds	r27, 0x04D7
    2d9c:	28 1b       	sub	r18, r24
    2d9e:	39 0b       	sbc	r19, r25
    2da0:	4a 0b       	sbc	r20, r26
    2da2:	5b 0b       	sbc	r21, r27
    2da4:	20 93 ec 04 	sts	0x04EC, r18
    2da8:	30 93 ed 04 	sts	0x04ED, r19
    2dac:	40 93 ee 04 	sts	0x04EE, r20
    2db0:	50 93 ef 04 	sts	0x04EF, r21
    2db4:	57 ff       	sbrs	r21, 7
    2db6:	0f c0       	rjmp	.+30     	; 0x2dd6 <_Z16calculate_deltasv+0x5a>
    2db8:	88 27       	eor	r24, r24
    2dba:	99 27       	eor	r25, r25
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	82 1b       	sub	r24, r18
    2dc0:	93 0b       	sbc	r25, r19
    2dc2:	a4 0b       	sbc	r26, r20
    2dc4:	b5 0b       	sbc	r27, r21
    2dc6:	80 93 ec 04 	sts	0x04EC, r24
    2dca:	90 93 ed 04 	sts	0x04ED, r25
    2dce:	a0 93 ee 04 	sts	0x04EE, r26
    2dd2:	b0 93 ef 04 	sts	0x04EF, r27
	delta_steps.y = abs(target_steps.y - current_steps.y);
    2dd6:	20 91 e4 04 	lds	r18, 0x04E4
    2dda:	30 91 e5 04 	lds	r19, 0x04E5
    2dde:	40 91 e6 04 	lds	r20, 0x04E6
    2de2:	50 91 e7 04 	lds	r21, 0x04E7
    2de6:	80 91 d8 04 	lds	r24, 0x04D8
    2dea:	90 91 d9 04 	lds	r25, 0x04D9
    2dee:	a0 91 da 04 	lds	r26, 0x04DA
    2df2:	b0 91 db 04 	lds	r27, 0x04DB
    2df6:	28 1b       	sub	r18, r24
    2df8:	39 0b       	sbc	r19, r25
    2dfa:	4a 0b       	sbc	r20, r26
    2dfc:	5b 0b       	sbc	r21, r27
    2dfe:	20 93 f0 04 	sts	0x04F0, r18
    2e02:	30 93 f1 04 	sts	0x04F1, r19
    2e06:	40 93 f2 04 	sts	0x04F2, r20
    2e0a:	50 93 f3 04 	sts	0x04F3, r21
    2e0e:	57 ff       	sbrs	r21, 7
    2e10:	0f c0       	rjmp	.+30     	; 0x2e30 <_Z16calculate_deltasv+0xb4>
    2e12:	88 27       	eor	r24, r24
    2e14:	99 27       	eor	r25, r25
    2e16:	dc 01       	movw	r26, r24
    2e18:	82 1b       	sub	r24, r18
    2e1a:	93 0b       	sbc	r25, r19
    2e1c:	a4 0b       	sbc	r26, r20
    2e1e:	b5 0b       	sbc	r27, r21
    2e20:	80 93 f0 04 	sts	0x04F0, r24
    2e24:	90 93 f1 04 	sts	0x04F1, r25
    2e28:	a0 93 f2 04 	sts	0x04F2, r26
    2e2c:	b0 93 f3 04 	sts	0x04F3, r27
	delta_steps.z = abs(target_steps.z - current_steps.z);
    2e30:	20 91 e8 04 	lds	r18, 0x04E8
    2e34:	30 91 e9 04 	lds	r19, 0x04E9
    2e38:	40 91 ea 04 	lds	r20, 0x04EA
    2e3c:	50 91 eb 04 	lds	r21, 0x04EB
    2e40:	80 91 dc 04 	lds	r24, 0x04DC
    2e44:	90 91 dd 04 	lds	r25, 0x04DD
    2e48:	a0 91 de 04 	lds	r26, 0x04DE
    2e4c:	b0 91 df 04 	lds	r27, 0x04DF
    2e50:	28 1b       	sub	r18, r24
    2e52:	39 0b       	sbc	r19, r25
    2e54:	4a 0b       	sbc	r20, r26
    2e56:	5b 0b       	sbc	r21, r27
    2e58:	20 93 f4 04 	sts	0x04F4, r18
    2e5c:	30 93 f5 04 	sts	0x04F5, r19
    2e60:	40 93 f6 04 	sts	0x04F6, r20
    2e64:	50 93 f7 04 	sts	0x04F7, r21
    2e68:	57 ff       	sbrs	r21, 7
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <_Z16calculate_deltasv+0x10e>
    2e6c:	88 27       	eor	r24, r24
    2e6e:	99 27       	eor	r25, r25
    2e70:	dc 01       	movw	r26, r24
    2e72:	82 1b       	sub	r24, r18
    2e74:	93 0b       	sbc	r25, r19
    2e76:	a4 0b       	sbc	r26, r20
    2e78:	b5 0b       	sbc	r27, r21
    2e7a:	80 93 f4 04 	sts	0x04F4, r24
    2e7e:	90 93 f5 04 	sts	0x04F5, r25
    2e82:	a0 93 f6 04 	sts	0x04F6, r26
    2e86:	b0 93 f7 04 	sts	0x04F7, r27

	setDirection();
    2e8a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_Z12setDirectionv>
}
    2e8e:	08 95       	ret

00002e90 <_Z14setMillimetersv>:
	curve_section = CURVE_SECTION_INCHES;
	calculate_deltas();
}

void setMillimeters() {
	xStepsPerUnit = X_STEPS_PER_MM;
    2e90:	80 91 8c 05 	lds	r24, 0x058C
    2e94:	90 91 8d 05 	lds	r25, 0x058D
    2e98:	a0 91 8e 05 	lds	r26, 0x058E
    2e9c:	b0 91 8f 05 	lds	r27, 0x058F
    2ea0:	80 93 a0 05 	sts	0x05A0, r24
    2ea4:	90 93 a1 05 	sts	0x05A1, r25
    2ea8:	a0 93 a2 05 	sts	0x05A2, r26
    2eac:	b0 93 a3 05 	sts	0x05A3, r27
	yStepsPerUnit = Y_STEPS_PER_MM;
    2eb0:	80 91 94 05 	lds	r24, 0x0594
    2eb4:	90 91 95 05 	lds	r25, 0x0595
    2eb8:	a0 91 96 05 	lds	r26, 0x0596
    2ebc:	b0 91 97 05 	lds	r27, 0x0597
    2ec0:	80 93 a4 05 	sts	0x05A4, r24
    2ec4:	90 93 a5 05 	sts	0x05A5, r25
    2ec8:	a0 93 a6 05 	sts	0x05A6, r26
    2ecc:	b0 93 a7 05 	sts	0x05A7, r27
	zStepsPerUnit = Z_STEPS_PER_MM;
    2ed0:	80 91 9c 05 	lds	r24, 0x059C
    2ed4:	90 91 9d 05 	lds	r25, 0x059D
    2ed8:	a0 91 9e 05 	lds	r26, 0x059E
    2edc:	b0 91 9f 05 	lds	r27, 0x059F
    2ee0:	80 93 a8 05 	sts	0x05A8, r24
    2ee4:	90 93 a9 05 	sts	0x05A9, r25
    2ee8:	a0 93 aa 05 	sts	0x05AA, r26
    2eec:	b0 93 ab 05 	sts	0x05AB, r27
	curve_section = CURVE_SECTION_MM;
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	a0 e0       	ldi	r26, 0x00	; 0
    2ef6:	bf e3       	ldi	r27, 0x3F	; 63
    2ef8:	80 93 4f 02 	sts	0x024F, r24
    2efc:	90 93 50 02 	sts	0x0250, r25
    2f00:	a0 93 51 02 	sts	0x0251, r26
    2f04:	b0 93 52 02 	sts	0x0252, r27
	calculate_deltas();
    2f08:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_Z16calculate_deltasv>
}
    2f0c:	08 95       	ret

00002f0e <_Z9setInchesv>:
long getMinDelay() {
	return MINIMUMSTEPPERDELAY;
}

void setInches() {
	xStepsPerUnit = X_STEPS_PER_INCH;
    2f0e:	80 91 88 05 	lds	r24, 0x0588
    2f12:	90 91 89 05 	lds	r25, 0x0589
    2f16:	a0 91 8a 05 	lds	r26, 0x058A
    2f1a:	b0 91 8b 05 	lds	r27, 0x058B
    2f1e:	80 93 a0 05 	sts	0x05A0, r24
    2f22:	90 93 a1 05 	sts	0x05A1, r25
    2f26:	a0 93 a2 05 	sts	0x05A2, r26
    2f2a:	b0 93 a3 05 	sts	0x05A3, r27
	yStepsPerUnit = Y_STEPS_PER_INCH;
    2f2e:	80 91 90 05 	lds	r24, 0x0590
    2f32:	90 91 91 05 	lds	r25, 0x0591
    2f36:	a0 91 92 05 	lds	r26, 0x0592
    2f3a:	b0 91 93 05 	lds	r27, 0x0593
    2f3e:	80 93 a4 05 	sts	0x05A4, r24
    2f42:	90 93 a5 05 	sts	0x05A5, r25
    2f46:	a0 93 a6 05 	sts	0x05A6, r26
    2f4a:	b0 93 a7 05 	sts	0x05A7, r27
	zStepsPerUnit = Z_STEPS_PER_INCH;
    2f4e:	80 91 98 05 	lds	r24, 0x0598
    2f52:	90 91 99 05 	lds	r25, 0x0599
    2f56:	a0 91 9a 05 	lds	r26, 0x059A
    2f5a:	b0 91 9b 05 	lds	r27, 0x059B
    2f5e:	80 93 a8 05 	sts	0x05A8, r24
    2f62:	90 93 a9 05 	sts	0x05A9, r25
    2f66:	a0 93 aa 05 	sts	0x05AA, r26
    2f6a:	b0 93 ab 05 	sts	0x05AB, r27
	curve_section = CURVE_SECTION_INCHES;
    2f6e:	80 e7       	ldi	r24, 0x70	; 112
    2f70:	92 e4       	ldi	r25, 0x42	; 66
    2f72:	a1 ea       	ldi	r26, 0xA1	; 161
    2f74:	bc e3       	ldi	r27, 0x3C	; 60
    2f76:	80 93 4f 02 	sts	0x024F, r24
    2f7a:	90 93 50 02 	sts	0x0250, r25
    2f7e:	a0 93 51 02 	sts	0x0251, r26
    2f82:	b0 93 52 02 	sts	0x0252, r27
	calculate_deltas();
    2f86:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_Z16calculate_deltasv>
}
    2f8a:	08 95       	ret

00002f8c <_Z11setPositionddd>:
	target_steps.z = to_steps(zStepsPerUnit, z);

	calculate_deltas();
}

void setPosition(double x, double y, double z) {
    2f8c:	af 92       	push	r10
    2f8e:	bf 92       	push	r11
    2f90:	cf 92       	push	r12
    2f92:	df 92       	push	r13
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	59 01       	movw	r10, r18
    2f9e:	6a 01       	movw	r12, r20
	current_steps.x = to_steps(xStepsPerUnit, x);
    2fa0:	20 91 a0 05 	lds	r18, 0x05A0
    2fa4:	30 91 a1 05 	lds	r19, 0x05A1
    2fa8:	40 91 a2 05 	lds	r20, 0x05A2
    2fac:	50 91 a3 05 	lds	r21, 0x05A3
    2fb0:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    2fb4:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    2fb8:	60 93 d4 04 	sts	0x04D4, r22
    2fbc:	70 93 d5 04 	sts	0x04D5, r23
    2fc0:	80 93 d6 04 	sts	0x04D6, r24
    2fc4:	90 93 d7 04 	sts	0x04D7, r25
	current_steps.y = to_steps(yStepsPerUnit, y);
    2fc8:	c6 01       	movw	r24, r12
    2fca:	b5 01       	movw	r22, r10
    2fcc:	20 91 a4 05 	lds	r18, 0x05A4
    2fd0:	30 91 a5 05 	lds	r19, 0x05A5
    2fd4:	40 91 a6 05 	lds	r20, 0x05A6
    2fd8:	50 91 a7 05 	lds	r21, 0x05A7
    2fdc:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    2fe0:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    2fe4:	60 93 d8 04 	sts	0x04D8, r22
    2fe8:	70 93 d9 04 	sts	0x04D9, r23
    2fec:	80 93 da 04 	sts	0x04DA, r24
    2ff0:	90 93 db 04 	sts	0x04DB, r25
	current_steps.z = to_steps(zStepsPerUnit, z);
    2ff4:	c8 01       	movw	r24, r16
    2ff6:	b7 01       	movw	r22, r14
    2ff8:	20 91 a8 05 	lds	r18, 0x05A8
    2ffc:	30 91 a9 05 	lds	r19, 0x05A9
    3000:	40 91 aa 05 	lds	r20, 0x05AA
    3004:	50 91 ab 05 	lds	r21, 0x05AB
    3008:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    300c:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    3010:	60 93 dc 04 	sts	0x04DC, r22
    3014:	70 93 dd 04 	sts	0x04DD, r23
    3018:	80 93 de 04 	sts	0x04DE, r24
    301c:	90 93 df 04 	sts	0x04DF, r25

	calculate_deltas();
    3020:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_Z16calculate_deltasv>
}
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	df 90       	pop	r13
    302e:	cf 90       	pop	r12
    3030:	bf 90       	pop	r11
    3032:	af 90       	pop	r10
    3034:	08 95       	ret

00003036 <_Z10set_targetddd>:
// converts from mm or inches to steps of the stepper motor
long to_steps(double steps_per_unit, double units) {
	return steps_per_unit * units;
}

void set_target(double x, double y, double z) {
    3036:	af 92       	push	r10
    3038:	bf 92       	push	r11
    303a:	cf 92       	push	r12
    303c:	df 92       	push	r13
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	0f 93       	push	r16
    3044:	1f 93       	push	r17
    3046:	59 01       	movw	r10, r18
    3048:	6a 01       	movw	r12, r20
	target_steps.x = to_steps(xStepsPerUnit, x);
    304a:	20 91 a0 05 	lds	r18, 0x05A0
    304e:	30 91 a1 05 	lds	r19, 0x05A1
    3052:	40 91 a2 05 	lds	r20, 0x05A2
    3056:	50 91 a3 05 	lds	r21, 0x05A3
    305a:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    305e:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    3062:	60 93 e0 04 	sts	0x04E0, r22
    3066:	70 93 e1 04 	sts	0x04E1, r23
    306a:	80 93 e2 04 	sts	0x04E2, r24
    306e:	90 93 e3 04 	sts	0x04E3, r25
	target_steps.y = to_steps(yStepsPerUnit, y);
    3072:	c6 01       	movw	r24, r12
    3074:	b5 01       	movw	r22, r10
    3076:	20 91 a4 05 	lds	r18, 0x05A4
    307a:	30 91 a5 05 	lds	r19, 0x05A5
    307e:	40 91 a6 05 	lds	r20, 0x05A6
    3082:	50 91 a7 05 	lds	r21, 0x05A7
    3086:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    308a:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    308e:	60 93 e4 04 	sts	0x04E4, r22
    3092:	70 93 e5 04 	sts	0x04E5, r23
    3096:	80 93 e6 04 	sts	0x04E6, r24
    309a:	90 93 e7 04 	sts	0x04E7, r25
	target_steps.z = to_steps(zStepsPerUnit, z);
    309e:	c8 01       	movw	r24, r16
    30a0:	b7 01       	movw	r22, r14
    30a2:	20 91 a8 05 	lds	r18, 0x05A8
    30a6:	30 91 a9 05 	lds	r19, 0x05A9
    30aa:	40 91 aa 05 	lds	r20, 0x05AA
    30ae:	50 91 ab 05 	lds	r21, 0x05AB
    30b2:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    30b6:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    30ba:	60 93 e8 04 	sts	0x04E8, r22
    30be:	70 93 e9 04 	sts	0x04E9, r23
    30c2:	80 93 ea 04 	sts	0x04EA, r24
    30c6:	90 93 eb 04 	sts	0x04EB, r25

	calculate_deltas();
    30ca:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_Z16calculate_deltasv>
}
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
    30da:	bf 90       	pop	r11
    30dc:	af 90       	pop	r10
    30de:	08 95       	ret

000030e0 <_Z7do_stepi>:
	}
	//default to being able to step
	return true;
}

void do_step(int step_pin) {
    30e0:	1f 93       	push	r17
    30e2:	18 2f       	mov	r17, r24
	digitalWrite(step_pin, HIGH);
    30e4:	61 e0       	ldi	r22, 0x01	; 1
    30e6:	0e 94 a2 28 	call	0x5144	; 0x5144 <digitalWrite>
	digitalWrite(step_pin, LOW);
    30ea:	81 2f       	mov	r24, r17
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	0e 94 a2 28 	call	0x5144	; 0x5144 <digitalWrite>
	delayMicroseconds(5);
    30f2:	85 e0       	ldi	r24, 0x05	; 5
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 1e 28 	call	0x503c	; 0x503c <delayMicroseconds>
}
    30fa:	1f 91       	pop	r17
    30fc:	08 95       	ret

000030fe <_Z8dda_movev>:
	set_target(x, y, z);

	calculate_deltas();
	dda_move();
}
void dda_move() {
    30fe:	3f 92       	push	r3
    3100:	4f 92       	push	r4
    3102:	5f 92       	push	r5
    3104:	6f 92       	push	r6
    3106:	7f 92       	push	r7
    3108:	8f 92       	push	r8
    310a:	9f 92       	push	r9
    310c:	af 92       	push	r10
    310e:	bf 92       	push	r11
    3110:	cf 92       	push	r12
    3112:	df 92       	push	r13
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	20 91 ec 04 	lds	r18, 0x04EC
    3120:	30 91 ed 04 	lds	r19, 0x04ED
    3124:	40 91 ee 04 	lds	r20, 0x04EE
    3128:	50 91 ef 04 	lds	r21, 0x04EF
    312c:	60 91 f0 04 	lds	r22, 0x04F0
    3130:	70 91 f1 04 	lds	r23, 0x04F1
    3134:	80 91 f2 04 	lds	r24, 0x04F2
    3138:	90 91 f3 04 	lds	r25, 0x04F3
    313c:	62 17       	cp	r22, r18
    313e:	73 07       	cpc	r23, r19
    3140:	84 07       	cpc	r24, r20
    3142:	95 07       	cpc	r25, r21
    3144:	14 f4       	brge	.+4      	; 0x314a <_Z8dda_movev+0x4c>
    3146:	ca 01       	movw	r24, r20
    3148:	b9 01       	movw	r22, r18
	//digitalWrite(X_ENABLE_PIN, HIGH);
	//digitalWrite(Y_ENABLE_PIN, HIGH);
	//digitalWrite(Z_ENABLE_PIN, HIGH);

	//figure out our deltas
	max_delta = max(delta_steps.x, delta_steps.y);
    314a:	20 91 f4 04 	lds	r18, 0x04F4
    314e:	30 91 f5 04 	lds	r19, 0x04F5
    3152:	40 91 f6 04 	lds	r20, 0x04F6
    3156:	50 91 f7 04 	lds	r21, 0x04F7
    315a:	62 17       	cp	r22, r18
    315c:	73 07       	cpc	r23, r19
    315e:	84 07       	cpc	r24, r20
    3160:	95 07       	cpc	r25, r21
    3162:	14 f4       	brge	.+4      	; 0x3168 <_Z8dda_movev+0x6a>
    3164:	ca 01       	movw	r24, r20
    3166:	b9 01       	movw	r22, r18
	max_delta = max(delta_steps.z, max_delta);
    3168:	60 93 84 05 	sts	0x0584, r22
    316c:	70 93 85 05 	sts	0x0585, r23
    3170:	80 93 86 05 	sts	0x0586, r24
    3174:	90 93 87 05 	sts	0x0587, r25

	//init stuff.
	long x_counter = -max_delta / 2;
    3178:	22 e0       	ldi	r18, 0x02	; 2
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <__divmodsi4>
    3184:	ee 24       	eor	r14, r14
    3186:	ff 24       	eor	r15, r15
    3188:	87 01       	movw	r16, r14
    318a:	e2 1a       	sub	r14, r18
    318c:	f3 0a       	sbc	r15, r19
    318e:	04 0b       	sbc	r16, r20
    3190:	15 0b       	sbc	r17, r21
    3192:	37 01       	movw	r6, r14
    3194:	48 01       	movw	r8, r16
    3196:	57 01       	movw	r10, r14
    3198:	68 01       	movw	r12, r16
	bool z_can_step = 0;

	//do our DDA line!
	do {

		x_can_step = canXStep();
    319a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <_Z8canXStepv>
    319e:	38 2e       	mov	r3, r24
		y_can_step = canYStep();
    31a0:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <_Z8canYStepv>
    31a4:	48 2e       	mov	r4, r24
		z_can_step = canZStep();
    31a6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <_Z8canZStepv>
    31aa:	58 2e       	mov	r5, r24

		if (x_can_step) {
    31ac:	33 20       	and	r3, r3
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <_Z8dda_movev+0xb4>
    31b0:	46 c0       	rjmp	.+140    	; 0x323e <_Z8dda_movev+0x140>
			x_counter += delta_steps.x;
    31b2:	80 91 ec 04 	lds	r24, 0x04EC
    31b6:	90 91 ed 04 	lds	r25, 0x04ED
    31ba:	a0 91 ee 04 	lds	r26, 0x04EE
    31be:	b0 91 ef 04 	lds	r27, 0x04EF
    31c2:	e8 0e       	add	r14, r24
    31c4:	f9 1e       	adc	r15, r25
    31c6:	0a 1f       	adc	r16, r26
    31c8:	1b 1f       	adc	r17, r27

			if (x_counter > 0) {
    31ca:	1e 14       	cp	r1, r14
    31cc:	1f 04       	cpc	r1, r15
    31ce:	10 06       	cpc	r1, r16
    31d0:	11 06       	cpc	r1, r17
    31d2:	ac f5       	brge	.+106    	; 0x323e <_Z8dda_movev+0x140>
				do_step(X_STEP_PIN);
    31d4:	85 e0       	ldi	r24, 0x05	; 5
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	0e 94 70 18 	call	0x30e0	; 0x30e0 <_Z7do_stepi>
				x_counter -= max_delta;
    31dc:	80 91 84 05 	lds	r24, 0x0584
    31e0:	90 91 85 05 	lds	r25, 0x0585
    31e4:	a0 91 86 05 	lds	r26, 0x0586
    31e8:	b0 91 87 05 	lds	r27, 0x0587
    31ec:	e8 1a       	sub	r14, r24
    31ee:	f9 0a       	sbc	r15, r25
    31f0:	0a 0b       	sbc	r16, r26
    31f2:	1b 0b       	sbc	r17, r27

				if (x_direction) {
    31f4:	80 91 53 02 	lds	r24, 0x0253
    31f8:	90 91 54 02 	lds	r25, 0x0254
    31fc:	89 2b       	or	r24, r25
    31fe:	61 f0       	breq	.+24     	; 0x3218 <_Z8dda_movev+0x11a>
					current_steps.x++;
    3200:	80 91 d4 04 	lds	r24, 0x04D4
    3204:	90 91 d5 04 	lds	r25, 0x04D5
    3208:	a0 91 d6 04 	lds	r26, 0x04D6
    320c:	b0 91 d7 04 	lds	r27, 0x04D7
    3210:	01 96       	adiw	r24, 0x01	; 1
    3212:	a1 1d       	adc	r26, r1
    3214:	b1 1d       	adc	r27, r1
    3216:	0b c0       	rjmp	.+22     	; 0x322e <_Z8dda_movev+0x130>
				} else {
					current_steps.x--;
    3218:	80 91 d4 04 	lds	r24, 0x04D4
    321c:	90 91 d5 04 	lds	r25, 0x04D5
    3220:	a0 91 d6 04 	lds	r26, 0x04D6
    3224:	b0 91 d7 04 	lds	r27, 0x04D7
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	a1 09       	sbc	r26, r1
    322c:	b1 09       	sbc	r27, r1
    322e:	80 93 d4 04 	sts	0x04D4, r24
    3232:	90 93 d5 04 	sts	0x04D5, r25
    3236:	a0 93 d6 04 	sts	0x04D6, r26
    323a:	b0 93 d7 04 	sts	0x04D7, r27
				}
			}
		}

		if (y_can_step) {
    323e:	44 20       	and	r4, r4
    3240:	09 f4       	brne	.+2      	; 0x3244 <_Z8dda_movev+0x146>
    3242:	46 c0       	rjmp	.+140    	; 0x32d0 <_Z8dda_movev+0x1d2>
			y_counter += delta_steps.y;
    3244:	80 91 f0 04 	lds	r24, 0x04F0
    3248:	90 91 f1 04 	lds	r25, 0x04F1
    324c:	a0 91 f2 04 	lds	r26, 0x04F2
    3250:	b0 91 f3 04 	lds	r27, 0x04F3
    3254:	68 0e       	add	r6, r24
    3256:	79 1e       	adc	r7, r25
    3258:	8a 1e       	adc	r8, r26
    325a:	9b 1e       	adc	r9, r27

			if (y_counter > 0) {
    325c:	16 14       	cp	r1, r6
    325e:	17 04       	cpc	r1, r7
    3260:	18 04       	cpc	r1, r8
    3262:	19 04       	cpc	r1, r9
    3264:	ac f5       	brge	.+106    	; 0x32d0 <_Z8dda_movev+0x1d2>
				do_step(Y_STEP_PIN);
    3266:	86 e0       	ldi	r24, 0x06	; 6
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	0e 94 70 18 	call	0x30e0	; 0x30e0 <_Z7do_stepi>
				y_counter -= max_delta;
    326e:	80 91 84 05 	lds	r24, 0x0584
    3272:	90 91 85 05 	lds	r25, 0x0585
    3276:	a0 91 86 05 	lds	r26, 0x0586
    327a:	b0 91 87 05 	lds	r27, 0x0587
    327e:	68 1a       	sub	r6, r24
    3280:	79 0a       	sbc	r7, r25
    3282:	8a 0a       	sbc	r8, r26
    3284:	9b 0a       	sbc	r9, r27

				if (y_direction)
    3286:	80 91 55 02 	lds	r24, 0x0255
    328a:	90 91 56 02 	lds	r25, 0x0256
    328e:	89 2b       	or	r24, r25
    3290:	61 f0       	breq	.+24     	; 0x32aa <_Z8dda_movev+0x1ac>
					current_steps.y++;
    3292:	80 91 d8 04 	lds	r24, 0x04D8
    3296:	90 91 d9 04 	lds	r25, 0x04D9
    329a:	a0 91 da 04 	lds	r26, 0x04DA
    329e:	b0 91 db 04 	lds	r27, 0x04DB
    32a2:	01 96       	adiw	r24, 0x01	; 1
    32a4:	a1 1d       	adc	r26, r1
    32a6:	b1 1d       	adc	r27, r1
    32a8:	0b c0       	rjmp	.+22     	; 0x32c0 <_Z8dda_movev+0x1c2>
				else
					current_steps.y--;
    32aa:	80 91 d8 04 	lds	r24, 0x04D8
    32ae:	90 91 d9 04 	lds	r25, 0x04D9
    32b2:	a0 91 da 04 	lds	r26, 0x04DA
    32b6:	b0 91 db 04 	lds	r27, 0x04DB
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	a1 09       	sbc	r26, r1
    32be:	b1 09       	sbc	r27, r1
    32c0:	80 93 d8 04 	sts	0x04D8, r24
    32c4:	90 93 d9 04 	sts	0x04D9, r25
    32c8:	a0 93 da 04 	sts	0x04DA, r26
    32cc:	b0 93 db 04 	sts	0x04DB, r27
			}

		}

		if (z_can_step) {
    32d0:	55 20       	and	r5, r5
    32d2:	09 f4       	brne	.+2      	; 0x32d6 <_Z8dda_movev+0x1d8>
    32d4:	46 c0       	rjmp	.+140    	; 0x3362 <_Z8dda_movev+0x264>
			z_counter += delta_steps.z;
    32d6:	80 91 f4 04 	lds	r24, 0x04F4
    32da:	90 91 f5 04 	lds	r25, 0x04F5
    32de:	a0 91 f6 04 	lds	r26, 0x04F6
    32e2:	b0 91 f7 04 	lds	r27, 0x04F7
    32e6:	a8 0e       	add	r10, r24
    32e8:	b9 1e       	adc	r11, r25
    32ea:	ca 1e       	adc	r12, r26
    32ec:	db 1e       	adc	r13, r27
			if (z_counter > 0) {
    32ee:	1a 14       	cp	r1, r10
    32f0:	1b 04       	cpc	r1, r11
    32f2:	1c 04       	cpc	r1, r12
    32f4:	1d 04       	cpc	r1, r13
    32f6:	ac f5       	brge	.+106    	; 0x3362 <_Z8dda_movev+0x264>
				do_step(Z_STEP_PIN);
    32f8:	87 e0       	ldi	r24, 0x07	; 7
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	0e 94 70 18 	call	0x30e0	; 0x30e0 <_Z7do_stepi>
				z_counter -= max_delta;
    3300:	80 91 84 05 	lds	r24, 0x0584
    3304:	90 91 85 05 	lds	r25, 0x0585
    3308:	a0 91 86 05 	lds	r26, 0x0586
    330c:	b0 91 87 05 	lds	r27, 0x0587
    3310:	a8 1a       	sub	r10, r24
    3312:	b9 0a       	sbc	r11, r25
    3314:	ca 0a       	sbc	r12, r26
    3316:	db 0a       	sbc	r13, r27

				if (z_direction)
    3318:	80 91 57 02 	lds	r24, 0x0257
    331c:	90 91 58 02 	lds	r25, 0x0258
    3320:	89 2b       	or	r24, r25
    3322:	61 f0       	breq	.+24     	; 0x333c <_Z8dda_movev+0x23e>
					current_steps.z++;
    3324:	80 91 dc 04 	lds	r24, 0x04DC
    3328:	90 91 dd 04 	lds	r25, 0x04DD
    332c:	a0 91 de 04 	lds	r26, 0x04DE
    3330:	b0 91 df 04 	lds	r27, 0x04DF
    3334:	01 96       	adiw	r24, 0x01	; 1
    3336:	a1 1d       	adc	r26, r1
    3338:	b1 1d       	adc	r27, r1
    333a:	0b c0       	rjmp	.+22     	; 0x3352 <_Z8dda_movev+0x254>
				else
					current_steps.z--;
    333c:	80 91 dc 04 	lds	r24, 0x04DC
    3340:	90 91 dd 04 	lds	r25, 0x04DD
    3344:	a0 91 de 04 	lds	r26, 0x04DE
    3348:	b0 91 df 04 	lds	r27, 0x04DF
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	a1 09       	sbc	r26, r1
    3350:	b1 09       	sbc	r27, r1
    3352:	80 93 dc 04 	sts	0x04DC, r24
    3356:	90 93 dd 04 	sts	0x04DD, r25
    335a:	a0 93 de 04 	sts	0x04DE, r26
    335e:	b0 93 df 04 	sts	0x04DF, r27

		}

		//extruder_manage_temperature();
		//wait for next step.
		delaySteppers(myFeedRateDelay);
    3362:	60 91 f8 04 	lds	r22, 0x04F8
    3366:	70 91 f9 04 	lds	r23, 0x04F9
    336a:	80 91 fa 04 	lds	r24, 0x04FA
    336e:	90 91 fb 04 	lds	r25, 0x04FB
    3372:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    3376:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <_Z13delaySteppersl>
	bool x_can_step = 0;
	bool y_can_step = 0;
	bool z_can_step = 0;

	//do our DDA line!
	do {
    337a:	33 20       	and	r3, r3
    337c:	09 f0       	breq	.+2      	; 0x3380 <_Z8dda_movev+0x282>
    337e:	0d cf       	rjmp	.-486    	; 0x319a <_Z8dda_movev+0x9c>
    3380:	44 20       	and	r4, r4
    3382:	09 f0       	breq	.+2      	; 0x3386 <_Z8dda_movev+0x288>
    3384:	0a cf       	rjmp	.-492    	; 0x319a <_Z8dda_movev+0x9c>
    3386:	55 20       	and	r5, r5
    3388:	09 f0       	breq	.+2      	; 0x338c <_Z8dda_movev+0x28e>
    338a:	07 cf       	rjmp	.-498    	; 0x319a <_Z8dda_movev+0x9c>

	//set our points to be the same
	//current_units.x = target_units.x;
	//current_units.y = target_units.y;
	//current_units.z = target_units.z;
	calculate_deltas();
    338c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_Z16calculate_deltasv>
}
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	cf 90       	pop	r12
    339c:	bf 90       	pop	r11
    339e:	af 90       	pop	r10
    33a0:	9f 90       	pop	r9
    33a2:	8f 90       	pop	r8
    33a4:	7f 90       	pop	r7
    33a6:	6f 90       	pop	r6
    33a8:	5f 90       	pop	r5
    33aa:	4f 90       	pop	r4
    33ac:	3f 90       	pop	r3
    33ae:	08 95       	ret

000033b0 <_Z4goToddd>:
	setPosition(0.0, 0.0, 0.0);
	//print();
	calculate_deltas();
	setMaxFeedRate();
}
void goTo(double x, double y, double z) {
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17

	set_target(x, y, z);
    33b8:	0e 94 1b 18 	call	0x3036	; 0x3036 <_Z10set_targetddd>

	calculate_deltas();
    33bc:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_Z16calculate_deltasv>
	dda_move();
    33c0:	0e 94 7f 18 	call	0x30fe	; 0x30fe <_Z8dda_movev>
}
    33c4:	1f 91       	pop	r17
    33c6:	0f 91       	pop	r16
    33c8:	ff 90       	pop	r15
    33ca:	ef 90       	pop	r14
    33cc:	08 95       	ret

000033ce <_Z14moveAlongCurveddddddb>:
	//current_units.z = target_units.z;
	calculate_deltas();
}

void moveAlongCurve(double cx, double cy, double cz, double fx, double fy,
		double fz, bool clockwise) {
    33ce:	2f 92       	push	r2
    33d0:	3f 92       	push	r3
    33d2:	4f 92       	push	r4
    33d4:	5f 92       	push	r5
    33d6:	6f 92       	push	r6
    33d8:	7f 92       	push	r7
    33da:	8f 92       	push	r8
    33dc:	9f 92       	push	r9
    33de:	af 92       	push	r10
    33e0:	bf 92       	push	r11
    33e2:	cf 92       	push	r12
    33e4:	df 92       	push	r13
    33e6:	ef 92       	push	r14
    33e8:	ff 92       	push	r15
    33ea:	0f 93       	push	r16
    33ec:	1f 93       	push	r17
    33ee:	df 93       	push	r29
    33f0:	cf 93       	push	r28
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	68 97       	sbiw	r28, 0x18	; 24
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	6d 87       	std	Y+13, r22	; 0x0d
    3404:	7e 87       	std	Y+14, r23	; 0x0e
    3406:	8f 87       	std	Y+15, r24	; 0x0f
    3408:	98 8b       	std	Y+16, r25	; 0x10
    340a:	29 8b       	std	Y+17, r18	; 0x11
    340c:	3a 8b       	std	Y+18, r19	; 0x12
    340e:	4b 8b       	std	Y+19, r20	; 0x13
    3410:	5c 8b       	std	Y+20, r21	; 0x14
	float angleA, angleB, angle, radius, length, aX, aY, bX, bY;

	aX = (getUnitsX() - cx);
    3412:	60 91 d4 04 	lds	r22, 0x04D4
    3416:	70 91 d5 04 	lds	r23, 0x04D5
    341a:	80 91 d6 04 	lds	r24, 0x04D6
    341e:	90 91 d7 04 	lds	r25, 0x04D7
    3422:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3426:	20 91 a0 05 	lds	r18, 0x05A0
    342a:	30 91 a1 05 	lds	r19, 0x05A1
    342e:	40 91 a2 05 	lds	r20, 0x05A2
    3432:	50 91 a3 05 	lds	r21, 0x05A3
    3436:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    343a:	2d 85       	ldd	r18, Y+13	; 0x0d
    343c:	3e 85       	ldd	r19, Y+14	; 0x0e
    343e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3440:	58 89       	ldd	r21, Y+16	; 0x10
    3442:	0e 94 49 29 	call	0x5292	; 0x5292 <__subsf3>
    3446:	1b 01       	movw	r2, r22
    3448:	2c 01       	movw	r4, r24
	aY = (getUnitsY() - cy);
    344a:	60 91 d8 04 	lds	r22, 0x04D8
    344e:	70 91 d9 04 	lds	r23, 0x04D9
    3452:	80 91 da 04 	lds	r24, 0x04DA
    3456:	90 91 db 04 	lds	r25, 0x04DB
    345a:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    345e:	20 91 a4 05 	lds	r18, 0x05A4
    3462:	30 91 a5 05 	lds	r19, 0x05A5
    3466:	40 91 a6 05 	lds	r20, 0x05A6
    346a:	50 91 a7 05 	lds	r21, 0x05A7
    346e:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3472:	29 89       	ldd	r18, Y+17	; 0x11
    3474:	3a 89       	ldd	r19, Y+18	; 0x12
    3476:	4b 89       	ldd	r20, Y+19	; 0x13
    3478:	5c 89       	ldd	r21, Y+20	; 0x14
    347a:	0e 94 49 29 	call	0x5292	; 0x5292 <__subsf3>
    347e:	3b 01       	movw	r6, r22
    3480:	4c 01       	movw	r8, r24
	bX = (fx - cx);
    3482:	c6 01       	movw	r24, r12
    3484:	b5 01       	movw	r22, r10
    3486:	2d 85       	ldd	r18, Y+13	; 0x0d
    3488:	3e 85       	ldd	r19, Y+14	; 0x0e
    348a:	4f 85       	ldd	r20, Y+15	; 0x0f
    348c:	58 89       	ldd	r21, Y+16	; 0x10
    348e:	0e 94 49 29 	call	0x5292	; 0x5292 <__subsf3>
    3492:	5b 01       	movw	r10, r22
    3494:	6c 01       	movw	r12, r24
	bY = (fy - cy);
    3496:	6d a5       	ldd	r22, Y+45	; 0x2d
    3498:	7e a5       	ldd	r23, Y+46	; 0x2e
    349a:	8f a5       	ldd	r24, Y+47	; 0x2f
    349c:	98 a9       	ldd	r25, Y+48	; 0x30
    349e:	29 89       	ldd	r18, Y+17	; 0x11
    34a0:	3a 89       	ldd	r19, Y+18	; 0x12
    34a2:	4b 89       	ldd	r20, Y+19	; 0x13
    34a4:	5c 89       	ldd	r21, Y+20	; 0x14
    34a6:	0e 94 49 29 	call	0x5292	; 0x5292 <__subsf3>
    34aa:	7b 01       	movw	r14, r22
    34ac:	8c 01       	movw	r16, r24

	if (clockwise) { // Clockwise
    34ae:	2d a9       	ldd	r18, Y+53	; 0x35
    34b0:	22 23       	and	r18, r18
    34b2:	71 f0       	breq	.+28     	; 0x34d0 <_Z14moveAlongCurveddddddb+0x102>
		angleA = atan2(bY, bX);
    34b4:	c8 01       	movw	r24, r16
    34b6:	95 01       	movw	r18, r10
    34b8:	a6 01       	movw	r20, r12
    34ba:	0e 94 bd 29 	call	0x537a	; 0x537a <atan2>
    34be:	69 87       	std	Y+9, r22	; 0x09
    34c0:	7a 87       	std	Y+10, r23	; 0x0a
    34c2:	8b 87       	std	Y+11, r24	; 0x0b
    34c4:	9c 87       	std	Y+12, r25	; 0x0c
		angleB = atan2(aY, aX);
    34c6:	c4 01       	movw	r24, r8
    34c8:	b3 01       	movw	r22, r6
    34ca:	a2 01       	movw	r20, r4
    34cc:	91 01       	movw	r18, r2
    34ce:	0e c0       	rjmp	.+28     	; 0x34ec <_Z14moveAlongCurveddddddb+0x11e>
	} else { // Counterclockwise
		angleA = atan2(aY, aX);
    34d0:	c4 01       	movw	r24, r8
    34d2:	b3 01       	movw	r22, r6
    34d4:	a2 01       	movw	r20, r4
    34d6:	91 01       	movw	r18, r2
    34d8:	0e 94 bd 29 	call	0x537a	; 0x537a <atan2>
    34dc:	69 87       	std	Y+9, r22	; 0x09
    34de:	7a 87       	std	Y+10, r23	; 0x0a
    34e0:	8b 87       	std	Y+11, r24	; 0x0b
    34e2:	9c 87       	std	Y+12, r25	; 0x0c
		angleB = atan2(bY, bX);
    34e4:	b7 01       	movw	r22, r14
    34e6:	c8 01       	movw	r24, r16
    34e8:	95 01       	movw	r18, r10
    34ea:	a6 01       	movw	r20, r12
    34ec:	0e 94 bd 29 	call	0x537a	; 0x537a <atan2>
    34f0:	7b 01       	movw	r14, r22
    34f2:	8c 01       	movw	r16, r24
	}
	// Make sure angleB is always greater than angleA
	// and if not add 2PI so that it is (this also takes
	// care of the special case of angleA == angleB,
	// ie we want a complete circle)
	if (angleB <= angleA)
    34f4:	29 85       	ldd	r18, Y+9	; 0x09
    34f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    34f8:	4b 85       	ldd	r20, Y+11	; 0x0b
    34fa:	5c 85       	ldd	r21, Y+12	; 0x0c
    34fc:	0e 94 23 2a 	call	0x5446	; 0x5446 <__cmpsf2>
    3500:	18 16       	cp	r1, r24
    3502:	54 f0       	brlt	.+20     	; 0x3518 <_Z14moveAlongCurveddddddb+0x14a>
		angleB += 2 * M_PI;
    3504:	c8 01       	movw	r24, r16
    3506:	b7 01       	movw	r22, r14
    3508:	2b ed       	ldi	r18, 0xDB	; 219
    350a:	3f e0       	ldi	r19, 0x0F	; 15
    350c:	49 ec       	ldi	r20, 0xC9	; 201
    350e:	50 e4       	ldi	r21, 0x40	; 64
    3510:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3514:	7b 01       	movw	r14, r22
    3516:	8c 01       	movw	r16, r24
	angle = angleB - angleA;
    3518:	c8 01       	movw	r24, r16
    351a:	b7 01       	movw	r22, r14
    351c:	29 85       	ldd	r18, Y+9	; 0x09
    351e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3520:	4b 85       	ldd	r20, Y+11	; 0x0b
    3522:	5c 85       	ldd	r21, Y+12	; 0x0c
    3524:	0e 94 49 29 	call	0x5292	; 0x5292 <__subsf3>
    3528:	6d 83       	std	Y+5, r22	; 0x05
    352a:	7e 83       	std	Y+6, r23	; 0x06
    352c:	8f 83       	std	Y+7, r24	; 0x07
    352e:	98 87       	std	Y+8, r25	; 0x08

	radius = sqrt(aX * aX + aY * aY);
    3530:	c2 01       	movw	r24, r4
    3532:	b1 01       	movw	r22, r2
    3534:	a2 01       	movw	r20, r4
    3536:	91 01       	movw	r18, r2
    3538:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    353c:	7b 01       	movw	r14, r22
    353e:	8c 01       	movw	r16, r24
    3540:	c4 01       	movw	r24, r8
    3542:	b3 01       	movw	r22, r6
    3544:	a4 01       	movw	r20, r8
    3546:	93 01       	movw	r18, r6
    3548:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    354c:	9b 01       	movw	r18, r22
    354e:	ac 01       	movw	r20, r24
    3550:	c8 01       	movw	r24, r16
    3552:	b7 01       	movw	r22, r14
    3554:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3558:	0e 94 96 2c 	call	0x592c	; 0x592c <sqrt>
    355c:	1b 01       	movw	r2, r22
    355e:	2c 01       	movw	r4, r24
	length = radius * angle;
	int steps, s, step;
	steps = (int) ceil(length / curve_section);
    3560:	2d 81       	ldd	r18, Y+5	; 0x05
    3562:	3e 81       	ldd	r19, Y+6	; 0x06
    3564:	4f 81       	ldd	r20, Y+7	; 0x07
    3566:	58 85       	ldd	r21, Y+8	; 0x08
    3568:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    356c:	20 91 4f 02 	lds	r18, 0x024F
    3570:	30 91 50 02 	lds	r19, 0x0250
    3574:	40 91 51 02 	lds	r20, 0x0251
    3578:	50 91 52 02 	lds	r21, 0x0252
    357c:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3580:	0e 94 10 2a 	call	0x5420	; 0x5420 <ceil>
    3584:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    3588:	7c 83       	std	Y+4, r23	; 0x04
    358a:	6b 83       	std	Y+3, r22	; 0x03
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9a 83       	std	Y+2, r25	; 0x02
    3592:	89 83       	std	Y+1, r24	; 0x01

	FloatPoint newPoint;
	for (s = 1; s <= steps; s++) {
		step = (!clockwise) ? s : steps - s; // Work backwards for CW
		newPoint.x = cx + radius * cos(angleA + angle * ((float) step / steps));
    3594:	cb 01       	movw	r24, r22
    3596:	aa 27       	eor	r26, r26
    3598:	97 fd       	sbrc	r25, 7
    359a:	a0 95       	com	r26
    359c:	ba 2f       	mov	r27, r26
    359e:	8d 8b       	std	Y+21, r24	; 0x15
    35a0:	9e 8b       	std	Y+22, r25	; 0x16
    35a2:	af 8b       	std	Y+23, r26	; 0x17
    35a4:	b8 8f       	std	Y+24, r27	; 0x18
    35a6:	72 c0       	rjmp	.+228    	; 0x368c <_Z14moveAlongCurveddddddb+0x2be>
	int steps, s, step;
	steps = (int) ceil(length / curve_section);

	FloatPoint newPoint;
	for (s = 1; s <= steps; s++) {
		step = (!clockwise) ? s : steps - s; // Work backwards for CW
    35a8:	9d a9       	ldd	r25, Y+53	; 0x35
    35aa:	99 23       	and	r25, r25
    35ac:	19 f4       	brne	.+6      	; 0x35b4 <_Z14moveAlongCurveddddddb+0x1e6>
    35ae:	29 81       	ldd	r18, Y+1	; 0x01
    35b0:	3a 81       	ldd	r19, Y+2	; 0x02
    35b2:	06 c0       	rjmp	.+12     	; 0x35c0 <_Z14moveAlongCurveddddddb+0x1f2>
    35b4:	2b 81       	ldd	r18, Y+3	; 0x03
    35b6:	3c 81       	ldd	r19, Y+4	; 0x04
    35b8:	a9 81       	ldd	r26, Y+1	; 0x01
    35ba:	ba 81       	ldd	r27, Y+2	; 0x02
    35bc:	2a 1b       	sub	r18, r26
    35be:	3b 0b       	sbc	r19, r27
		newPoint.x = cx + radius * cos(angleA + angle * ((float) step / steps));
    35c0:	b9 01       	movw	r22, r18
    35c2:	88 27       	eor	r24, r24
    35c4:	77 fd       	sbrc	r23, 7
    35c6:	80 95       	com	r24
    35c8:	98 2f       	mov	r25, r24
    35ca:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    35ce:	7b 01       	movw	r14, r22
    35d0:	8c 01       	movw	r16, r24
    35d2:	6d 89       	ldd	r22, Y+21	; 0x15
    35d4:	7e 89       	ldd	r23, Y+22	; 0x16
    35d6:	8f 89       	ldd	r24, Y+23	; 0x17
    35d8:	98 8d       	ldd	r25, Y+24	; 0x18
    35da:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    35de:	9b 01       	movw	r18, r22
    35e0:	ac 01       	movw	r20, r24
    35e2:	c8 01       	movw	r24, r16
    35e4:	b7 01       	movw	r22, r14
    35e6:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    35ea:	9b 01       	movw	r18, r22
    35ec:	ac 01       	movw	r20, r24
    35ee:	6d 81       	ldd	r22, Y+5	; 0x05
    35f0:	7e 81       	ldd	r23, Y+6	; 0x06
    35f2:	8f 81       	ldd	r24, Y+7	; 0x07
    35f4:	98 85       	ldd	r25, Y+8	; 0x08
    35f6:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    35fa:	9b 01       	movw	r18, r22
    35fc:	ac 01       	movw	r20, r24
    35fe:	69 85       	ldd	r22, Y+9	; 0x09
    3600:	7a 85       	ldd	r23, Y+10	; 0x0a
    3602:	8b 85       	ldd	r24, Y+11	; 0x0b
    3604:	9c 85       	ldd	r25, Y+12	; 0x0c
    3606:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    360a:	7b 01       	movw	r14, r22
    360c:	8c 01       	movw	r16, r24
    360e:	c8 01       	movw	r24, r16
    3610:	0e 94 27 2a 	call	0x544e	; 0x544e <cos>
    3614:	3b 01       	movw	r6, r22
    3616:	4c 01       	movw	r8, r24
		newPoint.y = cy + radius * sin(angleA + angle * ((float) step / steps));
    3618:	b7 01       	movw	r22, r14
    361a:	c8 01       	movw	r24, r16
    361c:	0e 94 8c 2c 	call	0x5918	; 0x5918 <sin>
    3620:	5b 01       	movw	r10, r22
    3622:	6c 01       	movw	r12, r24
		goTo(newPoint.x, newPoint.y, newPoint.z);
    3624:	c2 01       	movw	r24, r4
    3626:	b1 01       	movw	r22, r2
    3628:	a4 01       	movw	r20, r8
    362a:	93 01       	movw	r18, r6
    362c:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    3630:	9b 01       	movw	r18, r22
    3632:	ac 01       	movw	r20, r24
    3634:	6d 85       	ldd	r22, Y+13	; 0x0d
    3636:	7e 85       	ldd	r23, Y+14	; 0x0e
    3638:	8f 85       	ldd	r24, Y+15	; 0x0f
    363a:	98 89       	ldd	r25, Y+16	; 0x10
    363c:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3640:	7b 01       	movw	r14, r22
    3642:	8c 01       	movw	r16, r24
    3644:	c2 01       	movw	r24, r4
    3646:	b1 01       	movw	r22, r2
    3648:	a6 01       	movw	r20, r12
    364a:	95 01       	movw	r18, r10
    364c:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    3650:	9b 01       	movw	r18, r22
    3652:	ac 01       	movw	r20, r24
    3654:	69 89       	ldd	r22, Y+17	; 0x11
    3656:	7a 89       	ldd	r23, Y+18	; 0x12
    3658:	8b 89       	ldd	r24, Y+19	; 0x13
    365a:	9c 89       	ldd	r25, Y+20	; 0x14
    365c:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3660:	9b 01       	movw	r18, r22
    3662:	ac 01       	movw	r20, r24
    3664:	c8 01       	movw	r24, r16
    3666:	b7 01       	movw	r22, r14
    3668:	0f 2e       	mov	r0, r31
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	ef 2e       	mov	r14, r31
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	ff 2e       	mov	r15, r31
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	0f 2f       	mov	r16, r31
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	1f 2f       	mov	r17, r31
    367a:	f0 2d       	mov	r31, r0
    367c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
	length = radius * angle;
	int steps, s, step;
	steps = (int) ceil(length / curve_section);

	FloatPoint newPoint;
	for (s = 1; s <= steps; s++) {
    3680:	29 81       	ldd	r18, Y+1	; 0x01
    3682:	3a 81       	ldd	r19, Y+2	; 0x02
    3684:	2f 5f       	subi	r18, 0xFF	; 255
    3686:	3f 4f       	sbci	r19, 0xFF	; 255
    3688:	3a 83       	std	Y+2, r19	; 0x02
    368a:	29 83       	std	Y+1, r18	; 0x01
    368c:	89 81       	ldd	r24, Y+1	; 0x01
    368e:	9a 81       	ldd	r25, Y+2	; 0x02
    3690:	ab 81       	ldd	r26, Y+3	; 0x03
    3692:	bc 81       	ldd	r27, Y+4	; 0x04
    3694:	a8 17       	cp	r26, r24
    3696:	b9 07       	cpc	r27, r25
    3698:	0c f0       	brlt	.+2      	; 0x369c <_Z14moveAlongCurveddddddb+0x2ce>
    369a:	86 cf       	rjmp	.-244    	; 0x35a8 <_Z14moveAlongCurveddddddb+0x1da>
		goTo(newPoint.x, newPoint.y, newPoint.z);

		// Make step
	}

}
    369c:	68 96       	adiw	r28, 0x18	; 24
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	cf 91       	pop	r28
    36aa:	df 91       	pop	r29
    36ac:	1f 91       	pop	r17
    36ae:	0f 91       	pop	r16
    36b0:	ff 90       	pop	r15
    36b2:	ef 90       	pop	r14
    36b4:	df 90       	pop	r13
    36b6:	cf 90       	pop	r12
    36b8:	bf 90       	pop	r11
    36ba:	af 90       	pop	r10
    36bc:	9f 90       	pop	r9
    36be:	8f 90       	pop	r8
    36c0:	7f 90       	pop	r7
    36c2:	6f 90       	pop	r6
    36c4:	5f 90       	pop	r5
    36c6:	4f 90       	pop	r4
    36c8:	3f 90       	pop	r3
    36ca:	2f 90       	pop	r2
    36cc:	08 95       	ret

000036ce <_Z13init_steppersv>:
	return false;
}

// ********************************************** StepperControl *******************************

void init_steppers() {
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
	disable_steppers();

	// THE MATH HERE SEEMS EASIER TO REPRESENT
	//  BUT THE MATH ON #DEFINED ELEMENTS RUNS OUT OF PRESISION TOO QUICK
	X_STEPS_PER_INCH = (X_MOTOR_STEPS);
	X_STEPS_PER_INCH *= THREADS_PER_INCH;
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	41 e6       	ldi	r20, 0x61	; 97
    36dc:	56 e4       	ldi	r21, 0x46	; 70
    36de:	20 93 88 05 	sts	0x0588, r18
    36e2:	30 93 89 05 	sts	0x0589, r19
    36e6:	40 93 8a 05 	sts	0x058A, r20
    36ea:	50 93 8b 05 	sts	0x058B, r21
	X_STEPS_PER_MM = (X_STEPS_PER_INCH);
	X_STEPS_PER_MM *= INCH_PER_MM;
    36ee:	87 e7       	ldi	r24, 0x77	; 119
    36f0:	9b eb       	ldi	r25, 0xBB	; 187
    36f2:	ad e0       	ldi	r26, 0x0D	; 13
    36f4:	b4 e4       	ldi	r27, 0x44	; 68
    36f6:	80 93 8c 05 	sts	0x058C, r24
    36fa:	90 93 8d 05 	sts	0x058D, r25
    36fe:	a0 93 8e 05 	sts	0x058E, r26
    3702:	b0 93 8f 05 	sts	0x058F, r27

	Y_STEPS_PER_INCH = (Y_MOTOR_STEPS);
	Y_STEPS_PER_INCH *= THREADS_PER_INCH;
    3706:	20 93 90 05 	sts	0x0590, r18
    370a:	30 93 91 05 	sts	0x0591, r19
    370e:	40 93 92 05 	sts	0x0592, r20
    3712:	50 93 93 05 	sts	0x0593, r21
	Y_STEPS_PER_MM = (Y_STEPS_PER_INCH);
	Y_STEPS_PER_MM *= INCH_PER_MM;
    3716:	80 93 94 05 	sts	0x0594, r24
    371a:	90 93 95 05 	sts	0x0595, r25
    371e:	a0 93 96 05 	sts	0x0596, r26
    3722:	b0 93 97 05 	sts	0x0597, r27

	Z_STEPS_PER_INCH = (Z_MOTOR_STEPS);
	Z_STEPS_PER_INCH *= THREADS_PER_INCH;
    3726:	20 93 98 05 	sts	0x0598, r18
    372a:	30 93 99 05 	sts	0x0599, r19
    372e:	40 93 9a 05 	sts	0x059A, r20
    3732:	50 93 9b 05 	sts	0x059B, r21
	Z_STEPS_PER_MM = (Z_STEPS_PER_INCH);
	Z_STEPS_PER_MM *= INCH_PER_MM;
    3736:	80 93 9c 05 	sts	0x059C, r24
    373a:	90 93 9d 05 	sts	0x059D, r25
    373e:	a0 93 9e 05 	sts	0x059E, r26
    3742:	b0 93 9f 05 	sts	0x059F, r27
//	current_units.z = 0.0;
//	target_units.x = 0.0;
//	target_units.y = 0.0;
//	target_units.z = 0.0;

	pinMode(X_STEP_PIN, OUTPUT);
    3746:	85 e0       	ldi	r24, 0x05	; 5
    3748:	61 e0       	ldi	r22, 0x01	; 1
    374a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	pinMode(X_DIR_PIN, OUTPUT);
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	61 e0       	ldi	r22, 0x01	; 1
    3752:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	//pinMode(X_ENABLE_PIN, OUTPUT);
	pinMode(X_MIN_PIN, INPUT);
    3756:	8e e0       	ldi	r24, 0x0E	; 14
    3758:	60 e0       	ldi	r22, 0x00	; 0
    375a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	pinMode(X_MAX_PIN, INPUT);
    375e:	81 e1       	ldi	r24, 0x11	; 17
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>

	pinMode(Y_STEP_PIN, OUTPUT);
    3766:	86 e0       	ldi	r24, 0x06	; 6
    3768:	61 e0       	ldi	r22, 0x01	; 1
    376a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	pinMode(Y_DIR_PIN, OUTPUT);
    376e:	83 e0       	ldi	r24, 0x03	; 3
    3770:	61 e0       	ldi	r22, 0x01	; 1
    3772:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	//pinMode(Y_ENABLE_PIN, OUTPUT);
	pinMode(Y_MIN_PIN, INPUT);
    3776:	8f e0       	ldi	r24, 0x0F	; 15
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	pinMode(Y_MAX_PIN, INPUT);
    377e:	82 e1       	ldi	r24, 0x12	; 18
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>

	pinMode(Z_STEP_PIN, OUTPUT);
    3786:	87 e0       	ldi	r24, 0x07	; 7
    3788:	61 e0       	ldi	r22, 0x01	; 1
    378a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	pinMode(Z_DIR_PIN, OUTPUT);
    378e:	84 e0       	ldi	r24, 0x04	; 4
    3790:	61 e0       	ldi	r22, 0x01	; 1
    3792:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	//pinMode(Z_ENABLE_PIN, OUTPUT);
	pinMode(Z_MIN_PIN, INPUT);
    3796:	80 e1       	ldi	r24, 0x10	; 16
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>
	pinMode(Z_MAX_PIN, INPUT);
    379e:	83 e1       	ldi	r24, 0x13	; 19
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	0e 94 63 28 	call	0x50c6	; 0x50c6 <pinMode>

	//figure our stuff.

	setMillimeters();
    37a6:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_Z14setMillimetersv>
	setPosition(0.0, 0.0, 0.0);
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	9b 01       	movw	r18, r22
    37b4:	ac 01       	movw	r20, r24
    37b6:	7b 01       	movw	r14, r22
    37b8:	8c 01       	movw	r16, r24
    37ba:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z11setPositionddd>
	//print();
	calculate_deltas();
    37be:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <_Z16calculate_deltasv>
	myFeedRateDelay = calculate_feedrate_delay(feedRate);

}

void setMaxFeedRate() {
	myFeedRateDelay = getMinDelay();
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	a6 e9       	ldi	r26, 0x96	; 150
    37c8:	b3 e4       	ldi	r27, 0x43	; 67
    37ca:	80 93 f8 04 	sts	0x04F8, r24
    37ce:	90 93 f9 04 	sts	0x04F9, r25
    37d2:	a0 93 fa 04 	sts	0x04FA, r26
    37d6:	b0 93 fb 04 	sts	0x04FB, r27
	setMillimeters();
	setPosition(0.0, 0.0, 0.0);
	//print();
	calculate_deltas();
	setMaxFeedRate();
}
    37da:	1f 91       	pop	r17
    37dc:	0f 91       	pop	r16
    37de:	ff 90       	pop	r15
    37e0:	ef 90       	pop	r14
    37e2:	08 95       	ret

000037e4 <_Z13search_stringcPci>:
	Serial.println("ok");
	//	Serial.println(line, DEC);
}

//look for the number that appears after the char key and return it
double search_string(char key, char instruction[], int string_size) {
    37e4:	df 93       	push	r29
    37e6:	cf 93       	push	r28
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	2a 97       	sbiw	r28, 0x0a	; 10
    37ee:	0f b6       	in	r0, 0x3f	; 63
    37f0:	f8 94       	cli
    37f2:	de bf       	out	0x3e, r29	; 62
    37f4:	0f be       	out	0x3f, r0	; 63
    37f6:	cd bf       	out	0x3d, r28	; 61
    37f8:	28 2f       	mov	r18, r24
	char temp[10] = "";
    37fa:	19 82       	std	Y+1, r1	; 0x01
    37fc:	1a 82       	std	Y+2, r1	; 0x02
    37fe:	1b 82       	std	Y+3, r1	; 0x03
    3800:	1c 82       	std	Y+4, r1	; 0x04
    3802:	fe 01       	movw	r30, r28
    3804:	35 96       	adiw	r30, 0x05	; 5
    3806:	86 e0       	ldi	r24, 0x06	; 6
    3808:	df 01       	movw	r26, r30
    380a:	1d 92       	st	X+, r1
    380c:	8a 95       	dec	r24
    380e:	e9 f7       	brne	.-6      	; 0x380a <_Z13search_stringcPci+0x26>
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	24 c0       	rjmp	.+72     	; 0x385c <_Z13search_stringcPci+0x78>

	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key) {
    3814:	e6 0f       	add	r30, r22
    3816:	f7 1f       	adc	r31, r23
    3818:	80 81       	ld	r24, Z
    381a:	9f 5f       	subi	r25, 0xFF	; 255
    381c:	82 17       	cp	r24, r18
    381e:	f1 f4       	brne	.+60     	; 0x385c <_Z13search_stringcPci+0x78>
			i++;
    3820:	de 01       	movw	r26, r28
    3822:	11 96       	adiw	r26, 0x01	; 1
			int k = 0;
			while (i < string_size && k < 10) {
    3824:	9e 01       	movw	r18, r28
    3826:	25 5f       	subi	r18, 0xF5	; 245
    3828:	3f 4f       	sbci	r19, 0xFF	; 255
    382a:	09 c0       	rjmp	.+18     	; 0x383e <_Z13search_stringcPci+0x5a>
				if (instruction[i] == 0 || instruction[i] == ' ')
    382c:	e6 0f       	add	r30, r22
    382e:	f7 1f       	adc	r31, r23
    3830:	80 81       	ld	r24, Z
    3832:	88 23       	and	r24, r24
    3834:	61 f0       	breq	.+24     	; 0x384e <_Z13search_stringcPci+0x6a>
    3836:	80 32       	cpi	r24, 0x20	; 32
    3838:	51 f0       	breq	.+20     	; 0x384e <_Z13search_stringcPci+0x6a>
					break;

				temp[k] = instruction[i];
    383a:	8d 93       	st	X+, r24
				i++;
    383c:	9f 5f       	subi	r25, 0xFF	; 255

	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key) {
			i++;
			int k = 0;
			while (i < string_size && k < 10) {
    383e:	e9 2f       	mov	r30, r25
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	e4 17       	cp	r30, r20
    3844:	f5 07       	cpc	r31, r21
    3846:	1c f4       	brge	.+6      	; 0x384e <_Z13search_stringcPci+0x6a>
    3848:	a2 17       	cp	r26, r18
    384a:	b3 07       	cpc	r27, r19
    384c:	79 f7       	brne	.-34     	; 0x382c <_Z13search_stringcPci+0x48>

				temp[k] = instruction[i];
				i++;
				k++;
			}
			return strtod(temp, NULL);
    384e:	ce 01       	movw	r24, r28
    3850:	01 96       	adiw	r24, 0x01	; 1
    3852:	60 e0       	ldi	r22, 0x00	; 0
    3854:	70 e0       	ldi	r23, 0x00	; 0
    3856:	0e 94 db 01 	call	0x3b6	; 0x3b6 <strtod>
    385a:	09 c0       	rjmp	.+18     	; 0x386e <_Z13search_stringcPci+0x8a>

//look for the number that appears after the char key and return it
double search_string(char key, char instruction[], int string_size) {
	char temp[10] = "";

	for (byte i = 0; i < string_size; i++) {
    385c:	e9 2f       	mov	r30, r25
    385e:	f0 e0       	ldi	r31, 0x00	; 0
    3860:	e4 17       	cp	r30, r20
    3862:	f5 07       	cpc	r31, r21
    3864:	bc f2       	brlt	.-82     	; 0x3814 <_Z13search_stringcPci+0x30>
    3866:	60 e0       	ldi	r22, 0x00	; 0
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	90 e0       	ldi	r25, 0x00	; 0
			return strtod(temp, NULL);
		}
	}
	// if no key then return 0
	return 0;
}
    386e:	2a 96       	adiw	r28, 0x0a	; 10
    3870:	0f b6       	in	r0, 0x3f	; 63
    3872:	f8 94       	cli
    3874:	de bf       	out	0x3e, r29	; 62
    3876:	0f be       	out	0x3f, r0	; 63
    3878:	cd bf       	out	0x3d, r28	; 61
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <_Z14process_stringPci>:
//  serial_count = 0;

}

//Read the string and execute instructions
void process_string(char instruction[], int size) {
    3880:	2f 92       	push	r2
    3882:	3f 92       	push	r3
    3884:	4f 92       	push	r4
    3886:	5f 92       	push	r5
    3888:	6f 92       	push	r6
    388a:	7f 92       	push	r7
    388c:	8f 92       	push	r8
    388e:	9f 92       	push	r9
    3890:	af 92       	push	r10
    3892:	bf 92       	push	r11
    3894:	cf 92       	push	r12
    3896:	df 92       	push	r13
    3898:	ef 92       	push	r14
    389a:	ff 92       	push	r15
    389c:	0f 93       	push	r16
    389e:	1f 93       	push	r17
    38a0:	df 93       	push	r29
    38a2:	cf 93       	push	r28
    38a4:	cd b7       	in	r28, 0x3d	; 61
    38a6:	de b7       	in	r29, 0x3e	; 62
    38a8:	63 97       	sbiw	r28, 0x13	; 19
    38aa:	0f b6       	in	r0, 0x3f	; 63
    38ac:	f8 94       	cli
    38ae:	de bf       	out	0x3e, r29	; 62
    38b0:	0f be       	out	0x3f, r0	; 63
    38b2:	cd bf       	out	0x3d, r28	; 61
    38b4:	3c 01       	movw	r6, r24
    38b6:	2b 01       	movw	r4, r22
	//the character / means delete block... used for comments and stuff.
	if (instruction[0] == '/' || instruction[0] == ';'
    38b8:	dc 01       	movw	r26, r24
    38ba:	8c 91       	ld	r24, X
    38bc:	8f 32       	cpi	r24, 0x2F	; 47
    38be:	09 f4       	brne	.+2      	; 0x38c2 <_Z14process_stringPci+0x42>
    38c0:	da c2       	rjmp	.+1460   	; 0x3e76 <_Z14process_stringPci+0x5f6>
    38c2:	8b 33       	cpi	r24, 0x3B	; 59
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <_Z14process_stringPci+0x48>
    38c6:	d7 c2       	rjmp	.+1454   	; 0x3e76 <_Z14process_stringPci+0x5f6>
    38c8:	83 32       	cpi	r24, 0x23	; 35
    38ca:	09 f4       	brne	.+2      	; 0x38ce <_Z14process_stringPci+0x4e>
    38cc:	d4 c2       	rjmp	.+1448   	; 0x3e76 <_Z14process_stringPci+0x5f6>
int y_direction = 1;
int z_direction = 1;

double to_units(double steps_per_unit, double steps) {

	return steps / steps_per_unit;
    38ce:	60 91 d4 04 	lds	r22, 0x04D4
    38d2:	70 91 d5 04 	lds	r23, 0x04D5
    38d6:	80 91 d6 04 	lds	r24, 0x04D6
    38da:	90 91 d7 04 	lds	r25, 0x04D7
    38de:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    38e2:	20 91 a0 05 	lds	r18, 0x05A0
    38e6:	30 91 a1 05 	lds	r19, 0x05A1
    38ea:	40 91 a2 05 	lds	r20, 0x05A2
    38ee:	50 91 a3 05 	lds	r21, 0x05A3
    38f2:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    38f6:	69 83       	std	Y+1, r22	; 0x01
    38f8:	7a 83       	std	Y+2, r23	; 0x02
    38fa:	8b 83       	std	Y+3, r24	; 0x03
    38fc:	9c 83       	std	Y+4, r25	; 0x04
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key)
    38fe:	60 91 d8 04 	lds	r22, 0x04D8
    3902:	70 91 d9 04 	lds	r23, 0x04D9
    3906:	80 91 da 04 	lds	r24, 0x04DA
    390a:	90 91 db 04 	lds	r25, 0x04DB
    390e:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3912:	20 91 a4 05 	lds	r18, 0x05A4
    3916:	30 91 a5 05 	lds	r19, 0x05A5
    391a:	40 91 a6 05 	lds	r20, 0x05A6
    391e:	50 91 a7 05 	lds	r21, 0x05A7
    3922:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3926:	6d 83       	std	Y+5, r22	; 0x05
    3928:	7e 83       	std	Y+6, r23	; 0x06
    392a:	8f 83       	std	Y+7, r24	; 0x07
    392c:	98 87       	std	Y+8, r25	; 0x08
    392e:	60 91 dc 04 	lds	r22, 0x04DC
    3932:	70 91 dd 04 	lds	r23, 0x04DD
    3936:	80 91 de 04 	lds	r24, 0x04DE
    393a:	90 91 df 04 	lds	r25, 0x04DF
    393e:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3942:	20 91 a8 05 	lds	r18, 0x05A8
    3946:	30 91 a9 05 	lds	r19, 0x05A9
    394a:	40 91 aa 05 	lds	r20, 0x05AA
    394e:	50 91 ab 05 	lds	r21, 0x05AB
    3952:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3956:	7b 01       	movw	r14, r22
    3958:	8c 01       	movw	r16, r24
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	06 c0       	rjmp	.+12     	; 0x396a <_Z14process_stringPci+0xea>
    395e:	e6 0d       	add	r30, r6
    3960:	f7 1d       	adc	r31, r7
    3962:	80 81       	ld	r24, Z
    3964:	88 35       	cpi	r24, 0x58	; 88
    3966:	79 f0       	breq	.+30     	; 0x3986 <_Z14process_stringPci+0x106>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3968:	9f 5f       	subi	r25, 0xFF	; 255
    396a:	e9 2f       	mov	r30, r25
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	e4 15       	cp	r30, r4
    3970:	f5 05       	cpc	r31, r5
    3972:	ac f3       	brlt	.-22     	; 0x395e <_Z14process_stringPci+0xde>
    3974:	b9 81       	ldd	r27, Y+1	; 0x01
    3976:	ba 87       	std	Y+10, r27	; 0x0a
    3978:	ea 81       	ldd	r30, Y+2	; 0x02
    397a:	eb 87       	std	Y+11, r30	; 0x0b
    397c:	fb 81       	ldd	r31, Y+3	; 0x03
    397e:	fc 87       	std	Y+12, r31	; 0x0c
    3980:	2c 81       	ldd	r18, Y+4	; 0x04
    3982:	2d 87       	std	Y+13, r18	; 0x0d
    3984:	09 c0       	rjmp	.+18     	; 0x3998 <_Z14process_stringPci+0x118>

	target.x = currentPosition.x;
	target.y = currentPosition.y;
	target.z = currentPosition.z;
	if (has_command('X', instruction, size))
		target.x = search_string('X', instruction, size);
    3986:	88 e5       	ldi	r24, 0x58	; 88
    3988:	b3 01       	movw	r22, r6
    398a:	a2 01       	movw	r20, r4
    398c:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3990:	6a 87       	std	Y+10, r22	; 0x0a
    3992:	7b 87       	std	Y+11, r23	; 0x0b
    3994:	8c 87       	std	Y+12, r24	; 0x0c
    3996:	9d 87       	std	Y+13, r25	; 0x0d
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	06 c0       	rjmp	.+12     	; 0x39a8 <_Z14process_stringPci+0x128>
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key)
    399c:	e6 0d       	add	r30, r6
    399e:	f7 1d       	adc	r31, r7
    39a0:	80 81       	ld	r24, Z
    39a2:	89 35       	cpi	r24, 0x59	; 89
    39a4:	61 f0       	breq	.+24     	; 0x39be <_Z14process_stringPci+0x13e>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    39a6:	9f 5f       	subi	r25, 0xFF	; 255
    39a8:	e9 2f       	mov	r30, r25
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	e4 15       	cp	r30, r4
    39ae:	f5 05       	cpc	r31, r5
    39b0:	ac f3       	brlt	.-22     	; 0x399c <_Z14process_stringPci+0x11c>
    39b2:	8d 80       	ldd	r8, Y+5	; 0x05
    39b4:	3e 80       	ldd	r3, Y+6	; 0x06
    39b6:	2f 80       	ldd	r2, Y+7	; 0x07
    39b8:	48 85       	ldd	r20, Y+8	; 0x08
    39ba:	49 87       	std	Y+9, r20	; 0x09
    39bc:	09 c0       	rjmp	.+18     	; 0x39d0 <_Z14process_stringPci+0x150>
	target.y = currentPosition.y;
	target.z = currentPosition.z;
	if (has_command('X', instruction, size))
		target.x = search_string('X', instruction, size);
	if (has_command('Y', instruction, size))
		target.y = search_string('Y', instruction, size);
    39be:	89 e5       	ldi	r24, 0x59	; 89
    39c0:	b3 01       	movw	r22, r6
    39c2:	a2 01       	movw	r20, r4
    39c4:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    39c8:	86 2e       	mov	r8, r22
    39ca:	37 2e       	mov	r3, r23
    39cc:	28 2e       	mov	r2, r24
    39ce:	99 87       	std	Y+9, r25	; 0x09
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	06 c0       	rjmp	.+12     	; 0x39e0 <_Z14process_stringPci+0x160>
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key)
    39d4:	e6 0d       	add	r30, r6
    39d6:	f7 1d       	adc	r31, r7
    39d8:	80 81       	ld	r24, Z
    39da:	8a 35       	cpi	r24, 0x5A	; 90
    39dc:	59 f0       	breq	.+22     	; 0x39f4 <_Z14process_stringPci+0x174>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    39de:	9f 5f       	subi	r25, 0xFF	; 255
    39e0:	e9 2f       	mov	r30, r25
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	e4 15       	cp	r30, r4
    39e6:	f5 05       	cpc	r31, r5
    39e8:	ac f3       	brlt	.-22     	; 0x39d4 <_Z14process_stringPci+0x154>
    39ea:	ee 86       	std	Y+14, r14	; 0x0e
    39ec:	ff 86       	std	Y+15, r15	; 0x0f
    39ee:	08 8b       	std	Y+16, r16	; 0x10
    39f0:	19 8b       	std	Y+17, r17	; 0x11
    39f2:	09 c0       	rjmp	.+18     	; 0x3a06 <_Z14process_stringPci+0x186>
	if (has_command('X', instruction, size))
		target.x = search_string('X', instruction, size);
	if (has_command('Y', instruction, size))
		target.y = search_string('Y', instruction, size);
	if (has_command('Z', instruction, size))
		target.z = search_string('Z', instruction, size);
    39f4:	8a e5       	ldi	r24, 0x5A	; 90
    39f6:	b3 01       	movw	r22, r6
    39f8:	a2 01       	movw	r20, r4
    39fa:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    39fe:	6e 87       	std	Y+14, r22	; 0x0e
    3a00:	7f 87       	std	Y+15, r23	; 0x0f
    3a02:	88 8b       	std	Y+16, r24	; 0x10
    3a04:	99 8b       	std	Y+17, r25	; 0x11

	if (!abs_mode) {
    3a06:	80 91 4e 02 	lds	r24, 0x024E
    3a0a:	88 23       	and	r24, r24
    3a0c:	89 f5       	brne	.+98     	; 0x3a70 <_Z14process_stringPci+0x1f0>
		target.x = currentPosition.x + search_string('X', instruction, size);
    3a0e:	88 e5       	ldi	r24, 0x58	; 88
    3a10:	b3 01       	movw	r22, r6
    3a12:	a2 01       	movw	r20, r4
    3a14:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3a18:	9b 01       	movw	r18, r22
    3a1a:	ac 01       	movw	r20, r24
    3a1c:	69 81       	ldd	r22, Y+1	; 0x01
    3a1e:	7a 81       	ldd	r23, Y+2	; 0x02
    3a20:	8b 81       	ldd	r24, Y+3	; 0x03
    3a22:	9c 81       	ldd	r25, Y+4	; 0x04
    3a24:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3a28:	6a 87       	std	Y+10, r22	; 0x0a
    3a2a:	7b 87       	std	Y+11, r23	; 0x0b
    3a2c:	8c 87       	std	Y+12, r24	; 0x0c
    3a2e:	9d 87       	std	Y+13, r25	; 0x0d
		target.y = currentPosition.y + search_string('Y', instruction, size);
    3a30:	89 e5       	ldi	r24, 0x59	; 89
    3a32:	b3 01       	movw	r22, r6
    3a34:	a2 01       	movw	r20, r4
    3a36:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3a3a:	9b 01       	movw	r18, r22
    3a3c:	ac 01       	movw	r20, r24
    3a3e:	6d 81       	ldd	r22, Y+5	; 0x05
    3a40:	7e 81       	ldd	r23, Y+6	; 0x06
    3a42:	8f 81       	ldd	r24, Y+7	; 0x07
    3a44:	98 85       	ldd	r25, Y+8	; 0x08
    3a46:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3a4a:	86 2e       	mov	r8, r22
    3a4c:	37 2e       	mov	r3, r23
    3a4e:	28 2e       	mov	r2, r24
    3a50:	99 87       	std	Y+9, r25	; 0x09
		;
		target.z = currentPosition.z + search_string('X', instruction, size);
    3a52:	88 e5       	ldi	r24, 0x58	; 88
    3a54:	b3 01       	movw	r22, r6
    3a56:	a2 01       	movw	r20, r4
    3a58:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3a5c:	9b 01       	movw	r18, r22
    3a5e:	ac 01       	movw	r20, r24
    3a60:	c8 01       	movw	r24, r16
    3a62:	b7 01       	movw	r22, r14
    3a64:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3a68:	6e 87       	std	Y+14, r22	; 0x0e
    3a6a:	7f 87       	std	Y+15, r23	; 0x0f
    3a6c:	88 8b       	std	Y+16, r24	; 0x10
    3a6e:	99 8b       	std	Y+17, r25	; 0x11
		;
	}
	//set our target.
	set_target(target.x, target.y, target.z);
    3a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    3a72:	3b 85       	ldd	r19, Y+11	; 0x0b
    3a74:	4c 85       	ldd	r20, Y+12	; 0x0c
    3a76:	5d 85       	ldd	r21, Y+13	; 0x0d
    3a78:	b9 01       	movw	r22, r18
    3a7a:	ca 01       	movw	r24, r20
    3a7c:	a2 2d       	mov	r26, r2
    3a7e:	b9 85       	ldd	r27, Y+9	; 0x09
    3a80:	28 2d       	mov	r18, r8
    3a82:	33 2d       	mov	r19, r3
    3a84:	ad 01       	movw	r20, r26
    3a86:	ee 85       	ldd	r30, Y+14	; 0x0e
    3a88:	ff 85       	ldd	r31, Y+15	; 0x0f
    3a8a:	d8 88       	ldd	r13, Y+16	; 0x10
    3a8c:	c9 88       	ldd	r12, Y+17	; 0x11
    3a8e:	7f 01       	movw	r14, r30
    3a90:	0d 2d       	mov	r16, r13
    3a92:	1c 2d       	mov	r17, r12
    3a94:	0e 94 1b 18 	call	0x3036	; 0x3036 <_Z10set_targetddd>

	double feedrate = search_string('F', instruction, size);
    3a98:	86 e4       	ldi	r24, 0x46	; 70
    3a9a:	b3 01       	movw	r22, r6
    3a9c:	a2 01       	movw	r20, r4
    3a9e:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3aa2:	7b 01       	movw	r14, r22
    3aa4:	8c 01       	movw	r16, r24
	if (feedrate > 0)
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e0       	ldi	r20, 0x00	; 0
    3aac:	50 e0       	ldi	r21, 0x00	; 0
    3aae:	0e 94 1e 2c 	call	0x583c	; 0x583c <__gesf2>
    3ab2:	18 16       	cp	r1, r24
    3ab4:	44 f4       	brge	.+16     	; 0x3ac6 <_Z14process_stringPci+0x246>
		nominalFeedRate = feedrate;
    3ab6:	e0 92 fc 04 	sts	0x04FC, r14
    3aba:	f0 92 fd 04 	sts	0x04FD, r15
    3abe:	00 93 fe 04 	sts	0x04FE, r16
    3ac2:	10 93 ff 04 	sts	0x04FF, r17
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	06 c0       	rjmp	.+12     	; 0x3ad6 <_Z14process_stringPci+0x256>
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key)
    3aca:	e6 0d       	add	r30, r6
    3acc:	f7 1d       	adc	r31, r7
    3ace:	80 81       	ld	r24, Z
    3ad0:	88 35       	cpi	r24, 0x58	; 88
    3ad2:	41 f1       	breq	.+80     	; 0x3b24 <_Z14process_stringPci+0x2a4>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3ad4:	9f 5f       	subi	r25, 0xFF	; 255
    3ad6:	e9 2f       	mov	r30, r25
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	e4 15       	cp	r30, r4
    3adc:	f5 05       	cpc	r31, r5
    3ade:	ac f3       	brlt	.-22     	; 0x3aca <_Z14process_stringPci+0x24a>
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	06 c0       	rjmp	.+12     	; 0x3af0 <_Z14process_stringPci+0x270>
		if (instruction[i] == key)
    3ae4:	e6 0d       	add	r30, r6
    3ae6:	f7 1d       	adc	r31, r7
    3ae8:	80 81       	ld	r24, Z
    3aea:	89 35       	cpi	r24, 0x59	; 89
    3aec:	d9 f0       	breq	.+54     	; 0x3b24 <_Z14process_stringPci+0x2a4>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3aee:	9f 5f       	subi	r25, 0xFF	; 255
    3af0:	e9 2f       	mov	r30, r25
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	e4 15       	cp	r30, r4
    3af6:	f5 05       	cpc	r31, r5
    3af8:	ac f3       	brlt	.-22     	; 0x3ae4 <_Z14process_stringPci+0x264>
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	06 c0       	rjmp	.+12     	; 0x3b0a <_Z14process_stringPci+0x28a>
		if (instruction[i] == key)
    3afe:	e6 0d       	add	r30, r6
    3b00:	f7 1d       	adc	r31, r7
    3b02:	80 81       	ld	r24, Z
    3b04:	8a 35       	cpi	r24, 0x5A	; 90
    3b06:	71 f0       	breq	.+28     	; 0x3b24 <_Z14process_stringPci+0x2a4>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3b08:	9f 5f       	subi	r25, 0xFF	; 255
    3b0a:	e9 2f       	mov	r30, r25
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	e4 15       	cp	r30, r4
    3b10:	f5 05       	cpc	r31, r5
    3b12:	ac f3       	brlt	.-22     	; 0x3afe <_Z14process_stringPci+0x27e>
    3b14:	21 c0       	rjmp	.+66     	; 0x3b58 <_Z14process_stringPci+0x2d8>
		if (instruction[i] == key)
    3b16:	e6 0d       	add	r30, r6
    3b18:	f7 1d       	adc	r31, r7
    3b1a:	80 81       	ld	r24, Z
    3b1c:	87 34       	cpi	r24, 0x47	; 71
    3b1e:	e1 f0       	breq	.+56     	; 0x3b58 <_Z14process_stringPci+0x2d8>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3b20:	9f 5f       	subi	r25, 0xFF	; 255
    3b22:	01 c0       	rjmp	.+2      	; 0x3b26 <_Z14process_stringPci+0x2a6>
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	e9 2f       	mov	r30, r25
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	e4 15       	cp	r30, r4
    3b2c:	f5 05       	cpc	r31, r5
    3b2e:	9c f3       	brlt	.-26     	; 0x3b16 <_Z14process_stringPci+0x296>
	if ((has_command('X', instruction, size)
			|| has_command('Y', instruction, size)
			|| has_command('Z', instruction, size))
			&& !has_command('G', instruction, size)) {
		//	setFeedRate(nominalFeedRate);
		goTo(target.x, target.y, target.z);
    3b30:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b32:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b34:	4c 85       	ldd	r20, Y+12	; 0x0c
    3b36:	5d 85       	ldd	r21, Y+13	; 0x0d
    3b38:	b9 01       	movw	r22, r18
    3b3a:	ca 01       	movw	r24, r20
    3b3c:	a2 2d       	mov	r26, r2
    3b3e:	b9 85       	ldd	r27, Y+9	; 0x09
    3b40:	28 2d       	mov	r18, r8
    3b42:	33 2d       	mov	r19, r3
    3b44:	ad 01       	movw	r20, r26
    3b46:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b48:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b4a:	d8 88       	ldd	r13, Y+16	; 0x10
    3b4c:	c9 88       	ldd	r12, Y+17	; 0x11
    3b4e:	7f 01       	movw	r14, r30
    3b50:	0d 2d       	mov	r16, r13
    3b52:	1c 2d       	mov	r17, r12
    3b54:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	06 c0       	rjmp	.+12     	; 0x3b68 <_Z14process_stringPci+0x2e8>
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key)
    3b5c:	e6 0d       	add	r30, r6
    3b5e:	f7 1d       	adc	r31, r7
    3b60:	80 81       	ld	r24, Z
    3b62:	87 34       	cpi	r24, 0x47	; 71
    3b64:	39 f0       	breq	.+14     	; 0x3b74 <_Z14process_stringPci+0x2f4>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3b66:	9f 5f       	subi	r25, 0xFF	; 255
    3b68:	e9 2f       	mov	r30, r25
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	e4 15       	cp	r30, r4
    3b6e:	f5 05       	cpc	r31, r5
    3b70:	ac f3       	brlt	.-22     	; 0x3b5c <_Z14process_stringPci+0x2dc>
    3b72:	36 c1       	rjmp	.+620    	; 0x3de0 <_Z14process_stringPci+0x560>

	}

	if (has_command('G', instruction, size)) {
		//which one?
		code = (int) search_string('G', instruction, size);
    3b74:	87 e4       	ldi	r24, 0x47	; 71
    3b76:	b3 01       	movw	r22, r6
    3b78:	a2 01       	movw	r20, r4
    3b7a:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3b7e:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    3b82:	96 2e       	mov	r9, r22
		switch (code) {
    3b84:	54 e1       	ldi	r21, 0x14	; 20
    3b86:	65 17       	cp	r22, r21
    3b88:	09 f4       	brne	.+2      	; 0x3b8c <_Z14process_stringPci+0x30c>
    3b8a:	e3 c0       	rjmp	.+454    	; 0x3d52 <_Z14process_stringPci+0x4d2>
    3b8c:	56 17       	cp	r21, r22
    3b8e:	98 f0       	brcs	.+38     	; 0x3bb6 <_Z14process_stringPci+0x336>
    3b90:	a3 e0       	ldi	r26, 0x03	; 3
    3b92:	a6 17       	cp	r26, r22
    3b94:	58 f0       	brcs	.+22     	; 0x3bac <_Z14process_stringPci+0x32c>
    3b96:	b2 e0       	ldi	r27, 0x02	; 2
    3b98:	6b 17       	cp	r22, r27
    3b9a:	08 f0       	brcs	.+2      	; 0x3b9e <_Z14process_stringPci+0x31e>
    3b9c:	54 c0       	rjmp	.+168    	; 0x3c46 <_Z14process_stringPci+0x3c6>
    3b9e:	66 23       	and	r22, r22
    3ba0:	31 f1       	breq	.+76     	; 0x3bee <_Z14process_stringPci+0x36e>
    3ba2:	e1 e0       	ldi	r30, 0x01	; 1
    3ba4:	6e 17       	cp	r22, r30
    3ba6:	09 f0       	breq	.+2      	; 0x3baa <_Z14process_stringPci+0x32a>
    3ba8:	15 c1       	rjmp	.+554    	; 0x3dd4 <_Z14process_stringPci+0x554>
    3baa:	2e c0       	rjmp	.+92     	; 0x3c08 <_Z14process_stringPci+0x388>
    3bac:	f4 e0       	ldi	r31, 0x04	; 4
    3bae:	6f 17       	cp	r22, r31
    3bb0:	09 f0       	breq	.+2      	; 0x3bb4 <_Z14process_stringPci+0x334>
    3bb2:	10 c1       	rjmp	.+544    	; 0x3dd4 <_Z14process_stringPci+0x554>
    3bb4:	b6 c0       	rjmp	.+364    	; 0x3d22 <_Z14process_stringPci+0x4a2>
    3bb6:	2e e1       	ldi	r18, 0x1E	; 30
    3bb8:	62 17       	cp	r22, r18
    3bba:	09 f4       	brne	.+2      	; 0x3bbe <_Z14process_stringPci+0x33e>
    3bbc:	d0 c0       	rjmp	.+416    	; 0x3d5e <_Z14process_stringPci+0x4de>
    3bbe:	26 17       	cp	r18, r22
    3bc0:	48 f0       	brcs	.+18     	; 0x3bd4 <_Z14process_stringPci+0x354>
    3bc2:	45 e1       	ldi	r20, 0x15	; 21
    3bc4:	64 17       	cp	r22, r20
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <_Z14process_stringPci+0x34a>
    3bc8:	c7 c0       	rjmp	.+398    	; 0x3d58 <_Z14process_stringPci+0x4d8>
    3bca:	5c e1       	ldi	r21, 0x1C	; 28
    3bcc:	65 17       	cp	r22, r21
    3bce:	09 f0       	breq	.+2      	; 0x3bd2 <_Z14process_stringPci+0x352>
    3bd0:	01 c1       	rjmp	.+514    	; 0x3dd4 <_Z14process_stringPci+0x554>
    3bd2:	e5 c0       	rjmp	.+458    	; 0x3d9e <_Z14process_stringPci+0x51e>
    3bd4:	8b e5       	ldi	r24, 0x5B	; 91
    3bd6:	98 16       	cp	r9, r24
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <_Z14process_stringPci+0x35c>
    3bda:	ee c0       	rjmp	.+476    	; 0x3db8 <_Z14process_stringPci+0x538>
    3bdc:	9c e5       	ldi	r25, 0x5C	; 92
    3bde:	99 16       	cp	r9, r25
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <_Z14process_stringPci+0x364>
    3be2:	ed c0       	rjmp	.+474    	; 0x3dbe <_Z14process_stringPci+0x53e>
    3be4:	aa e5       	ldi	r26, 0x5A	; 90
    3be6:	9a 16       	cp	r9, r26
    3be8:	09 f0       	breq	.+2      	; 0x3bec <_Z14process_stringPci+0x36c>
    3bea:	f4 c0       	rjmp	.+488    	; 0x3dd4 <_Z14process_stringPci+0x554>
    3bec:	e1 c0       	rjmp	.+450    	; 0x3db0 <_Z14process_stringPci+0x530>
	myFeedRateDelay = calculate_feedrate_delay(feedRate);

}

void setMaxFeedRate() {
	myFeedRateDelay = getMinDelay();
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	a6 e9       	ldi	r26, 0x96	; 150
    3bf4:	b3 e4       	ldi	r27, 0x43	; 67
    3bf6:	80 93 f8 04 	sts	0x04F8, r24
    3bfa:	90 93 f9 04 	sts	0x04F9, r25
    3bfe:	a0 93 fa 04 	sts	0x04FA, r26
    3c02:	b0 93 fb 04 	sts	0x04FB, r27
    3c06:	0a c0       	rjmp	.+20     	; 0x3c1c <_Z14process_stringPci+0x39c>
			goTo(target.x, target.y, target.z);
			break;

			//Linear Interpolation
		case 1:
			setFeedRate(nominalFeedRate);
    3c08:	60 91 fc 04 	lds	r22, 0x04FC
    3c0c:	70 91 fd 04 	lds	r23, 0x04FD
    3c10:	80 91 fe 04 	lds	r24, 0x04FE
    3c14:	90 91 ff 04 	lds	r25, 0x04FF
    3c18:	0e 94 28 16 	call	0x2c50	; 0x2c50 <_Z11setFeedRated>
			goTo(target.x, target.y, target.z);
    3c1c:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c1e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c20:	4c 85       	ldd	r20, Y+12	; 0x0c
    3c22:	5d 85       	ldd	r21, Y+13	; 0x0d
    3c24:	b9 01       	movw	r22, r18
    3c26:	ca 01       	movw	r24, r20
    3c28:	a2 2d       	mov	r26, r2
    3c2a:	b9 85       	ldd	r27, Y+9	; 0x09
    3c2c:	28 2d       	mov	r18, r8
    3c2e:	33 2d       	mov	r19, r3
    3c30:	ad 01       	movw	r20, r26
    3c32:	ee 85       	ldd	r30, Y+14	; 0x0e
    3c34:	ff 85       	ldd	r31, Y+15	; 0x0f
    3c36:	d8 88       	ldd	r13, Y+16	; 0x10
    3c38:	c9 88       	ldd	r12, Y+17	; 0x11
    3c3a:	7f 01       	movw	r14, r30
    3c3c:	0d 2d       	mov	r16, r13
    3c3e:	1c 2d       	mov	r17, r12
    3c40:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
    3c44:	cd c0       	rjmp	.+410    	; 0x3de0 <_Z14process_stringPci+0x560>
			//Counterclockwise arc
		case 3:
			FloatPoint cent;

			// Centre coordinates are always relative
			cent.x = search_string('I', instruction, size) + currentPosition.x;
    3c46:	89 e4       	ldi	r24, 0x49	; 73
    3c48:	b3 01       	movw	r22, r6
    3c4a:	a2 01       	movw	r20, r4
    3c4c:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3c50:	5b 01       	movw	r10, r22
    3c52:	6c 01       	movw	r12, r24
			cent.y = search_string('J', instruction, size) + currentPosition.y;
    3c54:	8a e4       	ldi	r24, 0x4A	; 74
    3c56:	b3 01       	movw	r22, r6
    3c58:	a2 01       	movw	r20, r4
    3c5a:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3c5e:	7b 01       	movw	r14, r22
    3c60:	8c 01       	movw	r16, r24
			cent.z = target.z;
			bool clockwise;
			clockwise = (code == 2);

			moveAlongCurve(cent.x, cent.y, cent.z, target.x, target.y, target.z,
					clockwise);
    3c62:	ed b7       	in	r30, 0x3d	; 61
    3c64:	fe b7       	in	r31, 0x3e	; 62
    3c66:	39 97       	sbiw	r30, 0x09	; 9
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	fe bf       	out	0x3e, r31	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	ed bf       	out	0x3d, r30	; 61
    3c72:	4d b7       	in	r20, 0x3d	; 61
    3c74:	5e b7       	in	r21, 0x3e	; 62
    3c76:	4f 5f       	subi	r20, 0xFF	; 255
    3c78:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7a:	5b 8b       	std	Y+19, r21	; 0x13
    3c7c:	4a 8b       	std	Y+18, r20	; 0x12
    3c7e:	c6 01       	movw	r24, r12
    3c80:	b5 01       	movw	r22, r10
    3c82:	29 81       	ldd	r18, Y+1	; 0x01
    3c84:	3a 81       	ldd	r19, Y+2	; 0x02
    3c86:	4b 81       	ldd	r20, Y+3	; 0x03
    3c88:	5c 81       	ldd	r21, Y+4	; 0x04
    3c8a:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3c8e:	5b 01       	movw	r10, r22
    3c90:	6c 01       	movw	r12, r24
    3c92:	c8 01       	movw	r24, r16
    3c94:	b7 01       	movw	r22, r14
    3c96:	2d 81       	ldd	r18, Y+5	; 0x05
    3c98:	3e 81       	ldd	r19, Y+6	; 0x06
    3c9a:	4f 81       	ldd	r20, Y+7	; 0x07
    3c9c:	58 85       	ldd	r21, Y+8	; 0x08
    3c9e:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    3ca2:	7b 01       	movw	r14, r22
    3ca4:	8c 01       	movw	r16, r24
    3ca6:	28 2d       	mov	r18, r8
    3ca8:	33 2d       	mov	r19, r3
    3caa:	42 2d       	mov	r20, r2
    3cac:	59 85       	ldd	r21, Y+9	; 0x09
    3cae:	c9 01       	movw	r24, r18
    3cb0:	da 01       	movw	r26, r20
    3cb2:	ea 89       	ldd	r30, Y+18	; 0x12
    3cb4:	fb 89       	ldd	r31, Y+19	; 0x13
    3cb6:	80 83       	st	Z, r24
    3cb8:	91 83       	std	Z+1, r25	; 0x01
    3cba:	a2 83       	std	Z+2, r26	; 0x02
    3cbc:	b3 83       	std	Z+3, r27	; 0x03
    3cbe:	2e 85       	ldd	r18, Y+14	; 0x0e
    3cc0:	3f 85       	ldd	r19, Y+15	; 0x0f
    3cc2:	48 89       	ldd	r20, Y+16	; 0x10
    3cc4:	59 89       	ldd	r21, Y+17	; 0x11
    3cc6:	c9 01       	movw	r24, r18
    3cc8:	da 01       	movw	r26, r20
    3cca:	ea 89       	ldd	r30, Y+18	; 0x12
    3ccc:	fb 89       	ldd	r31, Y+19	; 0x13
    3cce:	84 83       	std	Z+4, r24	; 0x04
    3cd0:	95 83       	std	Z+5, r25	; 0x05
    3cd2:	a6 83       	std	Z+6, r26	; 0x06
    3cd4:	b7 83       	std	Z+7, r27	; 0x07
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	f2 e0       	ldi	r31, 0x02	; 2
    3cda:	9f 16       	cp	r9, r31
    3cdc:	09 f4       	brne	.+2      	; 0x3ce0 <_Z14process_stringPci+0x460>
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	aa 89       	ldd	r26, Y+18	; 0x12
    3ce2:	bb 89       	ldd	r27, Y+19	; 0x13
    3ce4:	18 96       	adiw	r26, 0x08	; 8
    3ce6:	8c 93       	st	X, r24
    3ce8:	c6 01       	movw	r24, r12
    3cea:	b5 01       	movw	r22, r10
    3cec:	a8 01       	movw	r20, r16
    3cee:	97 01       	movw	r18, r14
    3cf0:	ee 85       	ldd	r30, Y+14	; 0x0e
    3cf2:	ff 85       	ldd	r31, Y+15	; 0x0f
    3cf4:	d8 88       	ldd	r13, Y+16	; 0x10
    3cf6:	c9 88       	ldd	r12, Y+17	; 0x11
    3cf8:	7f 01       	movw	r14, r30
    3cfa:	0d 2d       	mov	r16, r13
    3cfc:	1c 2d       	mov	r17, r12
    3cfe:	ea 85       	ldd	r30, Y+10	; 0x0a
    3d00:	fb 85       	ldd	r31, Y+11	; 0x0b
    3d02:	9c 84       	ldd	r9, Y+12	; 0x0c
    3d04:	8d 84       	ldd	r8, Y+13	; 0x0d
    3d06:	5f 01       	movw	r10, r30
    3d08:	c9 2c       	mov	r12, r9
    3d0a:	d8 2c       	mov	r13, r8
    3d0c:	0e 94 e7 19 	call	0x33ce	; 0x33ce <_Z14moveAlongCurveddddddb>
    3d10:	ed b7       	in	r30, 0x3d	; 61
    3d12:	fe b7       	in	r31, 0x3e	; 62
    3d14:	39 96       	adiw	r30, 0x09	; 9
    3d16:	0f b6       	in	r0, 0x3f	; 63
    3d18:	f8 94       	cli
    3d1a:	fe bf       	out	0x3e, r31	; 62
    3d1c:	0f be       	out	0x3f, r0	; 63
    3d1e:	ed bf       	out	0x3d, r30	; 61
    3d20:	5f c0       	rjmp	.+190    	; 0x3de0 <_Z14process_stringPci+0x560>
			break;

		case 4:
			delay(1000 * (int) search_string('P', instruction, size));
    3d22:	80 e5       	ldi	r24, 0x50	; 80
    3d24:	b3 01       	movw	r22, r6
    3d26:	a2 01       	movw	r20, r4
    3d28:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3d2c:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    3d30:	28 ee       	ldi	r18, 0xE8	; 232
    3d32:	33 e0       	ldi	r19, 0x03	; 3
    3d34:	ab 01       	movw	r20, r22
    3d36:	24 9f       	mul	r18, r20
    3d38:	b0 01       	movw	r22, r0
    3d3a:	25 9f       	mul	r18, r21
    3d3c:	70 0d       	add	r23, r0
    3d3e:	34 9f       	mul	r19, r20
    3d40:	70 0d       	add	r23, r0
    3d42:	11 24       	eor	r1, r1
    3d44:	88 27       	eor	r24, r24
    3d46:	77 fd       	sbrc	r23, 7
    3d48:	80 95       	com	r24
    3d4a:	98 2f       	mov	r25, r24
    3d4c:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <delay>
    3d50:	47 c0       	rjmp	.+142    	; 0x3de0 <_Z14process_stringPci+0x560>
			break;

			//Inches for Units
		case 20:
			setInches();
    3d52:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_Z9setInchesv>
    3d56:	44 c0       	rjmp	.+136    	; 0x3de0 <_Z14process_stringPci+0x560>
			break;

			//mm for Units
		case 21:
			setMillimeters();
    3d58:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_Z14setMillimetersv>
    3d5c:	41 c0       	rjmp	.+130    	; 0x3de0 <_Z14process_stringPci+0x560>
	myFeedRateDelay = calculate_feedrate_delay(feedRate);

}

void setMaxFeedRate() {
	myFeedRateDelay = getMinDelay();
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	a6 e9       	ldi	r26, 0x96	; 150
    3d64:	b3 e4       	ldi	r27, 0x43	; 67
    3d66:	80 93 f8 04 	sts	0x04F8, r24
    3d6a:	90 93 f9 04 	sts	0x04F9, r25
    3d6e:	a0 93 fa 04 	sts	0x04FA, r26
    3d72:	b0 93 fb 04 	sts	0x04FB, r27
			break;

			//go home via an intermediate point.
		case 30:
			setMaxFeedRate();
			goTo(target.x, target.y, target.z);
    3d76:	2a 85       	ldd	r18, Y+10	; 0x0a
    3d78:	3b 85       	ldd	r19, Y+11	; 0x0b
    3d7a:	4c 85       	ldd	r20, Y+12	; 0x0c
    3d7c:	5d 85       	ldd	r21, Y+13	; 0x0d
    3d7e:	b9 01       	movw	r22, r18
    3d80:	ca 01       	movw	r24, r20
    3d82:	a2 2d       	mov	r26, r2
    3d84:	b9 85       	ldd	r27, Y+9	; 0x09
    3d86:	28 2d       	mov	r18, r8
    3d88:	33 2d       	mov	r19, r3
    3d8a:	ad 01       	movw	r20, r26
    3d8c:	ee 85       	ldd	r30, Y+14	; 0x0e
    3d8e:	ff 85       	ldd	r31, Y+15	; 0x0f
    3d90:	d8 88       	ldd	r13, Y+16	; 0x10
    3d92:	c9 88       	ldd	r12, Y+17	; 0x11
    3d94:	7f 01       	movw	r14, r30
    3d96:	0d 2d       	mov	r16, r13
    3d98:	1c 2d       	mov	r17, r12
    3d9a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
			//go home.
			goTo(0.0, 0.0, 0.0);
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	70 e0       	ldi	r23, 0x00	; 0
    3da2:	80 e0       	ldi	r24, 0x00	; 0
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	9b 01       	movw	r18, r22
    3da8:	ac 01       	movw	r20, r24
    3daa:	7b 01       	movw	r14, r22
    3dac:	8c 01       	movw	r16, r24
    3dae:	48 cf       	rjmp	.-368    	; 0x3c40 <_Z14process_stringPci+0x3c0>
			break;

			//Absolute Positioning
		case 90:
			abs_mode = true;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	80 93 4e 02 	sts	0x024E, r24
    3db6:	14 c0       	rjmp	.+40     	; 0x3de0 <_Z14process_stringPci+0x560>
			break;

			//Incremental Positioning
		case 91:

			abs_mode = false;
    3db8:	10 92 4e 02 	sts	0x024E, r1
    3dbc:	11 c0       	rjmp	.+34     	; 0x3de0 <_Z14process_stringPci+0x560>
			break;

			//Set as home
		case 92:
			setPosition(0.0, 0.0, 0.0);
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	70 e0       	ldi	r23, 0x00	; 0
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	9b 01       	movw	r18, r22
    3dc8:	ac 01       	movw	r20, r24
    3dca:	7b 01       	movw	r14, r22
    3dcc:	8c 01       	movw	r16, r24
    3dce:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z11setPositionddd>
    3dd2:	06 c0       	rjmp	.+12     	; 0x3de0 <_Z14process_stringPci+0x560>

			 break;  //TODO: add this
			 */

		default:
			Serial.print("huh? G");
    3dd4:	84 e3       	ldi	r24, 0x34	; 52
    3dd6:	96 e0       	ldi	r25, 0x06	; 6
    3dd8:	60 e2       	ldi	r22, 0x20	; 32
    3dda:	71 e0       	ldi	r23, 0x01	; 1
    3ddc:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZN5Print5printEPKc>
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	06 c0       	rjmp	.+12     	; 0x3df0 <_Z14process_stringPci+0x570>
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key)
    3de4:	e6 0d       	add	r30, r6
    3de6:	f7 1d       	adc	r31, r7
    3de8:	80 81       	ld	r24, Z
    3dea:	86 34       	cpi	r24, 0x46	; 70
    3dec:	39 f0       	breq	.+14     	; 0x3dfc <_Z14process_stringPci+0x57c>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3dee:	9f 5f       	subi	r25, 0xFF	; 255
    3df0:	e9 2f       	mov	r30, r25
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	e4 15       	cp	r30, r4
    3df6:	f5 05       	cpc	r31, r5
    3df8:	ac f3       	brlt	.-22     	; 0x3de4 <_Z14process_stringPci+0x564>
    3dfa:	11 c0       	rjmp	.+34     	; 0x3e1e <_Z14process_stringPci+0x59e>
//      Serial.println(code,DEC);
		}
	}

	if (has_command('F', instruction, size)) {
		double rate = search_string('F', instruction, size);
    3dfc:	86 e4       	ldi	r24, 0x46	; 70
    3dfe:	b3 01       	movw	r22, r6
    3e00:	a2 01       	movw	r20, r4
    3e02:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3e06:	7b 01       	movw	r14, r22
    3e08:	8c 01       	movw	r16, r24
		setFeedRate(rate);
    3e0a:	0e 94 28 16 	call	0x2c50	; 0x2c50 <_Z11setFeedRated>
		nominalFeedRate = rate;
    3e0e:	e0 92 fc 04 	sts	0x04FC, r14
    3e12:	f0 92 fd 04 	sts	0x04FD, r15
    3e16:	00 93 fe 04 	sts	0x04FE, r16
    3e1a:	10 93 ff 04 	sts	0x04FF, r17
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	06 c0       	rjmp	.+12     	; 0x3e2e <_Z14process_stringPci+0x5ae>
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
		if (instruction[i] == key)
    3e22:	e6 0d       	add	r30, r6
    3e24:	f7 1d       	adc	r31, r7
    3e26:	80 81       	ld	r24, Z
    3e28:	8d 34       	cpi	r24, 0x4D	; 77
    3e2a:	39 f0       	breq	.+14     	; 0x3e3a <_Z14process_stringPci+0x5ba>
	return 0;
}

//look for the command if it exists.
bool has_command(char key, char instruction[], int string_size) {
	for (byte i = 0; i < string_size; i++) {
    3e2c:	9f 5f       	subi	r25, 0xFF	; 255
    3e2e:	e9 2f       	mov	r30, r25
    3e30:	f0 e0       	ldi	r31, 0x00	; 0
    3e32:	e4 15       	cp	r30, r4
    3e34:	f5 05       	cpc	r31, r5
    3e36:	ac f3       	brlt	.-22     	; 0x3e22 <_Z14process_stringPci+0x5a2>
    3e38:	18 c0       	rjmp	.+48     	; 0x3e6a <_Z14process_stringPci+0x5ea>
		nominalFeedRate = rate;

	}
	//find us an m code.
	if (has_command('M', instruction, size)) {
		code = search_string('M', instruction, size);
    3e3a:	8d e4       	ldi	r24, 0x4D	; 77
    3e3c:	b3 01       	movw	r22, r6
    3e3e:	a2 01       	movw	r20, r4
    3e40:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <_Z13search_stringcPci>
    3e44:	0e 94 97 2a 	call	0x552e	; 0x552e <__fixunssfsi>
    3e48:	7b 01       	movw	r14, r22
    3e4a:	8c 01       	movw	r16, r24
		switch (code) {
    3e4c:	66 23       	and	r22, r22
    3e4e:	69 f0       	breq	.+26     	; 0x3e6a <_Z14process_stringPci+0x5ea>
//      //turn fan off
//    case 107:
//      extruder_set_cooler(0);
//      break;
		default:
			Serial.print("Huh? M");
    3e50:	84 e3       	ldi	r24, 0x34	; 52
    3e52:	96 e0       	ldi	r25, 0x06	; 6
    3e54:	67 e2       	ldi	r22, 0x27	; 39
    3e56:	71 e0       	ldi	r23, 0x01	; 1
    3e58:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZN5Print5printEPKc>
			Serial.println(code);
    3e5c:	84 e3       	ldi	r24, 0x34	; 52
    3e5e:	96 e0       	ldi	r25, 0x06	; 6
    3e60:	6e 2d       	mov	r22, r14
    3e62:	4a e0       	ldi	r20, 0x0A	; 10
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <_ZN5Print7printlnEhi>
		}
	}

	//tell our host we're done.
	Serial.println("ok");
    3e6a:	84 e3       	ldi	r24, 0x34	; 52
    3e6c:	96 e0       	ldi	r25, 0x06	; 6
    3e6e:	6e e2       	ldi	r22, 0x2E	; 46
    3e70:	71 e0       	ldi	r23, 0x01	; 1
    3e72:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN5Print7printlnEPKc>
	//	Serial.println(line, DEC);
}
    3e76:	63 96       	adiw	r28, 0x13	; 19
    3e78:	0f b6       	in	r0, 0x3f	; 63
    3e7a:	f8 94       	cli
    3e7c:	de bf       	out	0x3e, r29	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	cf 91       	pop	r28
    3e84:	df 91       	pop	r29
    3e86:	1f 91       	pop	r17
    3e88:	0f 91       	pop	r16
    3e8a:	ff 90       	pop	r15
    3e8c:	ef 90       	pop	r14
    3e8e:	df 90       	pop	r13
    3e90:	cf 90       	pop	r12
    3e92:	bf 90       	pop	r11
    3e94:	af 90       	pop	r10
    3e96:	9f 90       	pop	r9
    3e98:	8f 90       	pop	r8
    3e9a:	7f 90       	pop	r7
    3e9c:	6f 90       	pop	r6
    3e9e:	5f 90       	pop	r5
    3ea0:	4f 90       	pop	r4
    3ea2:	3f 90       	pop	r3
    3ea4:	2f 90       	pop	r2
    3ea6:	08 95       	ret

00003ea8 <_Z7printlnPc>:
//	delay(100);
//	delay(5000);
	clearLCD();
}

void println(char * string) {
    3ea8:	bc 01       	movw	r22, r24
	clearLCD();
	lcdGoTo(0);
	Serial.println(string);
    3eaa:	84 e3       	ldi	r24, 0x34	; 52
    3eac:	96 e0       	ldi	r25, 0x06	; 6
    3eae:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN5Print7printlnEPKc>
}
    3eb2:	08 95       	ret

00003eb4 <_Z8goToXMinv>:
	goTo(getUnitsX(), Y_RESET_LOCATION, getUnitsZ());
	setPosition(getUnitsX(), Y_RESET_LOCATION, getUnitsZ());
	println("Y finished");
}

void goToXMin() {
    3eb4:	af 92       	push	r10
    3eb6:	bf 92       	push	r11
    3eb8:	cf 92       	push	r12
    3eba:	df 92       	push	r13
    3ebc:	ef 92       	push	r14
    3ebe:	ff 92       	push	r15
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
	setXDirection(0);
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <_Z13setXDirectioni>
	println("Waiting for XMin");
    3ecc:	81 e3       	ldi	r24, 0x31	; 49
    3ece:	91 e0       	ldi	r25, 0x01	; 1
    3ed0:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
    3ed4:	08 c0       	rjmp	.+16     	; 0x3ee6 <_Z8goToXMinv+0x32>
	while (!digitalRead(X_MIN_PIN)) {
		do_step(X_STEP_PIN);
    3ed6:	85 e0       	ldi	r24, 0x05	; 5
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	0e 94 70 18 	call	0x30e0	; 0x30e0 <_Z7do_stepi>
		delayMicroseconds(MINIMUMSTEPPERDELAY);
    3ede:	8c e2       	ldi	r24, 0x2C	; 44
    3ee0:	91 e0       	ldi	r25, 0x01	; 1
    3ee2:	0e 94 1e 28 	call	0x503c	; 0x503c <delayMicroseconds>
}

void goToXMin() {
	setXDirection(0);
	println("Waiting for XMin");
	while (!digitalRead(X_MIN_PIN)) {
    3ee6:	8e e0       	ldi	r24, 0x0E	; 14
    3ee8:	0e 94 f6 28 	call	0x51ec	; 0x51ec <digitalRead>
    3eec:	89 2b       	or	r24, r25
    3eee:	99 f3       	breq	.-26     	; 0x3ed6 <_Z8goToXMinv+0x22>
		do_step(X_STEP_PIN);
		delayMicroseconds(MINIMUMSTEPPERDELAY);
	}
	goTo(X_RESET_LOCATION, getUnitsY(), getUnitsZ());
    3ef0:	60 91 d8 04 	lds	r22, 0x04D8
    3ef4:	70 91 d9 04 	lds	r23, 0x04D9
    3ef8:	80 91 da 04 	lds	r24, 0x04DA
    3efc:	90 91 db 04 	lds	r25, 0x04DB
    3f00:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3f04:	20 91 a4 05 	lds	r18, 0x05A4
    3f08:	30 91 a5 05 	lds	r19, 0x05A5
    3f0c:	40 91 a6 05 	lds	r20, 0x05A6
    3f10:	50 91 a7 05 	lds	r21, 0x05A7
    3f14:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3f18:	5b 01       	movw	r10, r22
    3f1a:	6c 01       	movw	r12, r24
    3f1c:	60 91 dc 04 	lds	r22, 0x04DC
    3f20:	70 91 dd 04 	lds	r23, 0x04DD
    3f24:	80 91 de 04 	lds	r24, 0x04DE
    3f28:	90 91 df 04 	lds	r25, 0x04DF
    3f2c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3f30:	20 91 a8 05 	lds	r18, 0x05A8
    3f34:	30 91 a9 05 	lds	r19, 0x05A9
    3f38:	40 91 aa 05 	lds	r20, 0x05AA
    3f3c:	50 91 ab 05 	lds	r21, 0x05AB
    3f40:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3f44:	7b 01       	movw	r14, r22
    3f46:	8c 01       	movw	r16, r24
    3f48:	60 e0       	ldi	r22, 0x00	; 0
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	a6 01       	movw	r20, r12
    3f52:	95 01       	movw	r18, r10
    3f54:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
	setPosition(X_RESET_LOCATION, getUnitsY(), getUnitsZ());
    3f58:	60 91 d8 04 	lds	r22, 0x04D8
    3f5c:	70 91 d9 04 	lds	r23, 0x04D9
    3f60:	80 91 da 04 	lds	r24, 0x04DA
    3f64:	90 91 db 04 	lds	r25, 0x04DB
    3f68:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3f6c:	20 91 a4 05 	lds	r18, 0x05A4
    3f70:	30 91 a5 05 	lds	r19, 0x05A5
    3f74:	40 91 a6 05 	lds	r20, 0x05A6
    3f78:	50 91 a7 05 	lds	r21, 0x05A7
    3f7c:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3f80:	5b 01       	movw	r10, r22
    3f82:	6c 01       	movw	r12, r24
    3f84:	60 91 dc 04 	lds	r22, 0x04DC
    3f88:	70 91 dd 04 	lds	r23, 0x04DD
    3f8c:	80 91 de 04 	lds	r24, 0x04DE
    3f90:	90 91 df 04 	lds	r25, 0x04DF
    3f94:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    3f98:	20 91 a8 05 	lds	r18, 0x05A8
    3f9c:	30 91 a9 05 	lds	r19, 0x05A9
    3fa0:	40 91 aa 05 	lds	r20, 0x05AA
    3fa4:	50 91 ab 05 	lds	r21, 0x05AB
    3fa8:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    3fac:	7b 01       	movw	r14, r22
    3fae:	8c 01       	movw	r16, r24
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	70 e0       	ldi	r23, 0x00	; 0
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	a6 01       	movw	r20, r12
    3fba:	95 01       	movw	r18, r10
    3fbc:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z11setPositionddd>
	println("X finished");
    3fc0:	82 e4       	ldi	r24, 0x42	; 66
    3fc2:	91 e0       	ldi	r25, 0x01	; 1
    3fc4:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>

}
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	df 90       	pop	r13
    3fd2:	cf 90       	pop	r12
    3fd4:	bf 90       	pop	r11
    3fd6:	af 90       	pop	r10
    3fd8:	08 95       	ret

00003fda <_Z8goToYMinv>:
	}
	goTo(getUnitsX(), getUnitsY(), 0);
	setPosition(getUnitsX(), getUnitsY(), Z_TOUCH_OFF_LOCATION);
	println("Z finished");
}
void goToYMin() {
    3fda:	af 92       	push	r10
    3fdc:	bf 92       	push	r11
    3fde:	cf 92       	push	r12
    3fe0:	df 92       	push	r13
    3fe2:	ef 92       	push	r14
    3fe4:	ff 92       	push	r15
    3fe6:	0f 93       	push	r16
    3fe8:	1f 93       	push	r17
	setYDirection(0);
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	0e 94 55 16 	call	0x2caa	; 0x2caa <_Z13setYDirectioni>
	println("Waiting for YMin");
    3ff2:	8d e4       	ldi	r24, 0x4D	; 77
    3ff4:	91 e0       	ldi	r25, 0x01	; 1
    3ff6:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
    3ffa:	08 c0       	rjmp	.+16     	; 0x400c <_Z8goToYMinv+0x32>
	while (!digitalRead(Y_MIN_PIN)) {
		do_step(Y_STEP_PIN);
    3ffc:	86 e0       	ldi	r24, 0x06	; 6
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	0e 94 70 18 	call	0x30e0	; 0x30e0 <_Z7do_stepi>
		delayMicroseconds(MINIMUMSTEPPERDELAY);
    4004:	8c e2       	ldi	r24, 0x2C	; 44
    4006:	91 e0       	ldi	r25, 0x01	; 1
    4008:	0e 94 1e 28 	call	0x503c	; 0x503c <delayMicroseconds>
	println("Z finished");
}
void goToYMin() {
	setYDirection(0);
	println("Waiting for YMin");
	while (!digitalRead(Y_MIN_PIN)) {
    400c:	8f e0       	ldi	r24, 0x0F	; 15
    400e:	0e 94 f6 28 	call	0x51ec	; 0x51ec <digitalRead>
    4012:	89 2b       	or	r24, r25
    4014:	99 f3       	breq	.-26     	; 0x3ffc <_Z8goToYMinv+0x22>
		do_step(Y_STEP_PIN);
		delayMicroseconds(MINIMUMSTEPPERDELAY);
	}
	goTo(getUnitsX(), Y_RESET_LOCATION, getUnitsZ());
    4016:	60 91 d4 04 	lds	r22, 0x04D4
    401a:	70 91 d5 04 	lds	r23, 0x04D5
    401e:	80 91 d6 04 	lds	r24, 0x04D6
    4022:	90 91 d7 04 	lds	r25, 0x04D7
    4026:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    402a:	20 91 a0 05 	lds	r18, 0x05A0
    402e:	30 91 a1 05 	lds	r19, 0x05A1
    4032:	40 91 a2 05 	lds	r20, 0x05A2
    4036:	50 91 a3 05 	lds	r21, 0x05A3
    403a:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    403e:	5b 01       	movw	r10, r22
    4040:	6c 01       	movw	r12, r24
    4042:	60 91 dc 04 	lds	r22, 0x04DC
    4046:	70 91 dd 04 	lds	r23, 0x04DD
    404a:	80 91 de 04 	lds	r24, 0x04DE
    404e:	90 91 df 04 	lds	r25, 0x04DF
    4052:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4056:	20 91 a8 05 	lds	r18, 0x05A8
    405a:	30 91 a9 05 	lds	r19, 0x05A9
    405e:	40 91 aa 05 	lds	r20, 0x05AA
    4062:	50 91 ab 05 	lds	r21, 0x05AB
    4066:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    406a:	7b 01       	movw	r14, r22
    406c:	8c 01       	movw	r16, r24
    406e:	c6 01       	movw	r24, r12
    4070:	b5 01       	movw	r22, r10
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	40 e0       	ldi	r20, 0x00	; 0
    4078:	50 e0       	ldi	r21, 0x00	; 0
    407a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
	setPosition(getUnitsX(), Y_RESET_LOCATION, getUnitsZ());
    407e:	60 91 d4 04 	lds	r22, 0x04D4
    4082:	70 91 d5 04 	lds	r23, 0x04D5
    4086:	80 91 d6 04 	lds	r24, 0x04D6
    408a:	90 91 d7 04 	lds	r25, 0x04D7
    408e:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4092:	20 91 a0 05 	lds	r18, 0x05A0
    4096:	30 91 a1 05 	lds	r19, 0x05A1
    409a:	40 91 a2 05 	lds	r20, 0x05A2
    409e:	50 91 a3 05 	lds	r21, 0x05A3
    40a2:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    40a6:	5b 01       	movw	r10, r22
    40a8:	6c 01       	movw	r12, r24
    40aa:	60 91 dc 04 	lds	r22, 0x04DC
    40ae:	70 91 dd 04 	lds	r23, 0x04DD
    40b2:	80 91 de 04 	lds	r24, 0x04DE
    40b6:	90 91 df 04 	lds	r25, 0x04DF
    40ba:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    40be:	20 91 a8 05 	lds	r18, 0x05A8
    40c2:	30 91 a9 05 	lds	r19, 0x05A9
    40c6:	40 91 aa 05 	lds	r20, 0x05AA
    40ca:	50 91 ab 05 	lds	r21, 0x05AB
    40ce:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    40d2:	7b 01       	movw	r14, r22
    40d4:	8c 01       	movw	r16, r24
    40d6:	c6 01       	movw	r24, r12
    40d8:	b5 01       	movw	r22, r10
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	40 e0       	ldi	r20, 0x00	; 0
    40e0:	50 e0       	ldi	r21, 0x00	; 0
    40e2:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z11setPositionddd>
	println("Y finished");
    40e6:	8e e5       	ldi	r24, 0x5E	; 94
    40e8:	91 e0       	ldi	r25, 0x01	; 1
    40ea:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
}
    40ee:	1f 91       	pop	r17
    40f0:	0f 91       	pop	r16
    40f2:	ff 90       	pop	r15
    40f4:	ef 90       	pop	r14
    40f6:	df 90       	pop	r13
    40f8:	cf 90       	pop	r12
    40fa:	bf 90       	pop	r11
    40fc:	af 90       	pop	r10
    40fe:	08 95       	ret

00004100 <_Z8goToZMinv>:
	}
	goTo(getUnitsX(), getUnitsY(), Z_RESET_LOCATION);
	setPosition(getUnitsX(), getUnitsY(), Z_RESET_LOCATION);
	println("Z finished");
}
void goToZMin() {
    4100:	ef 92       	push	r14
    4102:	ff 92       	push	r15
    4104:	0f 93       	push	r16
    4106:	1f 93       	push	r17
	setZDirection(0);
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_Z13setZDirectioni>
	println("Waiting for ZMin");
    4110:	89 e6       	ldi	r24, 0x69	; 105
    4112:	91 e0       	ldi	r25, 0x01	; 1
    4114:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
    4118:	08 c0       	rjmp	.+16     	; 0x412a <_Z8goToZMinv+0x2a>
	while (!digitalRead(Z_MIN_PIN)) {
		do_step(Z_STEP_PIN);
    411a:	87 e0       	ldi	r24, 0x07	; 7
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	0e 94 70 18 	call	0x30e0	; 0x30e0 <_Z7do_stepi>
		delayMicroseconds(MINIMUMSTEPPERDELAY);
    4122:	8c e2       	ldi	r24, 0x2C	; 44
    4124:	91 e0       	ldi	r25, 0x01	; 1
    4126:	0e 94 1e 28 	call	0x503c	; 0x503c <delayMicroseconds>
	println("Z finished");
}
void goToZMin() {
	setZDirection(0);
	println("Waiting for ZMin");
	while (!digitalRead(Z_MIN_PIN)) {
    412a:	80 e1       	ldi	r24, 0x10	; 16
    412c:	0e 94 f6 28 	call	0x51ec	; 0x51ec <digitalRead>
    4130:	89 2b       	or	r24, r25
    4132:	99 f3       	breq	.-26     	; 0x411a <_Z8goToZMinv+0x1a>
		do_step(Z_STEP_PIN);
		delayMicroseconds(MINIMUMSTEPPERDELAY);
	}
	goTo(getUnitsX(), getUnitsY(), 0);
    4134:	60 91 d4 04 	lds	r22, 0x04D4
    4138:	70 91 d5 04 	lds	r23, 0x04D5
    413c:	80 91 d6 04 	lds	r24, 0x04D6
    4140:	90 91 d7 04 	lds	r25, 0x04D7
    4144:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4148:	20 91 a0 05 	lds	r18, 0x05A0
    414c:	30 91 a1 05 	lds	r19, 0x05A1
    4150:	40 91 a2 05 	lds	r20, 0x05A2
    4154:	50 91 a3 05 	lds	r21, 0x05A3
    4158:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    415c:	7b 01       	movw	r14, r22
    415e:	8c 01       	movw	r16, r24
    4160:	60 91 d8 04 	lds	r22, 0x04D8
    4164:	70 91 d9 04 	lds	r23, 0x04D9
    4168:	80 91 da 04 	lds	r24, 0x04DA
    416c:	90 91 db 04 	lds	r25, 0x04DB
    4170:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4174:	20 91 a4 05 	lds	r18, 0x05A4
    4178:	30 91 a5 05 	lds	r19, 0x05A5
    417c:	40 91 a6 05 	lds	r20, 0x05A6
    4180:	50 91 a7 05 	lds	r21, 0x05A7
    4184:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    4188:	9b 01       	movw	r18, r22
    418a:	ac 01       	movw	r20, r24
    418c:	c8 01       	movw	r24, r16
    418e:	b7 01       	movw	r22, r14
    4190:	0f 2e       	mov	r0, r31
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	ef 2e       	mov	r14, r31
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	ff 2e       	mov	r15, r31
    419a:	f0 e0       	ldi	r31, 0x00	; 0
    419c:	0f 2f       	mov	r16, r31
    419e:	f0 e0       	ldi	r31, 0x00	; 0
    41a0:	1f 2f       	mov	r17, r31
    41a2:	f0 2d       	mov	r31, r0
    41a4:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
	setPosition(getUnitsX(), getUnitsY(), Z_TOUCH_OFF_LOCATION);
    41a8:	60 91 d4 04 	lds	r22, 0x04D4
    41ac:	70 91 d5 04 	lds	r23, 0x04D5
    41b0:	80 91 d6 04 	lds	r24, 0x04D6
    41b4:	90 91 d7 04 	lds	r25, 0x04D7
    41b8:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    41bc:	20 91 a0 05 	lds	r18, 0x05A0
    41c0:	30 91 a1 05 	lds	r19, 0x05A1
    41c4:	40 91 a2 05 	lds	r20, 0x05A2
    41c8:	50 91 a3 05 	lds	r21, 0x05A3
    41cc:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    41d0:	7b 01       	movw	r14, r22
    41d2:	8c 01       	movw	r16, r24
    41d4:	60 91 d8 04 	lds	r22, 0x04D8
    41d8:	70 91 d9 04 	lds	r23, 0x04D9
    41dc:	80 91 da 04 	lds	r24, 0x04DA
    41e0:	90 91 db 04 	lds	r25, 0x04DB
    41e4:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    41e8:	20 91 a4 05 	lds	r18, 0x05A4
    41ec:	30 91 a5 05 	lds	r19, 0x05A5
    41f0:	40 91 a6 05 	lds	r20, 0x05A6
    41f4:	50 91 a7 05 	lds	r21, 0x05A7
    41f8:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    41fc:	9b 01       	movw	r18, r22
    41fe:	ac 01       	movw	r20, r24
    4200:	c8 01       	movw	r24, r16
    4202:	b7 01       	movw	r22, r14
    4204:	0f 2e       	mov	r0, r31
    4206:	f0 e0       	ldi	r31, 0x00	; 0
    4208:	ef 2e       	mov	r14, r31
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	ff 2e       	mov	r15, r31
    420e:	f0 ee       	ldi	r31, 0xE0	; 224
    4210:	0f 2f       	mov	r16, r31
    4212:	f1 e4       	ldi	r31, 0x41	; 65
    4214:	1f 2f       	mov	r17, r31
    4216:	f0 2d       	mov	r31, r0
    4218:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z11setPositionddd>
	println("Z finished");
    421c:	8a e7       	ldi	r24, 0x7A	; 122
    421e:	91 e0       	ldi	r25, 0x01	; 1
    4220:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
}
    4224:	1f 91       	pop	r17
    4226:	0f 91       	pop	r16
    4228:	ff 90       	pop	r15
    422a:	ef 90       	pop	r14
    422c:	08 95       	ret

0000422e <_Z12goToTouchOffv>:
	setPosition(X_RESET_LOCATION, getUnitsY(), getUnitsZ());
	println("X finished");

}

void goToTouchOff() {
    422e:	ef 92       	push	r14
    4230:	ff 92       	push	r15
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
	goTo(X_TOUCH_OFF_LOCATION, Y_TOUCH_OFF_LOCATION, Z_RESET_LOCATION);
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	70 e0       	ldi	r23, 0x00	; 0
    423a:	80 e1       	ldi	r24, 0x10	; 16
    423c:	92 e4       	ldi	r25, 0x42	; 66
    423e:	20 e0       	ldi	r18, 0x00	; 0
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	47 ed       	ldi	r20, 0xD7	; 215
    4244:	53 e4       	ldi	r21, 0x43	; 67
    4246:	0f 2e       	mov	r0, r31
    4248:	f0 e0       	ldi	r31, 0x00	; 0
    424a:	ef 2e       	mov	r14, r31
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	ff 2e       	mov	r15, r31
    4250:	f0 e2       	ldi	r31, 0x20	; 32
    4252:	0f 2f       	mov	r16, r31
    4254:	f2 e4       	ldi	r31, 0x42	; 66
    4256:	1f 2f       	mov	r17, r31
    4258:	f0 2d       	mov	r31, r0
    425a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>

	goToZMin();
    425e:	0e 94 80 20 	call	0x4100	; 0x4100 <_Z8goToZMinv>
	setPosition(X_TOUCH_OFF_LOCATION, Y_TOUCH_OFF_LOCATION,
			Z_TOUCH_OFF_LOCATION);
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	70 e0       	ldi	r23, 0x00	; 0
    4266:	80 e1       	ldi	r24, 0x10	; 16
    4268:	92 e4       	ldi	r25, 0x42	; 66
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	30 e0       	ldi	r19, 0x00	; 0
    426e:	47 ed       	ldi	r20, 0xD7	; 215
    4270:	53 e4       	ldi	r21, 0x43	; 67
    4272:	0f 2e       	mov	r0, r31
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	ef 2e       	mov	r14, r31
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	ff 2e       	mov	r15, r31
    427c:	f0 ee       	ldi	r31, 0xE0	; 224
    427e:	0f 2f       	mov	r16, r31
    4280:	f1 e4       	ldi	r31, 0x41	; 65
    4282:	1f 2f       	mov	r17, r31
    4284:	f0 2d       	mov	r31, r0
    4286:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z11setPositionddd>
	goTo(X_TOUCH_OFF_LOCATION, Y_TOUCH_OFF_LOCATION, Z_TOUCH_OFF_LOCATION + 1);
    428a:	60 e0       	ldi	r22, 0x00	; 0
    428c:	70 e0       	ldi	r23, 0x00	; 0
    428e:	80 e1       	ldi	r24, 0x10	; 16
    4290:	92 e4       	ldi	r25, 0x42	; 66
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	47 ed       	ldi	r20, 0xD7	; 215
    4298:	53 e4       	ldi	r21, 0x43	; 67
    429a:	0f 2e       	mov	r0, r31
    429c:	f0 e0       	ldi	r31, 0x00	; 0
    429e:	ef 2e       	mov	r14, r31
    42a0:	f0 e0       	ldi	r31, 0x00	; 0
    42a2:	ff 2e       	mov	r15, r31
    42a4:	f8 ee       	ldi	r31, 0xE8	; 232
    42a6:	0f 2f       	mov	r16, r31
    42a8:	f1 e4       	ldi	r31, 0x41	; 65
    42aa:	1f 2f       	mov	r17, r31
    42ac:	f0 2d       	mov	r31, r0
    42ae:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
}
    42b2:	1f 91       	pop	r17
    42b4:	0f 91       	pop	r16
    42b6:	ff 90       	pop	r15
    42b8:	ef 90       	pop	r14
    42ba:	08 95       	ret

000042bc <_Z8goToZMaxv>:
	//digitalWrite(X_ENABLE_PIN, LOW);
	//digitalWrite(Y_ENABLE_PIN, LOW);
//	digitalWrite(Z_ENABLE_PIN, LOW);
}

void goToZMax() {
    42bc:	ef 92       	push	r14
    42be:	ff 92       	push	r15
    42c0:	0f 93       	push	r16
    42c2:	1f 93       	push	r17
	setZDirection(1);
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_Z13setZDirectioni>
	println("Waiting for ZMax");
    42cc:	85 e8       	ldi	r24, 0x85	; 133
    42ce:	91 e0       	ldi	r25, 0x01	; 1
    42d0:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
    42d4:	08 c0       	rjmp	.+16     	; 0x42e6 <_Z8goToZMaxv+0x2a>
	while (!digitalRead(Z_MAX_PIN)) {
		do_step(Z_STEP_PIN);
    42d6:	87 e0       	ldi	r24, 0x07	; 7
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 70 18 	call	0x30e0	; 0x30e0 <_Z7do_stepi>
		delayMicroseconds(MINIMUMSTEPPERDELAY);
    42de:	8c e2       	ldi	r24, 0x2C	; 44
    42e0:	91 e0       	ldi	r25, 0x01	; 1
    42e2:	0e 94 1e 28 	call	0x503c	; 0x503c <delayMicroseconds>
}

void goToZMax() {
	setZDirection(1);
	println("Waiting for ZMax");
	while (!digitalRead(Z_MAX_PIN)) {
    42e6:	83 e1       	ldi	r24, 0x13	; 19
    42e8:	0e 94 f6 28 	call	0x51ec	; 0x51ec <digitalRead>
    42ec:	89 2b       	or	r24, r25
    42ee:	99 f3       	breq	.-26     	; 0x42d6 <_Z8goToZMaxv+0x1a>
		do_step(Z_STEP_PIN);
		delayMicroseconds(MINIMUMSTEPPERDELAY);
	}
	goTo(getUnitsX(), getUnitsY(), Z_RESET_LOCATION);
    42f0:	60 91 d4 04 	lds	r22, 0x04D4
    42f4:	70 91 d5 04 	lds	r23, 0x04D5
    42f8:	80 91 d6 04 	lds	r24, 0x04D6
    42fc:	90 91 d7 04 	lds	r25, 0x04D7
    4300:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4304:	20 91 a0 05 	lds	r18, 0x05A0
    4308:	30 91 a1 05 	lds	r19, 0x05A1
    430c:	40 91 a2 05 	lds	r20, 0x05A2
    4310:	50 91 a3 05 	lds	r21, 0x05A3
    4314:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    4318:	7b 01       	movw	r14, r22
    431a:	8c 01       	movw	r16, r24
    431c:	60 91 d8 04 	lds	r22, 0x04D8
    4320:	70 91 d9 04 	lds	r23, 0x04D9
    4324:	80 91 da 04 	lds	r24, 0x04DA
    4328:	90 91 db 04 	lds	r25, 0x04DB
    432c:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4330:	20 91 a4 05 	lds	r18, 0x05A4
    4334:	30 91 a5 05 	lds	r19, 0x05A5
    4338:	40 91 a6 05 	lds	r20, 0x05A6
    433c:	50 91 a7 05 	lds	r21, 0x05A7
    4340:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    4344:	9b 01       	movw	r18, r22
    4346:	ac 01       	movw	r20, r24
    4348:	c8 01       	movw	r24, r16
    434a:	b7 01       	movw	r22, r14
    434c:	0f 2e       	mov	r0, r31
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	ef 2e       	mov	r14, r31
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	ff 2e       	mov	r15, r31
    4356:	f0 e2       	ldi	r31, 0x20	; 32
    4358:	0f 2f       	mov	r16, r31
    435a:	f2 e4       	ldi	r31, 0x42	; 66
    435c:	1f 2f       	mov	r17, r31
    435e:	f0 2d       	mov	r31, r0
    4360:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <_Z4goToddd>
	setPosition(getUnitsX(), getUnitsY(), Z_RESET_LOCATION);
    4364:	60 91 d4 04 	lds	r22, 0x04D4
    4368:	70 91 d5 04 	lds	r23, 0x04D5
    436c:	80 91 d6 04 	lds	r24, 0x04D6
    4370:	90 91 d7 04 	lds	r25, 0x04D7
    4374:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4378:	20 91 a0 05 	lds	r18, 0x05A0
    437c:	30 91 a1 05 	lds	r19, 0x05A1
    4380:	40 91 a2 05 	lds	r20, 0x05A2
    4384:	50 91 a3 05 	lds	r21, 0x05A3
    4388:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    438c:	7b 01       	movw	r14, r22
    438e:	8c 01       	movw	r16, r24
    4390:	60 91 d8 04 	lds	r22, 0x04D8
    4394:	70 91 d9 04 	lds	r23, 0x04D9
    4398:	80 91 da 04 	lds	r24, 0x04DA
    439c:	90 91 db 04 	lds	r25, 0x04DB
    43a0:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    43a4:	20 91 a4 05 	lds	r18, 0x05A4
    43a8:	30 91 a5 05 	lds	r19, 0x05A5
    43ac:	40 91 a6 05 	lds	r20, 0x05A6
    43b0:	50 91 a7 05 	lds	r21, 0x05A7
    43b4:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    43b8:	9b 01       	movw	r18, r22
    43ba:	ac 01       	movw	r20, r24
    43bc:	c8 01       	movw	r24, r16
    43be:	b7 01       	movw	r22, r14
    43c0:	0f 2e       	mov	r0, r31
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	ef 2e       	mov	r14, r31
    43c6:	f0 e0       	ldi	r31, 0x00	; 0
    43c8:	ff 2e       	mov	r15, r31
    43ca:	f0 e2       	ldi	r31, 0x20	; 32
    43cc:	0f 2f       	mov	r16, r31
    43ce:	f2 e4       	ldi	r31, 0x42	; 66
    43d0:	1f 2f       	mov	r17, r31
    43d2:	f0 2d       	mov	r31, r0
    43d4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <_Z11setPositionddd>
	println("Z finished");
    43d8:	8a e7       	ldi	r24, 0x7A	; 122
    43da:	91 e0       	ldi	r25, 0x01	; 1
    43dc:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
}
    43e0:	1f 91       	pop	r17
    43e2:	0f 91       	pop	r16
    43e4:	ff 90       	pop	r15
    43e6:	ef 90       	pop	r14
    43e8:	08 95       	ret

000043ea <_Z13resetLocationv>:
			Z_TOUCH_OFF_LOCATION);
	goTo(X_TOUCH_OFF_LOCATION, Y_TOUCH_OFF_LOCATION, Z_TOUCH_OFF_LOCATION + 1);
}

void resetLocation() {
	goToZMax(); // go to max height to keep bit out of the way
    43ea:	0e 94 5e 21 	call	0x42bc	; 0x42bc <_Z8goToZMaxv>
	goToYMin();
    43ee:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_Z8goToYMinv>
	goToXMin();
    43f2:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <_Z8goToXMinv>
}
    43f6:	08 95       	ret

000043f8 <_Z9readGLine4FilePc>:
void getFile() {

}


int readGLine(File file, char * gline){
    43f8:	ef 92       	push	r14
    43fa:	ff 92       	push	r15
    43fc:	0f 93       	push	r16
    43fe:	1f 93       	push	r17
    4400:	cf 93       	push	r28
    4402:	df 93       	push	r29
    4404:	7c 01       	movw	r14, r24
    4406:	8b 01       	movw	r16, r22
    4408:	c0 e0       	ldi	r28, 0x00	; 0
    440a:	d0 e0       	ldi	r29, 0x00	; 0
	char c;
	int charcount =0;
	while(charcount < COMMAND_SIZE){
		c= file.read();
    440c:	c7 01       	movw	r24, r14
    440e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN4File4readEv>
    4412:	f8 01       	movw	r30, r16
    4414:	ec 0f       	add	r30, r28
    4416:	fd 1f       	adc	r31, r29
		if (c == '\n'){
    4418:	8a 30       	cpi	r24, 0x0A	; 10
    441a:	19 f4       	brne	.+6      	; 0x4422 <_Z9readGLine4FilePc+0x2a>
			gline[charcount] = '\0';
    441c:	10 82       	st	Z, r1
			gline[charcount] = c;
			charcount++;
		}
	}

}
    441e:	ce 01       	movw	r24, r28
    4420:	05 c0       	rjmp	.+10     	; 0x442c <_Z9readGLine4FilePc+0x34>
		c= file.read();
		if (c == '\n'){
			gline[charcount] = '\0';
			return charcount;
		}else{
			gline[charcount] = c;
    4422:	80 83       	st	Z, r24
			charcount++;
    4424:	21 96       	adiw	r28, 0x01	; 1


int readGLine(File file, char * gline){
	char c;
	int charcount =0;
	while(charcount < COMMAND_SIZE){
    4426:	c0 38       	cpi	r28, 0x80	; 128
    4428:	d1 05       	cpc	r29, r1
    442a:	81 f7       	brne	.-32     	; 0x440c <_Z9readGLine4FilePc+0x14>
			gline[charcount] = c;
			charcount++;
		}
	}

}
    442c:	df 91       	pop	r29
    442e:	cf 91       	pop	r28
    4430:	1f 91       	pop	r17
    4432:	0f 91       	pop	r16
    4434:	ff 90       	pop	r15
    4436:	ef 90       	pop	r14
    4438:	08 95       	ret

0000443a <_Z16processGCodeFilePc>:
int processGCodeFile(char* filename) {
    443a:	2f 92       	push	r2
    443c:	3f 92       	push	r3
    443e:	4f 92       	push	r4
    4440:	5f 92       	push	r5
    4442:	6f 92       	push	r6
    4444:	7f 92       	push	r7
    4446:	8f 92       	push	r8
    4448:	9f 92       	push	r9
    444a:	af 92       	push	r10
    444c:	bf 92       	push	r11
    444e:	cf 92       	push	r12
    4450:	df 92       	push	r13
    4452:	ef 92       	push	r14
    4454:	ff 92       	push	r15
    4456:	0f 93       	push	r16
    4458:	1f 93       	push	r17
    445a:	df 93       	push	r29
    445c:	cf 93       	push	r28
    445e:	cd b7       	in	r28, 0x3d	; 61
    4460:	de b7       	in	r29, 0x3e	; 62
    4462:	c6 5b       	subi	r28, 0xB6	; 182
    4464:	d0 40       	sbci	r29, 0x00	; 0
    4466:	0f b6       	in	r0, 0x3f	; 63
    4468:	f8 94       	cli
    446a:	de bf       	out	0x3e, r29	; 62
    446c:	0f be       	out	0x3f, r0	; 63
    446e:	cd bf       	out	0x3d, r28	; 61
    4470:	7c 01       	movw	r14, r24
	int linesProcessed = 0;
	char  gline[COMMAND_SIZE];

	if (!SD.exists(GFILENAME)){
    4472:	82 e8       	ldi	r24, 0x82	; 130
    4474:	92 e0       	ldi	r25, 0x02	; 2
    4476:	66 e9       	ldi	r22, 0x96	; 150
    4478:	71 e0       	ldi	r23, 0x01	; 1
    447a:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN7SDClass6existsEPc>
    447e:	88 23       	and	r24, r24
    4480:	79 f4       	brne	.+30     	; 0x44a0 <_Z16processGCodeFilePc+0x66>
		Serial.print("error opening ");
    4482:	84 e3       	ldi	r24, 0x34	; 52
    4484:	96 e0       	ldi	r25, 0x06	; 6
    4486:	60 ea       	ldi	r22, 0xA0	; 160
    4488:	71 e0       	ldi	r23, 0x01	; 1
    448a:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZN5Print5printEPKc>
		Serial.println(GFILENAME);
    448e:	84 e3       	ldi	r24, 0x34	; 52
    4490:	96 e0       	ldi	r25, 0x06	; 6
    4492:	66 e9       	ldi	r22, 0x96	; 150
    4494:	71 e0       	ldi	r23, 0x01	; 1
    4496:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN5Print7printlnEPKc>
    449a:	ee 24       	eor	r14, r14
    449c:	ff 24       	eor	r15, r15
    449e:	6f c0       	rjmp	.+222    	; 0x457e <_Z16processGCodeFilePc+0x144>
		return 0;
	}
	File file  = SD.open(filename);
    44a0:	8e 01       	movw	r16, r28
    44a2:	0f 5f       	subi	r16, 0xFF	; 255
    44a4:	1f 4f       	sbci	r17, 0xFF	; 255
    44a6:	c8 01       	movw	r24, r16
    44a8:	62 e8       	ldi	r22, 0x82	; 130
    44aa:	72 e0       	ldi	r23, 0x02	; 2
    44ac:	a7 01       	movw	r20, r14
    44ae:	21 e0       	ldi	r18, 0x01	; 1
    44b0:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN7SDClass4openEPKch>
	if (file) {
    44b4:	c8 01       	movw	r24, r16
    44b6:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN4FilecvbEv>
    44ba:	88 23       	and	r24, r24
    44bc:	31 f0       	breq	.+12     	; 0x44ca <_Z16processGCodeFilePc+0x90>
		Serial.println(GFILENAME);
    44be:	84 e3       	ldi	r24, 0x34	; 52
    44c0:	96 e0       	ldi	r25, 0x06	; 6
    44c2:	66 e9       	ldi	r22, 0x96	; 150
    44c4:	71 e0       	ldi	r23, 0x01	; 1
    44c6:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <_ZN5Print7printlnEPKc>
    44ca:	ee 24       	eor	r14, r14
    44cc:	ff 24       	eor	r15, r15
	}

//	 read from the file until there's nothing else in it:
	while (file.available()) {
    44ce:	4e 01       	movw	r8, r28
    44d0:	08 94       	sec
    44d2:	81 1c       	adc	r8, r1
    44d4:	91 1c       	adc	r9, r1
#include <SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
    44d6:	4d e5       	ldi	r20, 0x5D	; 93
    44d8:	24 2e       	mov	r2, r20
    44da:	42 e0       	ldi	r20, 0x02	; 2
    44dc:	34 2e       	mov	r3, r20
    44de:	38 e2       	ldi	r19, 0x28	; 40
    44e0:	43 2e       	mov	r4, r19
    44e2:	51 2c       	mov	r5, r1
    44e4:	4c 0e       	add	r4, r28
    44e6:	5d 1e       	adc	r5, r29
    44e8:	2d e0       	ldi	r18, 0x0D	; 13
    44ea:	62 2e       	mov	r6, r18
    44ec:	71 2c       	mov	r7, r1
    44ee:	6c 0e       	add	r6, r28
    44f0:	7d 1e       	adc	r7, r29
		linesProcessed ++;
		int cmdSize = readGLine(file, gline);
    44f2:	9c e1       	ldi	r25, 0x1C	; 28
    44f4:	a9 2e       	mov	r10, r25
    44f6:	b1 2c       	mov	r11, r1
    44f8:	ac 0e       	add	r10, r28
    44fa:	bd 1e       	adc	r11, r29
    44fc:	87 e3       	ldi	r24, 0x37	; 55
    44fe:	c8 2e       	mov	r12, r24
    4500:	d1 2c       	mov	r13, r1
    4502:	cc 0e       	add	r12, r28
    4504:	dd 1e       	adc	r13, r29
    4506:	33 c0       	rjmp	.+102    	; 0x456e <_Z16processGCodeFilePc+0x134>
		Serial.println(GFILENAME);
	}

//	 read from the file until there's nothing else in it:
	while (file.available()) {
		linesProcessed ++;
    4508:	08 94       	sec
    450a:	e1 1c       	adc	r14, r1
    450c:	f1 1c       	adc	r15, r1
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
    450e:	8b 81       	ldd	r24, Y+3	; 0x03
    4510:	9c 81       	ldd	r25, Y+4	; 0x04
    4512:	9f 8f       	std	Y+31, r25	; 0x1f
    4514:	8e 8f       	std	Y+30, r24	; 0x1e
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
{
    4516:	8d 81       	ldd	r24, Y+5	; 0x05
    4518:	9e 81       	ldd	r25, Y+6	; 0x06
    451a:	af 81       	ldd	r26, Y+7	; 0x07
    451c:	b8 85       	ldd	r27, Y+8	; 0x08
    451e:	88 a3       	std	Y+32, r24	; 0x20
    4520:	99 a3       	std	Y+33, r25	; 0x21
    4522:	aa a3       	std	Y+34, r26	; 0x22
    4524:	bb a3       	std	Y+35, r27	; 0x23
    4526:	89 85       	ldd	r24, Y+9	; 0x09
    4528:	9a 85       	ldd	r25, Y+10	; 0x0a
    452a:	ab 85       	ldd	r26, Y+11	; 0x0b
    452c:	bc 85       	ldd	r27, Y+12	; 0x0c
    452e:	8c a3       	std	Y+36, r24	; 0x24
    4530:	9d a3       	std	Y+37, r25	; 0x25
    4532:	ae a3       	std	Y+38, r26	; 0x26
    4534:	bf a3       	std	Y+39, r27	; 0x27
    4536:	3d 8e       	std	Y+29, r3	; 0x1d
    4538:	2c 8e       	std	Y+28, r2	; 0x1c
    453a:	d2 01       	movw	r26, r4
    453c:	f3 01       	movw	r30, r6
    453e:	8d e0       	ldi	r24, 0x0D	; 13
    4540:	01 90       	ld	r0, Z+
    4542:	0d 92       	st	X+, r0
    4544:	81 50       	subi	r24, 0x01	; 1
    4546:	e1 f7       	brne	.-8      	; 0x4540 <_Z16processGCodeFilePc+0x106>
    4548:	8a 8d       	ldd	r24, Y+26	; 0x1a
    454a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    454c:	9e ab       	std	Y+54, r25	; 0x36
    454e:	8d ab       	std	Y+53, r24	; 0x35
		int cmdSize = readGLine(file, gline);
    4550:	c5 01       	movw	r24, r10
    4552:	b6 01       	movw	r22, r12
    4554:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <_Z9readGLine4FilePc>
    4558:	8c 01       	movw	r16, r24
    455a:	c5 01       	movw	r24, r10
    455c:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN4FileD1Ev>
		println(gline);
    4560:	c6 01       	movw	r24, r12
    4562:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
		process_string(gline, cmdSize);
    4566:	c6 01       	movw	r24, r12
    4568:	b8 01       	movw	r22, r16
    456a:	0e 94 40 1c 	call	0x3880	; 0x3880 <_Z14process_stringPci>
	if (file) {
		Serial.println(GFILENAME);
	}

//	 read from the file until there's nothing else in it:
	while (file.available()) {
    456e:	c4 01       	movw	r24, r8
    4570:	0e 94 ab 03 	call	0x756	; 0x756 <_ZN4File9availableEv>
    4574:	89 2b       	or	r24, r25
    4576:	41 f6       	brne	.-112    	; 0x4508 <_Z16processGCodeFilePc+0xce>
		int cmdSize = readGLine(file, gline);
		println(gline);
		process_string(gline, cmdSize);

	}
	return linesProcessed;
    4578:	c4 01       	movw	r24, r8
    457a:	0e 94 8d 03 	call	0x71a	; 0x71a <_ZN4FileD1Ev>
}
    457e:	c7 01       	movw	r24, r14
    4580:	ca 54       	subi	r28, 0x4A	; 74
    4582:	df 4f       	sbci	r29, 0xFF	; 255
    4584:	0f b6       	in	r0, 0x3f	; 63
    4586:	f8 94       	cli
    4588:	de bf       	out	0x3e, r29	; 62
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	ff 90       	pop	r15
    4598:	ef 90       	pop	r14
    459a:	df 90       	pop	r13
    459c:	cf 90       	pop	r12
    459e:	bf 90       	pop	r11
    45a0:	af 90       	pop	r10
    45a2:	9f 90       	pop	r9
    45a4:	8f 90       	pop	r8
    45a6:	7f 90       	pop	r7
    45a8:	6f 90       	pop	r6
    45aa:	5f 90       	pop	r5
    45ac:	4f 90       	pop	r4
    45ae:	3f 90       	pop	r3
    45b0:	2f 90       	pop	r2
    45b2:	08 95       	ret

000045b4 <loop>:
void loop() {
	char c;
	//keep it hot!
	//	extruder_manage_temperature();
	//read in characters if we got them.
	if (Serial.available() > 0) {
    45b4:	84 e3       	ldi	r24, 0x34	; 52
    45b6:	96 e0       	ldi	r25, 0x06	; 6
    45b8:	0e 94 59 24 	call	0x48b2	; 0x48b2 <_ZN14HardwareSerial9availableEv>
    45bc:	18 16       	cp	r1, r24
    45be:	19 06       	cpc	r1, r25
    45c0:	cc f4       	brge	.+50     	; 0x45f4 <loop+0x40>
		c = Serial.read();
    45c2:	84 e3       	ldi	r24, 0x34	; 52
    45c4:	96 e0       	ldi	r25, 0x06	; 6
    45c6:	0e 94 8a 24 	call	0x4914	; 0x4914 <_ZN14HardwareSerial4readEv>
    45ca:	28 2f       	mov	r18, r24
		no_data = 0;
    45cc:	10 92 83 05 	sts	0x0583, r1
    45d0:	10 92 82 05 	sts	0x0582, r1
		//newlines are ends of commands.
		if (c != '\n') {
    45d4:	8a 30       	cpi	r24, 0x0A	; 10
    45d6:	d9 f0       	breq	.+54     	; 0x460e <loop+0x5a>
			foo[serial_count] = c;
    45d8:	80 91 80 05 	lds	r24, 0x0580
    45dc:	90 91 81 05 	lds	r25, 0x0581
    45e0:	fc 01       	movw	r30, r24
    45e2:	e0 50       	subi	r30, 0x00	; 0
    45e4:	fb 4f       	sbci	r31, 0xFB	; 251
    45e6:	20 83       	st	Z, r18
			serial_count++;
    45e8:	01 96       	adiw	r24, 0x01	; 1
    45ea:	90 93 81 05 	sts	0x0581, r25
    45ee:	80 93 80 05 	sts	0x0580, r24
    45f2:	0d c0       	rjmp	.+26     	; 0x460e <loop+0x5a>
		}
	}
	//mark no data.
	else {
		no_data++;
    45f4:	80 91 82 05 	lds	r24, 0x0582
    45f8:	90 91 83 05 	lds	r25, 0x0583
    45fc:	01 96       	adiw	r24, 0x01	; 1
    45fe:	90 93 83 05 	sts	0x0583, r25
    4602:	80 93 82 05 	sts	0x0582, r24
		delayMicroseconds(100);
    4606:	84 e6       	ldi	r24, 0x64	; 100
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 1e 28 	call	0x503c	; 0x503c <delayMicroseconds>
	}
	//if theres a pause or we got a real command, do it
	if (serial_count && (c == '\n' || no_data > 100)) {
    460e:	60 91 80 05 	lds	r22, 0x0580
    4612:	70 91 81 05 	lds	r23, 0x0581
    4616:	61 15       	cp	r22, r1
    4618:	71 05       	cpc	r23, r1
    461a:	69 f0       	breq	.+26     	; 0x4636 <loop+0x82>
    461c:	2a 30       	cpi	r18, 0x0A	; 10
    461e:	39 f0       	breq	.+14     	; 0x462e <loop+0x7a>
    4620:	80 91 82 05 	lds	r24, 0x0582
    4624:	90 91 83 05 	lds	r25, 0x0583
    4628:	85 36       	cpi	r24, 0x65	; 101
    462a:	91 05       	cpc	r25, r1
    462c:	24 f0       	brlt	.+8      	; 0x4636 <loop+0x82>
		//process our command!
		process_string(foo, serial_count);
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	95 e0       	ldi	r25, 0x05	; 5
    4632:	0e 94 40 1c 	call	0x3880	; 0x3880 <_Z14process_stringPci>
    4636:	08 95       	ret

00004638 <setup>:
	printX();
	printY();
	printZ();
}

void setup() {
    4638:	ef 92       	push	r14
    463a:	ff 92       	push	r15
    463c:	0f 93       	push	r16
    463e:	1f 93       	push	r17
	clearLCD();
	Serial.begin(9600);
    4640:	04 e3       	ldi	r16, 0x34	; 52
    4642:	16 e0       	ldi	r17, 0x06	; 6
    4644:	c8 01       	movw	r24, r16
    4646:	40 e8       	ldi	r20, 0x80	; 128
    4648:	55 e2       	ldi	r21, 0x25	; 37
    464a:	60 e0       	ldi	r22, 0x00	; 0
    464c:	70 e0       	ldi	r23, 0x00	; 0
    464e:	0e 94 d3 23 	call	0x47a6	; 0x47a6 <_ZN14HardwareSerial5beginEm>
	println("start");
    4652:	8d e0       	ldi	r24, 0x0D	; 13
    4654:	92 e0       	ldi	r25, 0x02	; 2
    4656:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
//	testSDCard();
//	if(!initSDCard()) return;

	init_steppers();
    465a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <_Z13init_steppersv>
	println("resetLocation");
    465e:	83 e1       	ldi	r24, 0x13	; 19
    4660:	92 e0       	ldi	r25, 0x02	; 2
    4662:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
	resetLocation();
    4666:	0e 94 f5 21 	call	0x43ea	; 0x43ea <_Z13resetLocationv>
	println("touchOff");
    466a:	81 e2       	ldi	r24, 0x21	; 33
    466c:	92 e0       	ldi	r25, 0x02	; 2
    466e:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <_Z7printlnPc>
	goToTouchOff();
    4672:	0e 94 17 21 	call	0x422e	; 0x422e <_Z12goToTouchOffv>

	int i = 0;

	//	init_extruder();
	init_process_string();
	int linesProcessed = processGCodeFile(GFILENAME);
    4676:	86 e9       	ldi	r24, 0x96	; 150
    4678:	91 e0       	ldi	r25, 0x01	; 1
    467a:	0e 94 1d 22 	call	0x443a	; 0x443a <_Z16processGCodeFilePc>
    467e:	7c 01       	movw	r14, r24
	Serial.print("processed: ");
    4680:	c8 01       	movw	r24, r16
    4682:	6a e2       	ldi	r22, 0x2A	; 42
    4684:	72 e0       	ldi	r23, 0x02	; 2
    4686:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <_ZN5Print5printEPKc>
	Serial.println(linesProcessed);
    468a:	c8 01       	movw	r24, r16
    468c:	b7 01       	movw	r22, r14
    468e:	4a e0       	ldi	r20, 0x0A	; 10
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <_ZN5Print7printlnEii>
}
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	ff 90       	pop	r15
    469c:	ef 90       	pop	r14
    469e:	08 95       	ret

000046a0 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    46a0:	08 95       	ret

000046a2 <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    46a2:	1f 92       	push	r1
    46a4:	0f 92       	push	r0
    46a6:	0f b6       	in	r0, 0x3f	; 63
    46a8:	0f 92       	push	r0
    46aa:	11 24       	eor	r1, r1
    46ac:	2f 93       	push	r18
    46ae:	3f 93       	push	r19
    46b0:	4f 93       	push	r20
    46b2:	8f 93       	push	r24
    46b4:	9f 93       	push	r25
    46b6:	ef 93       	push	r30
    46b8:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    46ba:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    46be:	20 91 ec 05 	lds	r18, 0x05EC
    46c2:	30 91 ed 05 	lds	r19, 0x05ED

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    46c6:	2f 5f       	subi	r18, 0xFF	; 255
    46c8:	3f 4f       	sbci	r19, 0xFF	; 255
    46ca:	2f 73       	andi	r18, 0x3F	; 63
    46cc:	30 70       	andi	r19, 0x00	; 0
    46ce:	80 91 ee 05 	lds	r24, 0x05EE
    46d2:	90 91 ef 05 	lds	r25, 0x05EF
    46d6:	28 17       	cp	r18, r24
    46d8:	39 07       	cpc	r19, r25
    46da:	59 f0       	breq	.+22     	; 0x46f2 <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    46dc:	e0 91 ec 05 	lds	r30, 0x05EC
    46e0:	f0 91 ed 05 	lds	r31, 0x05ED
    46e4:	e4 55       	subi	r30, 0x54	; 84
    46e6:	fa 4f       	sbci	r31, 0xFA	; 250
    46e8:	40 83       	st	Z, r20
    buffer->head = i;
    46ea:	30 93 ed 05 	sts	0x05ED, r19
    46ee:	20 93 ec 05 	sts	0x05EC, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    46f2:	ff 91       	pop	r31
    46f4:	ef 91       	pop	r30
    46f6:	9f 91       	pop	r25
    46f8:	8f 91       	pop	r24
    46fa:	4f 91       	pop	r20
    46fc:	3f 91       	pop	r19
    46fe:	2f 91       	pop	r18
    4700:	0f 90       	pop	r0
    4702:	0f be       	out	0x3f, r0	; 63
    4704:	0f 90       	pop	r0
    4706:	1f 90       	pop	r1
    4708:	18 95       	reti

0000470a <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    470a:	e0 91 40 06 	lds	r30, 0x0640
    470e:	f0 91 41 06 	lds	r31, 0x0641
    4712:	e0 5c       	subi	r30, 0xC0	; 192
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	81 91       	ld	r24, Z+
    4718:	91 91       	ld	r25, Z+
    471a:	20 81       	ld	r18, Z
    471c:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    471e:	82 1b       	sub	r24, r18
    4720:	93 0b       	sbc	r25, r19
    4722:	8f 73       	andi	r24, 0x3F	; 63
    4724:	90 70       	andi	r25, 0x00	; 0
    4726:	89 2b       	or	r24, r25
    4728:	11 f0       	breq	.+4      	; 0x472e <_Z14serialEventRunv+0x24>
    472a:	0e 94 50 23 	call	0x46a0	; 0x46a0 <_Z11serialEventv>
    472e:	08 95       	ret

00004730 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    4730:	1f 92       	push	r1
    4732:	0f 92       	push	r0
    4734:	0f b6       	in	r0, 0x3f	; 63
    4736:	0f 92       	push	r0
    4738:	11 24       	eor	r1, r1
    473a:	2f 93       	push	r18
    473c:	3f 93       	push	r19
    473e:	8f 93       	push	r24
    4740:	9f 93       	push	r25
    4742:	ef 93       	push	r30
    4744:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    4746:	20 91 30 06 	lds	r18, 0x0630
    474a:	30 91 31 06 	lds	r19, 0x0631
    474e:	80 91 32 06 	lds	r24, 0x0632
    4752:	90 91 33 06 	lds	r25, 0x0633
    4756:	28 17       	cp	r18, r24
    4758:	39 07       	cpc	r19, r25
    475a:	31 f4       	brne	.+12     	; 0x4768 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    475c:	80 91 c1 00 	lds	r24, 0x00C1
    4760:	8f 7d       	andi	r24, 0xDF	; 223
    4762:	80 93 c1 00 	sts	0x00C1, r24
    4766:	14 c0       	rjmp	.+40     	; 0x4790 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    4768:	e0 91 32 06 	lds	r30, 0x0632
    476c:	f0 91 33 06 	lds	r31, 0x0633
    4770:	e0 51       	subi	r30, 0x10	; 16
    4772:	fa 4f       	sbci	r31, 0xFA	; 250
    4774:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4776:	80 91 32 06 	lds	r24, 0x0632
    477a:	90 91 33 06 	lds	r25, 0x0633
    477e:	01 96       	adiw	r24, 0x01	; 1
    4780:	8f 73       	andi	r24, 0x3F	; 63
    4782:	90 70       	andi	r25, 0x00	; 0
    4784:	90 93 33 06 	sts	0x0633, r25
    4788:	80 93 32 06 	sts	0x0632, r24
	
  #if defined(UDR0)
    UDR0 = c;
    478c:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4790:	ff 91       	pop	r31
    4792:	ef 91       	pop	r30
    4794:	9f 91       	pop	r25
    4796:	8f 91       	pop	r24
    4798:	3f 91       	pop	r19
    479a:	2f 91       	pop	r18
    479c:	0f 90       	pop	r0
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	0f 90       	pop	r0
    47a2:	1f 90       	pop	r1
    47a4:	18 95       	reti

000047a6 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    47a6:	af 92       	push	r10
    47a8:	bf 92       	push	r11
    47aa:	df 92       	push	r13
    47ac:	ef 92       	push	r14
    47ae:	ff 92       	push	r15
    47b0:	0f 93       	push	r16
    47b2:	1f 93       	push	r17
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	ec 01       	movw	r28, r24
    47ba:	7a 01       	movw	r14, r20
    47bc:	8b 01       	movw	r16, r22
    47be:	dd 24       	eor	r13, r13
    47c0:	40 30       	cpi	r20, 0x00	; 0
    47c2:	81 ee       	ldi	r24, 0xE1	; 225
    47c4:	58 07       	cpc	r21, r24
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	68 07       	cpc	r22, r24
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	78 07       	cpc	r23, r24
    47ce:	11 f0       	breq	.+4      	; 0x47d4 <_ZN14HardwareSerial5beginEm+0x2e>
    47d0:	dd 24       	eor	r13, r13
    47d2:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    47d4:	91 e0       	ldi	r25, 0x01	; 1
    47d6:	a9 2e       	mov	r10, r25
    47d8:	b1 2c       	mov	r11, r1
    47da:	ec 89       	ldd	r30, Y+20	; 0x14
    47dc:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    47de:	dd 20       	and	r13, r13
    47e0:	69 f0       	breq	.+26     	; 0x47fc <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    47e2:	c5 01       	movw	r24, r10
    47e4:	0e 8c       	ldd	r0, Y+30	; 0x1e
    47e6:	02 c0       	rjmp	.+4      	; 0x47ec <_ZN14HardwareSerial5beginEm+0x46>
    47e8:	88 0f       	add	r24, r24
    47ea:	99 1f       	adc	r25, r25
    47ec:	0a 94       	dec	r0
    47ee:	e2 f7       	brpl	.-8      	; 0x47e8 <_ZN14HardwareSerial5beginEm+0x42>
    47f0:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    47f2:	60 e0       	ldi	r22, 0x00	; 0
    47f4:	79 e0       	ldi	r23, 0x09	; 9
    47f6:	8d e3       	ldi	r24, 0x3D	; 61
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	05 c0       	rjmp	.+10     	; 0x4806 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    47fc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    47fe:	60 e8       	ldi	r22, 0x80	; 128
    4800:	74 e8       	ldi	r23, 0x84	; 132
    4802:	8e e1       	ldi	r24, 0x1E	; 30
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	a8 01       	movw	r20, r16
    4808:	97 01       	movw	r18, r14
    480a:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__udivmodsi4>
    480e:	21 50       	subi	r18, 0x01	; 1
    4810:	30 40       	sbci	r19, 0x00	; 0
    4812:	40 40       	sbci	r20, 0x00	; 0
    4814:	50 40       	sbci	r21, 0x00	; 0
    4816:	56 95       	lsr	r21
    4818:	47 95       	ror	r20
    481a:	37 95       	ror	r19
    481c:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    481e:	80 e1       	ldi	r24, 0x10	; 16
    4820:	20 30       	cpi	r18, 0x00	; 0
    4822:	38 07       	cpc	r19, r24
    4824:	20 f0       	brcs	.+8      	; 0x482e <_ZN14HardwareSerial5beginEm+0x88>
    4826:	dd 20       	and	r13, r13
    4828:	11 f0       	breq	.+4      	; 0x482e <_ZN14HardwareSerial5beginEm+0x88>
    482a:	dd 24       	eor	r13, r13
    482c:	d6 cf       	rjmp	.-84     	; 0x47da <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    482e:	e8 89       	ldd	r30, Y+16	; 0x10
    4830:	f9 89       	ldd	r31, Y+17	; 0x11
    4832:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4834:	ea 89       	ldd	r30, Y+18	; 0x12
    4836:	fb 89       	ldd	r31, Y+19	; 0x13
    4838:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    483a:	ee 89       	ldd	r30, Y+22	; 0x16
    483c:	ff 89       	ldd	r31, Y+23	; 0x17
    483e:	40 81       	ld	r20, Z
    4840:	21 e0       	ldi	r18, 0x01	; 1
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	c9 01       	movw	r24, r18
    4846:	0a 8c       	ldd	r0, Y+26	; 0x1a
    4848:	02 c0       	rjmp	.+4      	; 0x484e <_ZN14HardwareSerial5beginEm+0xa8>
    484a:	88 0f       	add	r24, r24
    484c:	99 1f       	adc	r25, r25
    484e:	0a 94       	dec	r0
    4850:	e2 f7       	brpl	.-8      	; 0x484a <_ZN14HardwareSerial5beginEm+0xa4>
    4852:	48 2b       	or	r20, r24
    4854:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4856:	ee 89       	ldd	r30, Y+22	; 0x16
    4858:	ff 89       	ldd	r31, Y+23	; 0x17
    485a:	40 81       	ld	r20, Z
    485c:	c9 01       	movw	r24, r18
    485e:	0b 8c       	ldd	r0, Y+27	; 0x1b
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <_ZN14HardwareSerial5beginEm+0xc0>
    4862:	88 0f       	add	r24, r24
    4864:	99 1f       	adc	r25, r25
    4866:	0a 94       	dec	r0
    4868:	e2 f7       	brpl	.-8      	; 0x4862 <_ZN14HardwareSerial5beginEm+0xbc>
    486a:	48 2b       	or	r20, r24
    486c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    486e:	ee 89       	ldd	r30, Y+22	; 0x16
    4870:	ff 89       	ldd	r31, Y+23	; 0x17
    4872:	40 81       	ld	r20, Z
    4874:	c9 01       	movw	r24, r18
    4876:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4878:	02 c0       	rjmp	.+4      	; 0x487e <_ZN14HardwareSerial5beginEm+0xd8>
    487a:	88 0f       	add	r24, r24
    487c:	99 1f       	adc	r25, r25
    487e:	0a 94       	dec	r0
    4880:	e2 f7       	brpl	.-8      	; 0x487a <_ZN14HardwareSerial5beginEm+0xd4>
    4882:	48 2b       	or	r20, r24
    4884:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4886:	ee 89       	ldd	r30, Y+22	; 0x16
    4888:	ff 89       	ldd	r31, Y+23	; 0x17
    488a:	80 81       	ld	r24, Z
    488c:	0d 8c       	ldd	r0, Y+29	; 0x1d
    488e:	02 c0       	rjmp	.+4      	; 0x4894 <_ZN14HardwareSerial5beginEm+0xee>
    4890:	22 0f       	add	r18, r18
    4892:	33 1f       	adc	r19, r19
    4894:	0a 94       	dec	r0
    4896:	e2 f7       	brpl	.-8      	; 0x4890 <_ZN14HardwareSerial5beginEm+0xea>
    4898:	20 95       	com	r18
    489a:	28 23       	and	r18, r24
    489c:	20 83       	st	Z, r18
}
    489e:	df 91       	pop	r29
    48a0:	cf 91       	pop	r28
    48a2:	1f 91       	pop	r17
    48a4:	0f 91       	pop	r16
    48a6:	ff 90       	pop	r15
    48a8:	ef 90       	pop	r14
    48aa:	df 90       	pop	r13
    48ac:	bf 90       	pop	r11
    48ae:	af 90       	pop	r10
    48b0:	08 95       	ret

000048b2 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    48b2:	dc 01       	movw	r26, r24
    48b4:	1c 96       	adiw	r26, 0x0c	; 12
    48b6:	ed 91       	ld	r30, X+
    48b8:	fc 91       	ld	r31, X
    48ba:	1d 97       	sbiw	r26, 0x0d	; 13
    48bc:	e0 5c       	subi	r30, 0xC0	; 192
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	21 91       	ld	r18, Z+
    48c2:	31 91       	ld	r19, Z+
    48c4:	80 81       	ld	r24, Z
    48c6:	91 81       	ldd	r25, Z+1	; 0x01
    48c8:	28 1b       	sub	r18, r24
    48ca:	39 0b       	sbc	r19, r25
    48cc:	2f 73       	andi	r18, 0x3F	; 63
    48ce:	30 70       	andi	r19, 0x00	; 0
}
    48d0:	c9 01       	movw	r24, r18
    48d2:	08 95       	ret

000048d4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    48d4:	dc 01       	movw	r26, r24
    48d6:	1c 96       	adiw	r26, 0x0c	; 12
    48d8:	ed 91       	ld	r30, X+
    48da:	fc 91       	ld	r31, X
    48dc:	1d 97       	sbiw	r26, 0x0d	; 13
    48de:	e0 5c       	subi	r30, 0xC0	; 192
    48e0:	ff 4f       	sbci	r31, 0xFF	; 255
    48e2:	20 81       	ld	r18, Z
    48e4:	31 81       	ldd	r19, Z+1	; 0x01
    48e6:	e0 54       	subi	r30, 0x40	; 64
    48e8:	f0 40       	sbci	r31, 0x00	; 0
    48ea:	df 01       	movw	r26, r30
    48ec:	ae 5b       	subi	r26, 0xBE	; 190
    48ee:	bf 4f       	sbci	r27, 0xFF	; 255
    48f0:	8d 91       	ld	r24, X+
    48f2:	9c 91       	ld	r25, X
    48f4:	11 97       	sbiw	r26, 0x01	; 1
    48f6:	28 17       	cp	r18, r24
    48f8:	39 07       	cpc	r19, r25
    48fa:	19 f4       	brne	.+6      	; 0x4902 <_ZN14HardwareSerial4peekEv+0x2e>
    48fc:	2f ef       	ldi	r18, 0xFF	; 255
    48fe:	3f ef       	ldi	r19, 0xFF	; 255
    4900:	07 c0       	rjmp	.+14     	; 0x4910 <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4902:	8d 91       	ld	r24, X+
    4904:	9c 91       	ld	r25, X
    4906:	e8 0f       	add	r30, r24
    4908:	f9 1f       	adc	r31, r25
    490a:	80 81       	ld	r24, Z
    490c:	28 2f       	mov	r18, r24
    490e:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4910:	c9 01       	movw	r24, r18
    4912:	08 95       	ret

00004914 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4914:	dc 01       	movw	r26, r24
    4916:	1c 96       	adiw	r26, 0x0c	; 12
    4918:	ed 91       	ld	r30, X+
    491a:	fc 91       	ld	r31, X
    491c:	1d 97       	sbiw	r26, 0x0d	; 13
    491e:	e0 5c       	subi	r30, 0xC0	; 192
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	20 81       	ld	r18, Z
    4924:	31 81       	ldd	r19, Z+1	; 0x01
    4926:	e0 54       	subi	r30, 0x40	; 64
    4928:	f0 40       	sbci	r31, 0x00	; 0
    492a:	df 01       	movw	r26, r30
    492c:	ae 5b       	subi	r26, 0xBE	; 190
    492e:	bf 4f       	sbci	r27, 0xFF	; 255
    4930:	8d 91       	ld	r24, X+
    4932:	9c 91       	ld	r25, X
    4934:	11 97       	sbiw	r26, 0x01	; 1
    4936:	28 17       	cp	r18, r24
    4938:	39 07       	cpc	r19, r25
    493a:	19 f4       	brne	.+6      	; 0x4942 <_ZN14HardwareSerial4readEv+0x2e>
    493c:	2f ef       	ldi	r18, 0xFF	; 255
    493e:	3f ef       	ldi	r19, 0xFF	; 255
    4940:	10 c0       	rjmp	.+32     	; 0x4962 <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    4942:	8d 91       	ld	r24, X+
    4944:	9c 91       	ld	r25, X
    4946:	11 97       	sbiw	r26, 0x01	; 1
    4948:	e8 0f       	add	r30, r24
    494a:	f9 1f       	adc	r31, r25
    494c:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    494e:	8d 91       	ld	r24, X+
    4950:	9c 91       	ld	r25, X
    4952:	11 97       	sbiw	r26, 0x01	; 1
    4954:	01 96       	adiw	r24, 0x01	; 1
    4956:	8f 73       	andi	r24, 0x3F	; 63
    4958:	90 70       	andi	r25, 0x00	; 0
    495a:	11 96       	adiw	r26, 0x01	; 1
    495c:	9c 93       	st	X, r25
    495e:	8e 93       	st	-X, r24
    return c;
    4960:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    4962:	c9 01       	movw	r24, r18
    4964:	08 95       	ret

00004966 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    4966:	fc 01       	movw	r30, r24
    4968:	86 85       	ldd	r24, Z+14	; 0x0e
    496a:	97 85       	ldd	r25, Z+15	; 0x0f
    496c:	dc 01       	movw	r26, r24
    496e:	a0 5c       	subi	r26, 0xC0	; 192
    4970:	bf 4f       	sbci	r27, 0xFF	; 255
    4972:	fc 01       	movw	r30, r24
    4974:	ee 5b       	subi	r30, 0xBE	; 190
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	2d 91       	ld	r18, X+
    497a:	3c 91       	ld	r19, X
    497c:	11 97       	sbiw	r26, 0x01	; 1
    497e:	80 81       	ld	r24, Z
    4980:	91 81       	ldd	r25, Z+1	; 0x01
    4982:	28 17       	cp	r18, r24
    4984:	39 07       	cpc	r19, r25
    4986:	c1 f7       	brne	.-16     	; 0x4978 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    4988:	08 95       	ret

0000498a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4990:	ee 85       	ldd	r30, Y+14	; 0x0e
    4992:	ff 85       	ldd	r31, Y+15	; 0x0f
    4994:	e0 5c       	subi	r30, 0xC0	; 192
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	20 81       	ld	r18, Z
    499a:	31 81       	ldd	r19, Z+1	; 0x01
    499c:	e0 54       	subi	r30, 0x40	; 64
    499e:	f0 40       	sbci	r31, 0x00	; 0
    49a0:	2f 5f       	subi	r18, 0xFF	; 255
    49a2:	3f 4f       	sbci	r19, 0xFF	; 255
    49a4:	2f 73       	andi	r18, 0x3F	; 63
    49a6:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    49a8:	df 01       	movw	r26, r30
    49aa:	ae 5b       	subi	r26, 0xBE	; 190
    49ac:	bf 4f       	sbci	r27, 0xFF	; 255
    49ae:	8d 91       	ld	r24, X+
    49b0:	9c 91       	ld	r25, X
    49b2:	11 97       	sbiw	r26, 0x01	; 1
    49b4:	28 17       	cp	r18, r24
    49b6:	39 07       	cpc	r19, r25
    49b8:	d1 f3       	breq	.-12     	; 0x49ae <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    49ba:	e0 5c       	subi	r30, 0xC0	; 192
    49bc:	ff 4f       	sbci	r31, 0xFF	; 255
    49be:	80 81       	ld	r24, Z
    49c0:	91 81       	ldd	r25, Z+1	; 0x01
    49c2:	e0 54       	subi	r30, 0x40	; 64
    49c4:	f0 40       	sbci	r31, 0x00	; 0
    49c6:	e8 0f       	add	r30, r24
    49c8:	f9 1f       	adc	r31, r25
    49ca:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    49cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    49ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    49d0:	e0 5c       	subi	r30, 0xC0	; 192
    49d2:	ff 4f       	sbci	r31, 0xFF	; 255
    49d4:	31 83       	std	Z+1, r19	; 0x01
    49d6:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    49d8:	ee 89       	ldd	r30, Y+22	; 0x16
    49da:	ff 89       	ldd	r31, Y+23	; 0x17
    49dc:	20 81       	ld	r18, Z
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	0d 8c       	ldd	r0, Y+29	; 0x1d
    49e4:	02 c0       	rjmp	.+4      	; 0x49ea <_ZN14HardwareSerial5writeEh+0x60>
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	0a 94       	dec	r0
    49ec:	e2 f7       	brpl	.-8      	; 0x49e6 <_ZN14HardwareSerial5writeEh+0x5c>
    49ee:	28 2b       	or	r18, r24
    49f0:	20 83       	st	Z, r18
  
  return 1;
}
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	08 95       	ret

000049fc <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    49fc:	10 92 37 06 	sts	0x0637, r1
    4a00:	10 92 36 06 	sts	0x0636, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4a04:	88 ee       	ldi	r24, 0xE8	; 232
    4a06:	93 e0       	ldi	r25, 0x03	; 3
    4a08:	a0 e0       	ldi	r26, 0x00	; 0
    4a0a:	b0 e0       	ldi	r27, 0x00	; 0
    4a0c:	80 93 38 06 	sts	0x0638, r24
    4a10:	90 93 39 06 	sts	0x0639, r25
    4a14:	a0 93 3a 06 	sts	0x063A, r26
    4a18:	b0 93 3b 06 	sts	0x063B, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4a1c:	85 e7       	ldi	r24, 0x75	; 117
    4a1e:	92 e0       	ldi	r25, 0x02	; 2
    4a20:	90 93 35 06 	sts	0x0635, r25
    4a24:	80 93 34 06 	sts	0x0634, r24
{
  _rx_buffer = rx_buffer;
    4a28:	8c ea       	ldi	r24, 0xAC	; 172
    4a2a:	95 e0       	ldi	r25, 0x05	; 5
    4a2c:	90 93 41 06 	sts	0x0641, r25
    4a30:	80 93 40 06 	sts	0x0640, r24
  _tx_buffer = tx_buffer;
    4a34:	80 ef       	ldi	r24, 0xF0	; 240
    4a36:	95 e0       	ldi	r25, 0x05	; 5
    4a38:	90 93 43 06 	sts	0x0643, r25
    4a3c:	80 93 42 06 	sts	0x0642, r24
  _ubrrh = ubrrh;
    4a40:	85 ec       	ldi	r24, 0xC5	; 197
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	90 93 45 06 	sts	0x0645, r25
    4a48:	80 93 44 06 	sts	0x0644, r24
  _ubrrl = ubrrl;
    4a4c:	84 ec       	ldi	r24, 0xC4	; 196
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	90 93 47 06 	sts	0x0647, r25
    4a54:	80 93 46 06 	sts	0x0646, r24
  _ucsra = ucsra;
    4a58:	80 ec       	ldi	r24, 0xC0	; 192
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	90 93 49 06 	sts	0x0649, r25
    4a60:	80 93 48 06 	sts	0x0648, r24
  _ucsrb = ucsrb;
    4a64:	81 ec       	ldi	r24, 0xC1	; 193
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	90 93 4b 06 	sts	0x064B, r25
    4a6c:	80 93 4a 06 	sts	0x064A, r24
  _udr = udr;
    4a70:	86 ec       	ldi	r24, 0xC6	; 198
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	90 93 4d 06 	sts	0x064D, r25
    4a78:	80 93 4c 06 	sts	0x064C, r24
  _rxen = rxen;
    4a7c:	84 e0       	ldi	r24, 0x04	; 4
    4a7e:	80 93 4e 06 	sts	0x064E, r24
  _txen = txen;
    4a82:	83 e0       	ldi	r24, 0x03	; 3
    4a84:	80 93 4f 06 	sts	0x064F, r24
  _rxcie = rxcie;
    4a88:	87 e0       	ldi	r24, 0x07	; 7
    4a8a:	80 93 50 06 	sts	0x0650, r24
  _udrie = udrie;
    4a8e:	85 e0       	ldi	r24, 0x05	; 5
    4a90:	80 93 51 06 	sts	0x0651, r24
  _u2x = u2x;
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	80 93 52 06 	sts	0x0652, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4a9a:	08 95       	ret

00004a9c <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    4a9c:	cf 92       	push	r12
    4a9e:	df 92       	push	r13
    4aa0:	ef 92       	push	r14
    4aa2:	ff 92       	push	r15
    4aa4:	0f 93       	push	r16
    4aa6:	1f 93       	push	r17
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	7c 01       	movw	r14, r24
    4aae:	6b 01       	movw	r12, r22
    4ab0:	8a 01       	movw	r16, r20
    4ab2:	c0 e0       	ldi	r28, 0x00	; 0
    4ab4:	d0 e0       	ldi	r29, 0x00	; 0
    4ab6:	0f c0       	rjmp	.+30     	; 0x4ad6 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    4ab8:	d6 01       	movw	r26, r12
    4aba:	6d 91       	ld	r22, X+
    4abc:	6d 01       	movw	r12, r26
    4abe:	d7 01       	movw	r26, r14
    4ac0:	ed 91       	ld	r30, X+
    4ac2:	fc 91       	ld	r31, X
    4ac4:	01 90       	ld	r0, Z+
    4ac6:	f0 81       	ld	r31, Z
    4ac8:	e0 2d       	mov	r30, r0
    4aca:	c7 01       	movw	r24, r14
    4acc:	09 95       	icall
    4ace:	c8 0f       	add	r28, r24
    4ad0:	d9 1f       	adc	r29, r25
    4ad2:	01 50       	subi	r16, 0x01	; 1
    4ad4:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    4ad6:	01 15       	cp	r16, r1
    4ad8:	11 05       	cpc	r17, r1
    4ada:	71 f7       	brne	.-36     	; 0x4ab8 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    4adc:	ce 01       	movw	r24, r28
    4ade:	df 91       	pop	r29
    4ae0:	cf 91       	pop	r28
    4ae2:	1f 91       	pop	r17
    4ae4:	0f 91       	pop	r16
    4ae6:	ff 90       	pop	r15
    4ae8:	ef 90       	pop	r14
    4aea:	df 90       	pop	r13
    4aec:	cf 90       	pop	r12
    4aee:	08 95       	ret

00004af0 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    4af0:	ef 92       	push	r14
    4af2:	ff 92       	push	r15
    4af4:	0f 93       	push	r16
    4af6:	1f 93       	push	r17
    4af8:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4afa:	dc 01       	movw	r26, r24
    4afc:	ed 91       	ld	r30, X+
    4afe:	fc 91       	ld	r31, X
    4b00:	01 90       	ld	r0, Z+
    4b02:	f0 81       	ld	r31, Z
    4b04:	e0 2d       	mov	r30, r0
    4b06:	6d e0       	ldi	r22, 0x0D	; 13
    4b08:	09 95       	icall
    4b0a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    4b0c:	d8 01       	movw	r26, r16
    4b0e:	ed 91       	ld	r30, X+
    4b10:	fc 91       	ld	r31, X
    4b12:	01 90       	ld	r0, Z+
    4b14:	f0 81       	ld	r31, Z
    4b16:	e0 2d       	mov	r30, r0
    4b18:	c8 01       	movw	r24, r16
    4b1a:	6a e0       	ldi	r22, 0x0A	; 10
    4b1c:	09 95       	icall
    4b1e:	9c 01       	movw	r18, r24
    4b20:	2e 0d       	add	r18, r14
    4b22:	3f 1d       	adc	r19, r15
    4b24:	c9 01       	movw	r24, r18
    4b26:	1f 91       	pop	r17
    4b28:	0f 91       	pop	r16
    4b2a:	ff 90       	pop	r15
    4b2c:	ef 90       	pop	r14
    4b2e:	08 95       	ret

00004b30 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    4b30:	cf 93       	push	r28
    4b32:	df 93       	push	r29
    4b34:	db 01       	movw	r26, r22
    4b36:	0d 90       	ld	r0, X+
    4b38:	00 20       	and	r0, r0
    4b3a:	e9 f7       	brne	.-6      	; 0x4b36 <_ZN5Print5writeEPKc+0x6>
    4b3c:	11 97       	sbiw	r26, 0x01	; 1
    4b3e:	a6 1b       	sub	r26, r22
    4b40:	b7 0b       	sbc	r27, r23
    4b42:	ec 01       	movw	r28, r24
    4b44:	e8 81       	ld	r30, Y
    4b46:	f9 81       	ldd	r31, Y+1	; 0x01
    4b48:	02 80       	ldd	r0, Z+2	; 0x02
    4b4a:	f3 81       	ldd	r31, Z+3	; 0x03
    4b4c:	e0 2d       	mov	r30, r0
    4b4e:	ad 01       	movw	r20, r26
    4b50:	09 95       	icall
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	08 95       	ret

00004b58 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    4b58:	4f 92       	push	r4
    4b5a:	5f 92       	push	r5
    4b5c:	7f 92       	push	r7
    4b5e:	8f 92       	push	r8
    4b60:	9f 92       	push	r9
    4b62:	af 92       	push	r10
    4b64:	bf 92       	push	r11
    4b66:	cf 92       	push	r12
    4b68:	df 92       	push	r13
    4b6a:	ef 92       	push	r14
    4b6c:	ff 92       	push	r15
    4b6e:	0f 93       	push	r16
    4b70:	1f 93       	push	r17
    4b72:	df 93       	push	r29
    4b74:	cf 93       	push	r28
    4b76:	cd b7       	in	r28, 0x3d	; 61
    4b78:	de b7       	in	r29, 0x3e	; 62
    4b7a:	a1 97       	sbiw	r28, 0x21	; 33
    4b7c:	0f b6       	in	r0, 0x3f	; 63
    4b7e:	f8 94       	cli
    4b80:	de bf       	out	0x3e, r29	; 62
    4b82:	0f be       	out	0x3f, r0	; 63
    4b84:	cd bf       	out	0x3d, r28	; 61
    4b86:	2c 01       	movw	r4, r24
    4b88:	74 2e       	mov	r7, r20
    4b8a:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4b8c:	22 30       	cpi	r18, 0x02	; 2
    4b8e:	08 f4       	brcc	.+2      	; 0x4b92 <_ZN5Print11printNumberEmh+0x3a>
    4b90:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4b92:	19 a2       	std	Y+33, r1	; 0x21
    4b94:	31 e2       	ldi	r19, 0x21	; 33
    4b96:	c3 2e       	mov	r12, r19
    4b98:	d1 2c       	mov	r13, r1
    4b9a:	cc 0e       	add	r12, r28
    4b9c:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    4b9e:	82 2e       	mov	r8, r18
    4ba0:	99 24       	eor	r9, r9
    4ba2:	aa 24       	eor	r10, r10
    4ba4:	bb 24       	eor	r11, r11
    4ba6:	67 2d       	mov	r22, r7
    4ba8:	75 2f       	mov	r23, r21
    4baa:	a5 01       	movw	r20, r10
    4bac:	94 01       	movw	r18, r8
    4bae:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__udivmodsi4>
    4bb2:	79 01       	movw	r14, r18
    4bb4:	8a 01       	movw	r16, r20
    char c = m - base * n;
    4bb6:	c8 01       	movw	r24, r16
    4bb8:	b7 01       	movw	r22, r14
    4bba:	a5 01       	movw	r20, r10
    4bbc:	94 01       	movw	r18, r8
    4bbe:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <__mulsi3>
    4bc2:	47 2d       	mov	r20, r7
    4bc4:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4bc6:	08 94       	sec
    4bc8:	c1 08       	sbc	r12, r1
    4bca:	d1 08       	sbc	r13, r1
    4bcc:	4a 30       	cpi	r20, 0x0A	; 10
    4bce:	14 f4       	brge	.+4      	; 0x4bd4 <_ZN5Print11printNumberEmh+0x7c>
    4bd0:	40 5d       	subi	r20, 0xD0	; 208
    4bd2:	01 c0       	rjmp	.+2      	; 0x4bd6 <_ZN5Print11printNumberEmh+0x7e>
    4bd4:	49 5c       	subi	r20, 0xC9	; 201
    4bd6:	f6 01       	movw	r30, r12
    4bd8:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    4bda:	e1 14       	cp	r14, r1
    4bdc:	f1 04       	cpc	r15, r1
    4bde:	01 05       	cpc	r16, r1
    4be0:	11 05       	cpc	r17, r1
    4be2:	21 f0       	breq	.+8      	; 0x4bec <_ZN5Print11printNumberEmh+0x94>
    4be4:	7e 2c       	mov	r7, r14
    4be6:	5f 2d       	mov	r21, r15
    4be8:	c8 01       	movw	r24, r16
    4bea:	dd cf       	rjmp	.-70     	; 0x4ba6 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    4bec:	c2 01       	movw	r24, r4
    4bee:	b6 01       	movw	r22, r12
    4bf0:	0e 94 98 25 	call	0x4b30	; 0x4b30 <_ZN5Print5writeEPKc>
}
    4bf4:	a1 96       	adiw	r28, 0x21	; 33
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	f8 94       	cli
    4bfa:	de bf       	out	0x3e, r29	; 62
    4bfc:	0f be       	out	0x3f, r0	; 63
    4bfe:	cd bf       	out	0x3d, r28	; 61
    4c00:	cf 91       	pop	r28
    4c02:	df 91       	pop	r29
    4c04:	1f 91       	pop	r17
    4c06:	0f 91       	pop	r16
    4c08:	ff 90       	pop	r15
    4c0a:	ef 90       	pop	r14
    4c0c:	df 90       	pop	r13
    4c0e:	cf 90       	pop	r12
    4c10:	bf 90       	pop	r11
    4c12:	af 90       	pop	r10
    4c14:	9f 90       	pop	r9
    4c16:	8f 90       	pop	r8
    4c18:	7f 90       	pop	r7
    4c1a:	5f 90       	pop	r5
    4c1c:	4f 90       	pop	r4
    4c1e:	08 95       	ret

00004c20 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    4c20:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    4c22:	21 15       	cp	r18, r1
    4c24:	31 05       	cpc	r19, r1
    4c26:	41 f4       	brne	.+16     	; 0x4c38 <_ZN5Print5printEmi+0x18>
    4c28:	ed 91       	ld	r30, X+
    4c2a:	fc 91       	ld	r31, X
    4c2c:	01 90       	ld	r0, Z+
    4c2e:	f0 81       	ld	r31, Z
    4c30:	e0 2d       	mov	r30, r0
    4c32:	64 2f       	mov	r22, r20
    4c34:	09 95       	icall
    4c36:	08 95       	ret
  else return printNumber(n, base);
    4c38:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <_ZN5Print11printNumberEmh>
}
    4c3c:	08 95       	ret

00004c3e <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
    4c3e:	cf 92       	push	r12
    4c40:	df 92       	push	r13
    4c42:	ef 92       	push	r14
    4c44:	ff 92       	push	r15
    4c46:	0f 93       	push	r16
    4c48:	1f 93       	push	r17
    4c4a:	6c 01       	movw	r12, r24
    4c4c:	e6 2e       	mov	r14, r22
    4c4e:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4c50:	ff 24       	eor	r15, r15
    4c52:	00 e0       	ldi	r16, 0x00	; 0
    4c54:	10 e0       	ldi	r17, 0x00	; 0
    4c56:	b8 01       	movw	r22, r16
    4c58:	a7 01       	movw	r20, r14
    4c5a:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEmi>
    4c5e:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    4c60:	c6 01       	movw	r24, r12
    4c62:	0e 94 78 25 	call	0x4af0	; 0x4af0 <_ZN5Print7printlnEv>
    4c66:	08 0f       	add	r16, r24
    4c68:	19 1f       	adc	r17, r25
  return n;
}
    4c6a:	c8 01       	movw	r24, r16
    4c6c:	1f 91       	pop	r17
    4c6e:	0f 91       	pop	r16
    4c70:	ff 90       	pop	r15
    4c72:	ef 90       	pop	r14
    4c74:	df 90       	pop	r13
    4c76:	cf 90       	pop	r12
    4c78:	08 95       	ret

00004c7a <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    4c7a:	cf 92       	push	r12
    4c7c:	df 92       	push	r13
    4c7e:	ef 92       	push	r14
    4c80:	ff 92       	push	r15
    4c82:	0f 93       	push	r16
    4c84:	1f 93       	push	r17
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	ec 01       	movw	r28, r24
    4c8c:	6a 01       	movw	r12, r20
    4c8e:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    4c90:	21 15       	cp	r18, r1
    4c92:	31 05       	cpc	r19, r1
    4c94:	41 f4       	brne	.+16     	; 0x4ca6 <_ZN5Print5printEli+0x2c>
    return write(n);
    4c96:	e8 81       	ld	r30, Y
    4c98:	f9 81       	ldd	r31, Y+1	; 0x01
    4c9a:	01 90       	ld	r0, Z+
    4c9c:	f0 81       	ld	r31, Z
    4c9e:	e0 2d       	mov	r30, r0
    4ca0:	64 2f       	mov	r22, r20
    4ca2:	09 95       	icall
    4ca4:	1f c0       	rjmp	.+62     	; 0x4ce4 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    4ca6:	2a 30       	cpi	r18, 0x0A	; 10
    4ca8:	31 05       	cpc	r19, r1
    4caa:	d1 f4       	brne	.+52     	; 0x4ce0 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    4cac:	77 ff       	sbrs	r23, 7
    4cae:	17 c0       	rjmp	.+46     	; 0x4cde <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4cb0:	e8 81       	ld	r30, Y
    4cb2:	f9 81       	ldd	r31, Y+1	; 0x01
    4cb4:	01 90       	ld	r0, Z+
    4cb6:	f0 81       	ld	r31, Z
    4cb8:	e0 2d       	mov	r30, r0
    4cba:	6d e2       	ldi	r22, 0x2D	; 45
    4cbc:	09 95       	icall
    4cbe:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    4cc0:	44 27       	eor	r20, r20
    4cc2:	55 27       	eor	r21, r21
    4cc4:	ba 01       	movw	r22, r20
    4cc6:	4c 19       	sub	r20, r12
    4cc8:	5d 09       	sbc	r21, r13
    4cca:	6e 09       	sbc	r22, r14
    4ccc:	7f 09       	sbc	r23, r15
    4cce:	ce 01       	movw	r24, r28
    4cd0:	2a e0       	ldi	r18, 0x0A	; 10
    4cd2:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <_ZN5Print11printNumberEmh>
    4cd6:	98 01       	movw	r18, r16
    4cd8:	28 0f       	add	r18, r24
    4cda:	39 1f       	adc	r19, r25
    4cdc:	04 c0       	rjmp	.+8      	; 0x4ce6 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    4cde:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    4ce0:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <_ZN5Print11printNumberEmh>
    4ce4:	9c 01       	movw	r18, r24
  }
}
    4ce6:	c9 01       	movw	r24, r18
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	ff 90       	pop	r15
    4cf2:	ef 90       	pop	r14
    4cf4:	df 90       	pop	r13
    4cf6:	cf 90       	pop	r12
    4cf8:	08 95       	ret

00004cfa <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    4cfa:	cf 92       	push	r12
    4cfc:	df 92       	push	r13
    4cfe:	ef 92       	push	r14
    4d00:	ff 92       	push	r15
    4d02:	0f 93       	push	r16
    4d04:	1f 93       	push	r17
    4d06:	6c 01       	movw	r12, r24
    4d08:	7b 01       	movw	r14, r22
    4d0a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4d0c:	00 27       	eor	r16, r16
    4d0e:	f7 fc       	sbrc	r15, 7
    4d10:	00 95       	com	r16
    4d12:	10 2f       	mov	r17, r16
    4d14:	b8 01       	movw	r22, r16
    4d16:	a7 01       	movw	r20, r14
    4d18:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <_ZN5Print5printEli>
    4d1c:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4d1e:	c6 01       	movw	r24, r12
    4d20:	0e 94 78 25 	call	0x4af0	; 0x4af0 <_ZN5Print7printlnEv>
    4d24:	08 0f       	add	r16, r24
    4d26:	19 1f       	adc	r17, r25
  return n;
}
    4d28:	c8 01       	movw	r24, r16
    4d2a:	1f 91       	pop	r17
    4d2c:	0f 91       	pop	r16
    4d2e:	ff 90       	pop	r15
    4d30:	ef 90       	pop	r14
    4d32:	df 90       	pop	r13
    4d34:	cf 90       	pop	r12
    4d36:	08 95       	ret

00004d38 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4d38:	0e 94 98 25 	call	0x4b30	; 0x4b30 <_ZN5Print5writeEPKc>
}
    4d3c:	08 95       	ret

00004d3e <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    4d3e:	7f 92       	push	r7
    4d40:	8f 92       	push	r8
    4d42:	9f 92       	push	r9
    4d44:	af 92       	push	r10
    4d46:	bf 92       	push	r11
    4d48:	cf 92       	push	r12
    4d4a:	df 92       	push	r13
    4d4c:	ef 92       	push	r14
    4d4e:	ff 92       	push	r15
    4d50:	0f 93       	push	r16
    4d52:	1f 93       	push	r17
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	4c 01       	movw	r8, r24
    4d5a:	7a 01       	movw	r14, r20
    4d5c:	8b 01       	movw	r16, r22
    4d5e:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    4d60:	cb 01       	movw	r24, r22
    4d62:	ba 01       	movw	r22, r20
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	40 e0       	ldi	r20, 0x00	; 0
    4d6a:	50 e0       	ldi	r21, 0x00	; 0
    4d6c:	0e 94 23 2a 	call	0x5446	; 0x5446 <__cmpsf2>
    4d70:	87 fd       	sbrc	r24, 7
    4d72:	03 c0       	rjmp	.+6      	; 0x4d7a <_ZN5Print10printFloatEdh+0x3c>
    4d74:	c0 e0       	ldi	r28, 0x00	; 0
    4d76:	d0 e0       	ldi	r29, 0x00	; 0
    4d78:	0e c0       	rjmp	.+28     	; 0x4d96 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    4d7a:	d4 01       	movw	r26, r8
    4d7c:	ed 91       	ld	r30, X+
    4d7e:	fc 91       	ld	r31, X
    4d80:	01 90       	ld	r0, Z+
    4d82:	f0 81       	ld	r31, Z
    4d84:	e0 2d       	mov	r30, r0
    4d86:	c4 01       	movw	r24, r8
    4d88:	6d e2       	ldi	r22, 0x2D	; 45
    4d8a:	09 95       	icall
    4d8c:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    4d8e:	17 fb       	bst	r17, 7
    4d90:	10 95       	com	r17
    4d92:	17 f9       	bld	r17, 7
    4d94:	10 95       	com	r17
    4d96:	20 e0       	ldi	r18, 0x00	; 0
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	40 e0       	ldi	r20, 0x00	; 0
    4d9c:	5f e3       	ldi	r21, 0x3F	; 63
    4d9e:	aa 24       	eor	r10, r10
    4da0:	0b c0       	rjmp	.+22     	; 0x4db8 <_ZN5Print10printFloatEdh+0x7a>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    4da2:	ca 01       	movw	r24, r20
    4da4:	b9 01       	movw	r22, r18
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	40 e2       	ldi	r20, 0x20	; 32
    4dac:	51 e4       	ldi	r21, 0x41	; 65
    4dae:	0e 94 2a 2a 	call	0x5454	; 0x5454 <__divsf3>
    4db2:	9b 01       	movw	r18, r22
    4db4:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4db6:	a3 94       	inc	r10
    4db8:	a7 14       	cp	r10, r7
    4dba:	98 f3       	brcs	.-26     	; 0x4da2 <_ZN5Print10printFloatEdh+0x64>
    rounding /= 10.0;
  
  number += rounding;
    4dbc:	c8 01       	movw	r24, r16
    4dbe:	b7 01       	movw	r22, r14
    4dc0:	0e 94 4a 29 	call	0x5294	; 0x5294 <__addsf3>
    4dc4:	5b 01       	movw	r10, r22
    4dc6:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4dc8:	0e 94 97 2a 	call	0x552e	; 0x552e <__fixunssfsi>
    4dcc:	7b 01       	movw	r14, r22
    4dce:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    4dd0:	c4 01       	movw	r24, r8
    4dd2:	b8 01       	movw	r22, r16
    4dd4:	a7 01       	movw	r20, r14
    4dd6:	2a e0       	ldi	r18, 0x0A	; 10
    4dd8:	30 e0       	ldi	r19, 0x00	; 0
    4dda:	0e 94 10 26 	call	0x4c20	; 0x4c20 <_ZN5Print5printEmi>
    4dde:	c8 0f       	add	r28, r24
    4de0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4de2:	77 20       	and	r7, r7
    4de4:	39 f0       	breq	.+14     	; 0x4df4 <_ZN5Print10printFloatEdh+0xb6>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4de6:	c4 01       	movw	r24, r8
    4de8:	62 e4       	ldi	r22, 0x42	; 66
    4dea:	72 e0       	ldi	r23, 0x02	; 2
    4dec:	0e 94 98 25 	call	0x4b30	; 0x4b30 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    4df0:	c8 0f       	add	r28, r24
    4df2:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    4df4:	c8 01       	movw	r24, r16
    4df6:	b7 01       	movw	r22, r14
    4df8:	0e 94 c3 2a 	call	0x5586	; 0x5586 <__floatunsisf>
    4dfc:	9b 01       	movw	r18, r22
    4dfe:	ac 01       	movw	r20, r24
    4e00:	c6 01       	movw	r24, r12
    4e02:	b5 01       	movw	r22, r10
    4e04:	0e 94 49 29 	call	0x5292	; 0x5292 <__subsf3>
    4e08:	24 c0       	rjmp	.+72     	; 0x4e52 <_ZN5Print10printFloatEdh+0x114>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	40 e2       	ldi	r20, 0x20	; 32
    4e10:	51 e4       	ldi	r21, 0x41	; 65
    4e12:	0e 94 29 2c 	call	0x5852	; 0x5852 <__mulsf3>
    4e16:	7b 01       	movw	r14, r22
    4e18:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    4e1a:	0e 94 92 2a 	call	0x5524	; 0x5524 <__fixsfsi>
    4e1e:	5b 01       	movw	r10, r22
    4e20:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4e22:	cc 24       	eor	r12, r12
    4e24:	b7 fc       	sbrc	r11, 7
    4e26:	c0 94       	com	r12
    4e28:	dc 2c       	mov	r13, r12
    4e2a:	c4 01       	movw	r24, r8
    4e2c:	b6 01       	movw	r22, r12
    4e2e:	a5 01       	movw	r20, r10
    4e30:	2a e0       	ldi	r18, 0x0A	; 10
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    4e38:	c8 0f       	add	r28, r24
    4e3a:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    4e3c:	c6 01       	movw	r24, r12
    4e3e:	b5 01       	movw	r22, r10
    4e40:	0e 94 c5 2a 	call	0x558a	; 0x558a <__floatsisf>
    4e44:	9b 01       	movw	r18, r22
    4e46:	ac 01       	movw	r20, r24
    4e48:	c8 01       	movw	r24, r16
    4e4a:	b7 01       	movw	r22, r14
    4e4c:	0e 94 49 29 	call	0x5292	; 0x5292 <__subsf3>
    4e50:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4e52:	77 20       	and	r7, r7
    4e54:	d1 f6       	brne	.-76     	; 0x4e0a <_ZN5Print10printFloatEdh+0xcc>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4e56:	ce 01       	movw	r24, r28
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	1f 91       	pop	r17
    4e5e:	0f 91       	pop	r16
    4e60:	ff 90       	pop	r15
    4e62:	ef 90       	pop	r14
    4e64:	df 90       	pop	r13
    4e66:	cf 90       	pop	r12
    4e68:	bf 90       	pop	r11
    4e6a:	af 90       	pop	r10
    4e6c:	9f 90       	pop	r9
    4e6e:	8f 90       	pop	r8
    4e70:	7f 90       	pop	r7
    4e72:	08 95       	ret

00004e74 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    4e74:	ef 92       	push	r14
    4e76:	ff 92       	push	r15
    4e78:	0f 93       	push	r16
    4e7a:	1f 93       	push	r17
    4e7c:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4e7e:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <_ZN5Print10printFloatEdh>
    4e82:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    4e84:	c7 01       	movw	r24, r14
    4e86:	0e 94 78 25 	call	0x4af0	; 0x4af0 <_ZN5Print7printlnEv>
    4e8a:	08 0f       	add	r16, r24
    4e8c:	19 1f       	adc	r17, r25
  return n;
}
    4e8e:	c8 01       	movw	r24, r16
    4e90:	1f 91       	pop	r17
    4e92:	0f 91       	pop	r16
    4e94:	ff 90       	pop	r15
    4e96:	ef 90       	pop	r14
    4e98:	08 95       	ret

00004e9a <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    4e9a:	ef 92       	push	r14
    4e9c:	ff 92       	push	r15
    4e9e:	0f 93       	push	r16
    4ea0:	1f 93       	push	r17
    4ea2:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4ea4:	0e 94 98 25 	call	0x4b30	; 0x4b30 <_ZN5Print5writeEPKc>
    4ea8:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    4eaa:	c7 01       	movw	r24, r14
    4eac:	0e 94 78 25 	call	0x4af0	; 0x4af0 <_ZN5Print7printlnEv>
    4eb0:	08 0f       	add	r16, r24
    4eb2:	19 1f       	adc	r17, r25
  return n;
}
    4eb4:	c8 01       	movw	r24, r16
    4eb6:	1f 91       	pop	r17
    4eb8:	0f 91       	pop	r16
    4eba:	ff 90       	pop	r15
    4ebc:	ef 90       	pop	r14
    4ebe:	08 95       	ret

00004ec0 <main>:
#include <Arduino.h>

int main(void)
    4ec0:	cf 93       	push	r28
    4ec2:	df 93       	push	r29
{
	init();
    4ec4:	0e 94 28 28 	call	0x5050	; 0x5050 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4ec8:	0e 94 1c 23 	call	0x4638	; 0x4638 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4ecc:	c5 e8       	ldi	r28, 0x85	; 133
    4ece:	d3 e2       	ldi	r29, 0x23	; 35
#endif
	
	setup();
    
	for (;;) {
		loop();
    4ed0:	0e 94 da 22 	call	0x45b4	; 0x45b4 <loop>
		if (serialEventRun) serialEventRun();
    4ed4:	20 97       	sbiw	r28, 0x00	; 0
    4ed6:	e1 f3       	breq	.-8      	; 0x4ed0 <main+0x10>
    4ed8:	0e 94 85 23 	call	0x470a	; 0x470a <_Z14serialEventRunv>
    4edc:	f9 cf       	rjmp	.-14     	; 0x4ed0 <main+0x10>

00004ede <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    4ede:	1f 92       	push	r1
    4ee0:	0f 92       	push	r0
    4ee2:	0f b6       	in	r0, 0x3f	; 63
    4ee4:	0f 92       	push	r0
    4ee6:	11 24       	eor	r1, r1
    4ee8:	2f 93       	push	r18
    4eea:	3f 93       	push	r19
    4eec:	8f 93       	push	r24
    4eee:	9f 93       	push	r25
    4ef0:	af 93       	push	r26
    4ef2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4ef4:	80 91 57 06 	lds	r24, 0x0657
    4ef8:	90 91 58 06 	lds	r25, 0x0658
    4efc:	a0 91 59 06 	lds	r26, 0x0659
    4f00:	b0 91 5a 06 	lds	r27, 0x065A
	unsigned char f = timer0_fract;
    4f04:	30 91 5b 06 	lds	r19, 0x065B

	m += MILLIS_INC;
    4f08:	01 96       	adiw	r24, 0x01	; 1
    4f0a:	a1 1d       	adc	r26, r1
    4f0c:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    4f0e:	23 2f       	mov	r18, r19
    4f10:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    4f12:	2d 37       	cpi	r18, 0x7D	; 125
    4f14:	20 f0       	brcs	.+8      	; 0x4f1e <__vector_16+0x40>
		f -= FRACT_MAX;
    4f16:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    4f18:	01 96       	adiw	r24, 0x01	; 1
    4f1a:	a1 1d       	adc	r26, r1
    4f1c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    4f1e:	20 93 5b 06 	sts	0x065B, r18
	timer0_millis = m;
    4f22:	80 93 57 06 	sts	0x0657, r24
    4f26:	90 93 58 06 	sts	0x0658, r25
    4f2a:	a0 93 59 06 	sts	0x0659, r26
    4f2e:	b0 93 5a 06 	sts	0x065A, r27
	timer0_overflow_count++;
    4f32:	80 91 53 06 	lds	r24, 0x0653
    4f36:	90 91 54 06 	lds	r25, 0x0654
    4f3a:	a0 91 55 06 	lds	r26, 0x0655
    4f3e:	b0 91 56 06 	lds	r27, 0x0656
    4f42:	01 96       	adiw	r24, 0x01	; 1
    4f44:	a1 1d       	adc	r26, r1
    4f46:	b1 1d       	adc	r27, r1
    4f48:	80 93 53 06 	sts	0x0653, r24
    4f4c:	90 93 54 06 	sts	0x0654, r25
    4f50:	a0 93 55 06 	sts	0x0655, r26
    4f54:	b0 93 56 06 	sts	0x0656, r27
}
    4f58:	bf 91       	pop	r27
    4f5a:	af 91       	pop	r26
    4f5c:	9f 91       	pop	r25
    4f5e:	8f 91       	pop	r24
    4f60:	3f 91       	pop	r19
    4f62:	2f 91       	pop	r18
    4f64:	0f 90       	pop	r0
    4f66:	0f be       	out	0x3f, r0	; 63
    4f68:	0f 90       	pop	r0
    4f6a:	1f 90       	pop	r1
    4f6c:	18 95       	reti

00004f6e <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4f6e:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4f70:	f8 94       	cli
	m = timer0_millis;
    4f72:	20 91 57 06 	lds	r18, 0x0657
    4f76:	30 91 58 06 	lds	r19, 0x0658
    4f7a:	40 91 59 06 	lds	r20, 0x0659
    4f7e:	50 91 5a 06 	lds	r21, 0x065A
	SREG = oldSREG;
    4f82:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    4f84:	b9 01       	movw	r22, r18
    4f86:	ca 01       	movw	r24, r20
    4f88:	08 95       	ret

00004f8a <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    4f8a:	9b 01       	movw	r18, r22
    4f8c:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4f8e:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    4f90:	f8 94       	cli
	m = timer0_overflow_count;
    4f92:	80 91 53 06 	lds	r24, 0x0653
    4f96:	90 91 54 06 	lds	r25, 0x0654
    4f9a:	a0 91 55 06 	lds	r26, 0x0655
    4f9e:	b0 91 56 06 	lds	r27, 0x0656
#if defined(TCNT0)
	t = TCNT0;
    4fa2:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4fa4:	a8 9b       	sbis	0x15, 0	; 21
    4fa6:	05 c0       	rjmp	.+10     	; 0x4fb2 <delay+0x28>
    4fa8:	6f 3f       	cpi	r22, 0xFF	; 255
    4faa:	19 f0       	breq	.+6      	; 0x4fb2 <delay+0x28>
		m++;
    4fac:	01 96       	adiw	r24, 0x01	; 1
    4fae:	a1 1d       	adc	r26, r1
    4fb0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4fb2:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    4fb4:	ba 2f       	mov	r27, r26
    4fb6:	a9 2f       	mov	r26, r25
    4fb8:	98 2f       	mov	r25, r24
    4fba:	88 27       	eor	r24, r24
    4fbc:	86 0f       	add	r24, r22
    4fbe:	91 1d       	adc	r25, r1
    4fc0:	a1 1d       	adc	r26, r1
    4fc2:	b1 1d       	adc	r27, r1
    4fc4:	62 e0       	ldi	r22, 0x02	; 2
    4fc6:	88 0f       	add	r24, r24
    4fc8:	99 1f       	adc	r25, r25
    4fca:	aa 1f       	adc	r26, r26
    4fcc:	bb 1f       	adc	r27, r27
    4fce:	6a 95       	dec	r22
    4fd0:	d1 f7       	brne	.-12     	; 0x4fc6 <delay+0x3c>
    4fd2:	bc 01       	movw	r22, r24
    4fd4:	2d c0       	rjmp	.+90     	; 0x5030 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4fd6:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    4fd8:	f8 94       	cli
	m = timer0_overflow_count;
    4fda:	80 91 53 06 	lds	r24, 0x0653
    4fde:	90 91 54 06 	lds	r25, 0x0654
    4fe2:	a0 91 55 06 	lds	r26, 0x0655
    4fe6:	b0 91 56 06 	lds	r27, 0x0656
#if defined(TCNT0)
	t = TCNT0;
    4fea:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4fec:	a8 9b       	sbis	0x15, 0	; 21
    4fee:	05 c0       	rjmp	.+10     	; 0x4ffa <delay+0x70>
    4ff0:	ef 3f       	cpi	r30, 0xFF	; 255
    4ff2:	19 f0       	breq	.+6      	; 0x4ffa <delay+0x70>
		m++;
    4ff4:	01 96       	adiw	r24, 0x01	; 1
    4ff6:	a1 1d       	adc	r26, r1
    4ff8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4ffa:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    4ffc:	ba 2f       	mov	r27, r26
    4ffe:	a9 2f       	mov	r26, r25
    5000:	98 2f       	mov	r25, r24
    5002:	88 27       	eor	r24, r24
    5004:	8e 0f       	add	r24, r30
    5006:	91 1d       	adc	r25, r1
    5008:	a1 1d       	adc	r26, r1
    500a:	b1 1d       	adc	r27, r1
    500c:	e2 e0       	ldi	r30, 0x02	; 2
    500e:	88 0f       	add	r24, r24
    5010:	99 1f       	adc	r25, r25
    5012:	aa 1f       	adc	r26, r26
    5014:	bb 1f       	adc	r27, r27
    5016:	ea 95       	dec	r30
    5018:	d1 f7       	brne	.-12     	; 0x500e <delay+0x84>
    501a:	86 1b       	sub	r24, r22
    501c:	97 0b       	sbc	r25, r23
    501e:	88 5e       	subi	r24, 0xE8	; 232
    5020:	93 40       	sbci	r25, 0x03	; 3
    5022:	c8 f2       	brcs	.-78     	; 0x4fd6 <delay+0x4c>
			ms--;
    5024:	21 50       	subi	r18, 0x01	; 1
    5026:	30 40       	sbci	r19, 0x00	; 0
    5028:	40 40       	sbci	r20, 0x00	; 0
    502a:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    502c:	68 51       	subi	r22, 0x18	; 24
    502e:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    5030:	21 15       	cp	r18, r1
    5032:	31 05       	cpc	r19, r1
    5034:	41 05       	cpc	r20, r1
    5036:	51 05       	cpc	r21, r1
    5038:	71 f6       	brne	.-100    	; 0x4fd6 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    503a:	08 95       	ret

0000503c <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	39 f0       	breq	.+14     	; 0x504e <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    5040:	88 0f       	add	r24, r24
    5042:	99 1f       	adc	r25, r25
    5044:	88 0f       	add	r24, r24
    5046:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    5048:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    504a:	01 97       	sbiw	r24, 0x01	; 1
    504c:	f1 f7       	brne	.-4      	; 0x504a <delayMicroseconds+0xe>
    504e:	08 95       	ret

00005050 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    5050:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    5052:	84 b5       	in	r24, 0x24	; 36
    5054:	82 60       	ori	r24, 0x02	; 2
    5056:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    5058:	84 b5       	in	r24, 0x24	; 36
    505a:	81 60       	ori	r24, 0x01	; 1
    505c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    505e:	85 b5       	in	r24, 0x25	; 37
    5060:	82 60       	ori	r24, 0x02	; 2
    5062:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    5064:	85 b5       	in	r24, 0x25	; 37
    5066:	81 60       	ori	r24, 0x01	; 1
    5068:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    506a:	ee e6       	ldi	r30, 0x6E	; 110
    506c:	f0 e0       	ldi	r31, 0x00	; 0
    506e:	80 81       	ld	r24, Z
    5070:	81 60       	ori	r24, 0x01	; 1
    5072:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    5074:	e1 e8       	ldi	r30, 0x81	; 129
    5076:	f0 e0       	ldi	r31, 0x00	; 0
    5078:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    507a:	80 81       	ld	r24, Z
    507c:	82 60       	ori	r24, 0x02	; 2
    507e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    5080:	80 81       	ld	r24, Z
    5082:	81 60       	ori	r24, 0x01	; 1
    5084:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    5086:	e0 e8       	ldi	r30, 0x80	; 128
    5088:	f0 e0       	ldi	r31, 0x00	; 0
    508a:	80 81       	ld	r24, Z
    508c:	81 60       	ori	r24, 0x01	; 1
    508e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    5090:	e1 eb       	ldi	r30, 0xB1	; 177
    5092:	f0 e0       	ldi	r31, 0x00	; 0
    5094:	80 81       	ld	r24, Z
    5096:	84 60       	ori	r24, 0x04	; 4
    5098:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    509a:	e0 eb       	ldi	r30, 0xB0	; 176
    509c:	f0 e0       	ldi	r31, 0x00	; 0
    509e:	80 81       	ld	r24, Z
    50a0:	81 60       	ori	r24, 0x01	; 1
    50a2:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    50a4:	ea e7       	ldi	r30, 0x7A	; 122
    50a6:	f0 e0       	ldi	r31, 0x00	; 0
    50a8:	80 81       	ld	r24, Z
    50aa:	84 60       	ori	r24, 0x04	; 4
    50ac:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    50ae:	80 81       	ld	r24, Z
    50b0:	82 60       	ori	r24, 0x02	; 2
    50b2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    50b4:	80 81       	ld	r24, Z
    50b6:	81 60       	ori	r24, 0x01	; 1
    50b8:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    50ba:	80 81       	ld	r24, Z
    50bc:	80 68       	ori	r24, 0x80	; 128
    50be:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    50c0:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    50c4:	08 95       	ret

000050c6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    50c6:	cf 93       	push	r28
    50c8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    50ca:	48 2f       	mov	r20, r24
    50cc:	50 e0       	ldi	r21, 0x00	; 0
    50ce:	ca 01       	movw	r24, r20
    50d0:	8b 50       	subi	r24, 0x0B	; 11
    50d2:	9f 4f       	sbci	r25, 0xFF	; 255
    50d4:	fc 01       	movw	r30, r24
    50d6:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    50d8:	4f 51       	subi	r20, 0x1F	; 31
    50da:	5f 4f       	sbci	r21, 0xFF	; 255
    50dc:	fa 01       	movw	r30, r20
    50de:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    50e0:	88 23       	and	r24, r24
    50e2:	69 f1       	breq	.+90     	; 0x513e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	88 0f       	add	r24, r24
    50e8:	99 1f       	adc	r25, r25
    50ea:	fc 01       	movw	r30, r24
    50ec:	ed 53       	subi	r30, 0x3D	; 61
    50ee:	ff 4f       	sbci	r31, 0xFF	; 255
    50f0:	a5 91       	lpm	r26, Z+
    50f2:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    50f4:	fc 01       	movw	r30, r24
    50f6:	e3 53       	subi	r30, 0x33	; 51
    50f8:	ff 4f       	sbci	r31, 0xFF	; 255
    50fa:	c5 91       	lpm	r28, Z+
    50fc:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    50fe:	66 23       	and	r22, r22
    5100:	51 f4       	brne	.+20     	; 0x5116 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    5102:	2f b7       	in	r18, 0x3f	; 63
                cli();
    5104:	f8 94       	cli
		*reg &= ~bit;
    5106:	8c 91       	ld	r24, X
    5108:	93 2f       	mov	r25, r19
    510a:	90 95       	com	r25
    510c:	89 23       	and	r24, r25
    510e:	8c 93       	st	X, r24
		*out &= ~bit;
    5110:	88 81       	ld	r24, Y
    5112:	89 23       	and	r24, r25
    5114:	0b c0       	rjmp	.+22     	; 0x512c <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    5116:	62 30       	cpi	r22, 0x02	; 2
    5118:	61 f4       	brne	.+24     	; 0x5132 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    511a:	2f b7       	in	r18, 0x3f	; 63
                cli();
    511c:	f8 94       	cli
		*reg &= ~bit;
    511e:	8c 91       	ld	r24, X
    5120:	93 2f       	mov	r25, r19
    5122:	90 95       	com	r25
    5124:	89 23       	and	r24, r25
    5126:	8c 93       	st	X, r24
		*out |= bit;
    5128:	88 81       	ld	r24, Y
    512a:	83 2b       	or	r24, r19
    512c:	88 83       	st	Y, r24
		SREG = oldSREG;
    512e:	2f bf       	out	0x3f, r18	; 63
    5130:	06 c0       	rjmp	.+12     	; 0x513e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    5132:	9f b7       	in	r25, 0x3f	; 63
                cli();
    5134:	f8 94       	cli
		*reg |= bit;
    5136:	8c 91       	ld	r24, X
    5138:	83 2b       	or	r24, r19
    513a:	8c 93       	st	X, r24
		SREG = oldSREG;
    513c:	9f bf       	out	0x3f, r25	; 63
	}
}
    513e:	df 91       	pop	r29
    5140:	cf 91       	pop	r28
    5142:	08 95       	ret

00005144 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    5144:	48 2f       	mov	r20, r24
    5146:	50 e0       	ldi	r21, 0x00	; 0
    5148:	ca 01       	movw	r24, r20
    514a:	87 5f       	subi	r24, 0xF7	; 247
    514c:	9e 4f       	sbci	r25, 0xFE	; 254
    514e:	fc 01       	movw	r30, r24
    5150:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    5152:	ca 01       	movw	r24, r20
    5154:	8b 50       	subi	r24, 0x0B	; 11
    5156:	9f 4f       	sbci	r25, 0xFF	; 255
    5158:	fc 01       	movw	r30, r24
    515a:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    515c:	4f 51       	subi	r20, 0x1F	; 31
    515e:	5f 4f       	sbci	r21, 0xFF	; 255
    5160:	fa 01       	movw	r30, r20
    5162:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    5164:	33 23       	and	r19, r19
    5166:	09 f4       	brne	.+2      	; 0x516a <digitalWrite+0x26>
    5168:	40 c0       	rjmp	.+128    	; 0x51ea <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    516a:	22 23       	and	r18, r18
    516c:	51 f1       	breq	.+84     	; 0x51c2 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    516e:	23 30       	cpi	r18, 0x03	; 3
    5170:	71 f0       	breq	.+28     	; 0x518e <digitalWrite+0x4a>
    5172:	24 30       	cpi	r18, 0x04	; 4
    5174:	28 f4       	brcc	.+10     	; 0x5180 <digitalWrite+0x3c>
    5176:	21 30       	cpi	r18, 0x01	; 1
    5178:	a1 f0       	breq	.+40     	; 0x51a2 <digitalWrite+0x5e>
    517a:	22 30       	cpi	r18, 0x02	; 2
    517c:	11 f5       	brne	.+68     	; 0x51c2 <digitalWrite+0x7e>
    517e:	14 c0       	rjmp	.+40     	; 0x51a8 <digitalWrite+0x64>
    5180:	26 30       	cpi	r18, 0x06	; 6
    5182:	b1 f0       	breq	.+44     	; 0x51b0 <digitalWrite+0x6c>
    5184:	27 30       	cpi	r18, 0x07	; 7
    5186:	c1 f0       	breq	.+48     	; 0x51b8 <digitalWrite+0x74>
    5188:	24 30       	cpi	r18, 0x04	; 4
    518a:	d9 f4       	brne	.+54     	; 0x51c2 <digitalWrite+0x7e>
    518c:	04 c0       	rjmp	.+8      	; 0x5196 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    518e:	80 91 80 00 	lds	r24, 0x0080
    5192:	8f 77       	andi	r24, 0x7F	; 127
    5194:	03 c0       	rjmp	.+6      	; 0x519c <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5196:	80 91 80 00 	lds	r24, 0x0080
    519a:	8f 7d       	andi	r24, 0xDF	; 223
    519c:	80 93 80 00 	sts	0x0080, r24
    51a0:	10 c0       	rjmp	.+32     	; 0x51c2 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    51a2:	84 b5       	in	r24, 0x24	; 36
    51a4:	8f 77       	andi	r24, 0x7F	; 127
    51a6:	02 c0       	rjmp	.+4      	; 0x51ac <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    51a8:	84 b5       	in	r24, 0x24	; 36
    51aa:	8f 7d       	andi	r24, 0xDF	; 223
    51ac:	84 bd       	out	0x24, r24	; 36
    51ae:	09 c0       	rjmp	.+18     	; 0x51c2 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    51b0:	80 91 b0 00 	lds	r24, 0x00B0
    51b4:	8f 77       	andi	r24, 0x7F	; 127
    51b6:	03 c0       	rjmp	.+6      	; 0x51be <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    51b8:	80 91 b0 00 	lds	r24, 0x00B0
    51bc:	8f 7d       	andi	r24, 0xDF	; 223
    51be:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    51c2:	e3 2f       	mov	r30, r19
    51c4:	f0 e0       	ldi	r31, 0x00	; 0
    51c6:	ee 0f       	add	r30, r30
    51c8:	ff 1f       	adc	r31, r31
    51ca:	e3 53       	subi	r30, 0x33	; 51
    51cc:	ff 4f       	sbci	r31, 0xFF	; 255
    51ce:	a5 91       	lpm	r26, Z+
    51d0:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    51d2:	2f b7       	in	r18, 0x3f	; 63
	cli();
    51d4:	f8 94       	cli

	if (val == LOW) {
    51d6:	66 23       	and	r22, r22
    51d8:	21 f4       	brne	.+8      	; 0x51e2 <digitalWrite+0x9e>
		*out &= ~bit;
    51da:	8c 91       	ld	r24, X
    51dc:	90 95       	com	r25
    51de:	89 23       	and	r24, r25
    51e0:	02 c0       	rjmp	.+4      	; 0x51e6 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    51e2:	8c 91       	ld	r24, X
    51e4:	89 2b       	or	r24, r25
    51e6:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    51e8:	2f bf       	out	0x3f, r18	; 63
    51ea:	08 95       	ret

000051ec <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    51ec:	68 2f       	mov	r22, r24
    51ee:	70 e0       	ldi	r23, 0x00	; 0
    51f0:	cb 01       	movw	r24, r22
    51f2:	87 5f       	subi	r24, 0xF7	; 247
    51f4:	9e 4f       	sbci	r25, 0xFE	; 254
    51f6:	fc 01       	movw	r30, r24
    51f8:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    51fa:	cb 01       	movw	r24, r22
    51fc:	8b 50       	subi	r24, 0x0B	; 11
    51fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5200:	fc 01       	movw	r30, r24
    5202:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    5204:	6f 51       	subi	r22, 0x1F	; 31
    5206:	7f 4f       	sbci	r23, 0xFF	; 255
    5208:	fb 01       	movw	r30, r22
    520a:	94 91       	lpm	r25, Z+

	if (port == NOT_A_PIN) return LOW;
    520c:	99 23       	and	r25, r25
    520e:	19 f4       	brne	.+6      	; 0x5216 <digitalRead+0x2a>
    5210:	20 e0       	ldi	r18, 0x00	; 0
    5212:	30 e0       	ldi	r19, 0x00	; 0
    5214:	3c c0       	rjmp	.+120    	; 0x528e <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    5216:	22 23       	and	r18, r18
    5218:	51 f1       	breq	.+84     	; 0x526e <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    521a:	23 30       	cpi	r18, 0x03	; 3
    521c:	71 f0       	breq	.+28     	; 0x523a <digitalRead+0x4e>
    521e:	24 30       	cpi	r18, 0x04	; 4
    5220:	28 f4       	brcc	.+10     	; 0x522c <digitalRead+0x40>
    5222:	21 30       	cpi	r18, 0x01	; 1
    5224:	a1 f0       	breq	.+40     	; 0x524e <digitalRead+0x62>
    5226:	22 30       	cpi	r18, 0x02	; 2
    5228:	11 f5       	brne	.+68     	; 0x526e <digitalRead+0x82>
    522a:	14 c0       	rjmp	.+40     	; 0x5254 <digitalRead+0x68>
    522c:	26 30       	cpi	r18, 0x06	; 6
    522e:	b1 f0       	breq	.+44     	; 0x525c <digitalRead+0x70>
    5230:	27 30       	cpi	r18, 0x07	; 7
    5232:	c1 f0       	breq	.+48     	; 0x5264 <digitalRead+0x78>
    5234:	24 30       	cpi	r18, 0x04	; 4
    5236:	d9 f4       	brne	.+54     	; 0x526e <digitalRead+0x82>
    5238:	04 c0       	rjmp	.+8      	; 0x5242 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    523a:	80 91 80 00 	lds	r24, 0x0080
    523e:	8f 77       	andi	r24, 0x7F	; 127
    5240:	03 c0       	rjmp	.+6      	; 0x5248 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    5242:	80 91 80 00 	lds	r24, 0x0080
    5246:	8f 7d       	andi	r24, 0xDF	; 223
    5248:	80 93 80 00 	sts	0x0080, r24
    524c:	10 c0       	rjmp	.+32     	; 0x526e <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    524e:	84 b5       	in	r24, 0x24	; 36
    5250:	8f 77       	andi	r24, 0x7F	; 127
    5252:	02 c0       	rjmp	.+4      	; 0x5258 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    5254:	84 b5       	in	r24, 0x24	; 36
    5256:	8f 7d       	andi	r24, 0xDF	; 223
    5258:	84 bd       	out	0x24, r24	; 36
    525a:	09 c0       	rjmp	.+18     	; 0x526e <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    525c:	80 91 b0 00 	lds	r24, 0x00B0
    5260:	8f 77       	andi	r24, 0x7F	; 127
    5262:	03 c0       	rjmp	.+6      	; 0x526a <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    5264:	80 91 b0 00 	lds	r24, 0x00B0
    5268:	8f 7d       	andi	r24, 0xDF	; 223
    526a:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    526e:	89 2f       	mov	r24, r25
    5270:	90 e0       	ldi	r25, 0x00	; 0
    5272:	88 0f       	add	r24, r24
    5274:	99 1f       	adc	r25, r25
    5276:	89 52       	subi	r24, 0x29	; 41
    5278:	9f 4f       	sbci	r25, 0xFF	; 255
    527a:	fc 01       	movw	r30, r24
    527c:	a5 91       	lpm	r26, Z+
    527e:	b4 91       	lpm	r27, Z+
    5280:	8c 91       	ld	r24, X
    5282:	20 e0       	ldi	r18, 0x00	; 0
    5284:	30 e0       	ldi	r19, 0x00	; 0
    5286:	84 23       	and	r24, r20
    5288:	11 f0       	breq	.+4      	; 0x528e <digitalRead+0xa2>
    528a:	21 e0       	ldi	r18, 0x01	; 1
    528c:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    528e:	c9 01       	movw	r24, r18
    5290:	08 95       	ret

00005292 <__subsf3>:
    5292:	50 58       	subi	r21, 0x80	; 128

00005294 <__addsf3>:
    5294:	bb 27       	eor	r27, r27
    5296:	aa 27       	eor	r26, r26
    5298:	0e d0       	rcall	.+28     	; 0x52b6 <__addsf3x>
    529a:	6e c2       	rjmp	.+1244   	; 0x5778 <__fp_round>
    529c:	2e d2       	rcall	.+1116   	; 0x56fa <__fp_pscA>
    529e:	30 f0       	brcs	.+12     	; 0x52ac <__addsf3+0x18>
    52a0:	33 d2       	rcall	.+1126   	; 0x5708 <__fp_pscB>
    52a2:	20 f0       	brcs	.+8      	; 0x52ac <__addsf3+0x18>
    52a4:	31 f4       	brne	.+12     	; 0x52b2 <__addsf3+0x1e>
    52a6:	9f 3f       	cpi	r25, 0xFF	; 255
    52a8:	11 f4       	brne	.+4      	; 0x52ae <__addsf3+0x1a>
    52aa:	1e f4       	brtc	.+6      	; 0x52b2 <__addsf3+0x1e>
    52ac:	fe c1       	rjmp	.+1020   	; 0x56aa <__fp_nan>
    52ae:	0e f4       	brtc	.+2      	; 0x52b2 <__addsf3+0x1e>
    52b0:	e0 95       	com	r30
    52b2:	e7 fb       	bst	r30, 7
    52b4:	c9 c1       	rjmp	.+914    	; 0x5648 <__fp_inf>

000052b6 <__addsf3x>:
    52b6:	e9 2f       	mov	r30, r25
    52b8:	81 d2       	rcall	.+1282   	; 0x57bc <__fp_split3>
    52ba:	80 f3       	brcs	.-32     	; 0x529c <__addsf3+0x8>
    52bc:	ba 17       	cp	r27, r26
    52be:	62 07       	cpc	r22, r18
    52c0:	73 07       	cpc	r23, r19
    52c2:	84 07       	cpc	r24, r20
    52c4:	95 07       	cpc	r25, r21
    52c6:	18 f0       	brcs	.+6      	; 0x52ce <__addsf3x+0x18>
    52c8:	71 f4       	brne	.+28     	; 0x52e6 <__addsf3x+0x30>
    52ca:	9e f5       	brtc	.+102    	; 0x5332 <__addsf3x+0x7c>
    52cc:	b0 c2       	rjmp	.+1376   	; 0x582e <__fp_zero>
    52ce:	0e f4       	brtc	.+2      	; 0x52d2 <__addsf3x+0x1c>
    52d0:	e0 95       	com	r30
    52d2:	0b 2e       	mov	r0, r27
    52d4:	ba 2f       	mov	r27, r26
    52d6:	a0 2d       	mov	r26, r0
    52d8:	0b 01       	movw	r0, r22
    52da:	b9 01       	movw	r22, r18
    52dc:	90 01       	movw	r18, r0
    52de:	0c 01       	movw	r0, r24
    52e0:	ca 01       	movw	r24, r20
    52e2:	a0 01       	movw	r20, r0
    52e4:	11 24       	eor	r1, r1
    52e6:	ff 27       	eor	r31, r31
    52e8:	59 1b       	sub	r21, r25
    52ea:	99 f0       	breq	.+38     	; 0x5312 <__addsf3x+0x5c>
    52ec:	59 3f       	cpi	r21, 0xF9	; 249
    52ee:	50 f4       	brcc	.+20     	; 0x5304 <__addsf3x+0x4e>
    52f0:	50 3e       	cpi	r21, 0xE0	; 224
    52f2:	68 f1       	brcs	.+90     	; 0x534e <__addsf3x+0x98>
    52f4:	1a 16       	cp	r1, r26
    52f6:	f0 40       	sbci	r31, 0x00	; 0
    52f8:	a2 2f       	mov	r26, r18
    52fa:	23 2f       	mov	r18, r19
    52fc:	34 2f       	mov	r19, r20
    52fe:	44 27       	eor	r20, r20
    5300:	58 5f       	subi	r21, 0xF8	; 248
    5302:	f3 cf       	rjmp	.-26     	; 0x52ea <__addsf3x+0x34>
    5304:	46 95       	lsr	r20
    5306:	37 95       	ror	r19
    5308:	27 95       	ror	r18
    530a:	a7 95       	ror	r26
    530c:	f0 40       	sbci	r31, 0x00	; 0
    530e:	53 95       	inc	r21
    5310:	c9 f7       	brne	.-14     	; 0x5304 <__addsf3x+0x4e>
    5312:	7e f4       	brtc	.+30     	; 0x5332 <__addsf3x+0x7c>
    5314:	1f 16       	cp	r1, r31
    5316:	ba 0b       	sbc	r27, r26
    5318:	62 0b       	sbc	r22, r18
    531a:	73 0b       	sbc	r23, r19
    531c:	84 0b       	sbc	r24, r20
    531e:	ba f0       	brmi	.+46     	; 0x534e <__addsf3x+0x98>
    5320:	91 50       	subi	r25, 0x01	; 1
    5322:	a1 f0       	breq	.+40     	; 0x534c <__addsf3x+0x96>
    5324:	ff 0f       	add	r31, r31
    5326:	bb 1f       	adc	r27, r27
    5328:	66 1f       	adc	r22, r22
    532a:	77 1f       	adc	r23, r23
    532c:	88 1f       	adc	r24, r24
    532e:	c2 f7       	brpl	.-16     	; 0x5320 <__addsf3x+0x6a>
    5330:	0e c0       	rjmp	.+28     	; 0x534e <__addsf3x+0x98>
    5332:	ba 0f       	add	r27, r26
    5334:	62 1f       	adc	r22, r18
    5336:	73 1f       	adc	r23, r19
    5338:	84 1f       	adc	r24, r20
    533a:	48 f4       	brcc	.+18     	; 0x534e <__addsf3x+0x98>
    533c:	87 95       	ror	r24
    533e:	77 95       	ror	r23
    5340:	67 95       	ror	r22
    5342:	b7 95       	ror	r27
    5344:	f7 95       	ror	r31
    5346:	9e 3f       	cpi	r25, 0xFE	; 254
    5348:	08 f0       	brcs	.+2      	; 0x534c <__addsf3x+0x96>
    534a:	b3 cf       	rjmp	.-154    	; 0x52b2 <__addsf3+0x1e>
    534c:	93 95       	inc	r25
    534e:	88 0f       	add	r24, r24
    5350:	08 f0       	brcs	.+2      	; 0x5354 <__addsf3x+0x9e>
    5352:	99 27       	eor	r25, r25
    5354:	ee 0f       	add	r30, r30
    5356:	97 95       	ror	r25
    5358:	87 95       	ror	r24
    535a:	08 95       	ret
    535c:	ce d1       	rcall	.+924    	; 0x56fa <__fp_pscA>
    535e:	58 f0       	brcs	.+22     	; 0x5376 <__addsf3x+0xc0>
    5360:	80 e8       	ldi	r24, 0x80	; 128
    5362:	91 e0       	ldi	r25, 0x01	; 1
    5364:	09 f4       	brne	.+2      	; 0x5368 <__addsf3x+0xb2>
    5366:	9e ef       	ldi	r25, 0xFE	; 254
    5368:	cf d1       	rcall	.+926    	; 0x5708 <__fp_pscB>
    536a:	28 f0       	brcs	.+10     	; 0x5376 <__addsf3x+0xc0>
    536c:	40 e8       	ldi	r20, 0x80	; 128
    536e:	51 e0       	ldi	r21, 0x01	; 1
    5370:	59 f4       	brne	.+22     	; 0x5388 <atan2+0xe>
    5372:	5e ef       	ldi	r21, 0xFE	; 254
    5374:	09 c0       	rjmp	.+18     	; 0x5388 <atan2+0xe>
    5376:	99 c1       	rjmp	.+818    	; 0x56aa <__fp_nan>
    5378:	5a c2       	rjmp	.+1204   	; 0x582e <__fp_zero>

0000537a <atan2>:
    537a:	e9 2f       	mov	r30, r25
    537c:	e0 78       	andi	r30, 0x80	; 128
    537e:	1e d2       	rcall	.+1084   	; 0x57bc <__fp_split3>
    5380:	68 f3       	brcs	.-38     	; 0x535c <__addsf3x+0xa6>
    5382:	09 2e       	mov	r0, r25
    5384:	05 2a       	or	r0, r21
    5386:	c1 f3       	breq	.-16     	; 0x5378 <__addsf3x+0xc2>
    5388:	26 17       	cp	r18, r22
    538a:	37 07       	cpc	r19, r23
    538c:	48 07       	cpc	r20, r24
    538e:	59 07       	cpc	r21, r25
    5390:	38 f0       	brcs	.+14     	; 0x53a0 <atan2+0x26>
    5392:	0e 2e       	mov	r0, r30
    5394:	07 f8       	bld	r0, 7
    5396:	e0 25       	eor	r30, r0
    5398:	69 f0       	breq	.+26     	; 0x53b4 <atan2+0x3a>
    539a:	e0 25       	eor	r30, r0
    539c:	e0 64       	ori	r30, 0x40	; 64
    539e:	0a c0       	rjmp	.+20     	; 0x53b4 <atan2+0x3a>
    53a0:	ef 63       	ori	r30, 0x3F	; 63
    53a2:	07 f8       	bld	r0, 7
    53a4:	00 94       	com	r0
    53a6:	07 fa       	bst	r0, 7
    53a8:	db 01       	movw	r26, r22
    53aa:	b9 01       	movw	r22, r18
    53ac:	9d 01       	movw	r18, r26
    53ae:	dc 01       	movw	r26, r24
    53b0:	ca 01       	movw	r24, r20
    53b2:	ad 01       	movw	r20, r26
    53b4:	ef 93       	push	r30
    53b6:	5d d0       	rcall	.+186    	; 0x5472 <__divsf3_pse>
    53b8:	df d1       	rcall	.+958    	; 0x5778 <__fp_round>
    53ba:	0a d0       	rcall	.+20     	; 0x53d0 <atan>
    53bc:	5f 91       	pop	r21
    53be:	55 23       	and	r21, r21
    53c0:	31 f0       	breq	.+12     	; 0x53ce <atan2+0x54>
    53c2:	2b ed       	ldi	r18, 0xDB	; 219
    53c4:	3f e0       	ldi	r19, 0x0F	; 15
    53c6:	49 e4       	ldi	r20, 0x49	; 73
    53c8:	50 fd       	sbrc	r21, 0
    53ca:	49 ec       	ldi	r20, 0xC9	; 201
    53cc:	63 cf       	rjmp	.-314    	; 0x5294 <__addsf3>
    53ce:	08 95       	ret

000053d0 <atan>:
    53d0:	df 93       	push	r29
    53d2:	dd 27       	eor	r29, r29
    53d4:	b9 2f       	mov	r27, r25
    53d6:	bf 77       	andi	r27, 0x7F	; 127
    53d8:	40 e8       	ldi	r20, 0x80	; 128
    53da:	5f e3       	ldi	r21, 0x3F	; 63
    53dc:	16 16       	cp	r1, r22
    53de:	17 06       	cpc	r1, r23
    53e0:	48 07       	cpc	r20, r24
    53e2:	5b 07       	cpc	r21, r27
    53e4:	10 f4       	brcc	.+4      	; 0x53ea <atan+0x1a>
    53e6:	d9 2f       	mov	r29, r25
    53e8:	2d d2       	rcall	.+1114   	; 0x5844 <inverse>
    53ea:	9f 93       	push	r25
    53ec:	8f 93       	push	r24
    53ee:	7f 93       	push	r23
    53f0:	6f 93       	push	r22
    53f2:	e6 d2       	rcall	.+1484   	; 0x59c0 <square>
    53f4:	e8 e6       	ldi	r30, 0x68	; 104
    53f6:	f0 e0       	ldi	r31, 0x00	; 0
    53f8:	5b d1       	rcall	.+694    	; 0x56b0 <__fp_powser>
    53fa:	be d1       	rcall	.+892    	; 0x5778 <__fp_round>
    53fc:	2f 91       	pop	r18
    53fe:	3f 91       	pop	r19
    5400:	4f 91       	pop	r20
    5402:	5f 91       	pop	r21
    5404:	32 d2       	rcall	.+1124   	; 0x586a <__mulsf3x>
    5406:	dd 23       	and	r29, r29
    5408:	49 f0       	breq	.+18     	; 0x541c <atan+0x4c>
    540a:	90 58       	subi	r25, 0x80	; 128
    540c:	a2 ea       	ldi	r26, 0xA2	; 162
    540e:	2a ed       	ldi	r18, 0xDA	; 218
    5410:	3f e0       	ldi	r19, 0x0F	; 15
    5412:	49 ec       	ldi	r20, 0xC9	; 201
    5414:	5f e3       	ldi	r21, 0x3F	; 63
    5416:	d0 78       	andi	r29, 0x80	; 128
    5418:	5d 27       	eor	r21, r29
    541a:	4d df       	rcall	.-358    	; 0x52b6 <__addsf3x>
    541c:	df 91       	pop	r29
    541e:	ac c1       	rjmp	.+856    	; 0x5778 <__fp_round>

00005420 <ceil>:
    5420:	ef d1       	rcall	.+990    	; 0x5800 <__fp_trunc>
    5422:	80 f0       	brcs	.+32     	; 0x5444 <ceil+0x24>
    5424:	9f 37       	cpi	r25, 0x7F	; 127
    5426:	40 f4       	brcc	.+16     	; 0x5438 <ceil+0x18>
    5428:	91 11       	cpse	r25, r1
    542a:	0e f4       	brtc	.+2      	; 0x542e <ceil+0xe>
    542c:	01 c2       	rjmp	.+1026   	; 0x5830 <__fp_szero>
    542e:	60 e0       	ldi	r22, 0x00	; 0
    5430:	70 e0       	ldi	r23, 0x00	; 0
    5432:	80 e8       	ldi	r24, 0x80	; 128
    5434:	9f e3       	ldi	r25, 0x3F	; 63
    5436:	08 95       	ret
    5438:	26 f0       	brts	.+8      	; 0x5442 <ceil+0x22>
    543a:	1b 16       	cp	r1, r27
    543c:	61 1d       	adc	r22, r1
    543e:	71 1d       	adc	r23, r1
    5440:	81 1d       	adc	r24, r1
    5442:	08 c1       	rjmp	.+528    	; 0x5654 <__fp_mintl>
    5444:	22 c1       	rjmp	.+580    	; 0x568a <__fp_mpack>

00005446 <__cmpsf2>:
    5446:	dc d0       	rcall	.+440    	; 0x5600 <__fp_cmp>
    5448:	08 f4       	brcc	.+2      	; 0x544c <__cmpsf2+0x6>
    544a:	81 e0       	ldi	r24, 0x01	; 1
    544c:	08 95       	ret

0000544e <cos>:
    544e:	64 d1       	rcall	.+712    	; 0x5718 <__fp_rempio2>
    5450:	e3 95       	inc	r30
    5452:	a3 c1       	rjmp	.+838    	; 0x579a <__fp_sinus>

00005454 <__divsf3>:
    5454:	0c d0       	rcall	.+24     	; 0x546e <__divsf3x>
    5456:	90 c1       	rjmp	.+800    	; 0x5778 <__fp_round>
    5458:	57 d1       	rcall	.+686    	; 0x5708 <__fp_pscB>
    545a:	40 f0       	brcs	.+16     	; 0x546c <__divsf3+0x18>
    545c:	4e d1       	rcall	.+668    	; 0x56fa <__fp_pscA>
    545e:	30 f0       	brcs	.+12     	; 0x546c <__divsf3+0x18>
    5460:	21 f4       	brne	.+8      	; 0x546a <__divsf3+0x16>
    5462:	5f 3f       	cpi	r21, 0xFF	; 255
    5464:	19 f0       	breq	.+6      	; 0x546c <__divsf3+0x18>
    5466:	f0 c0       	rjmp	.+480    	; 0x5648 <__fp_inf>
    5468:	51 11       	cpse	r21, r1
    546a:	e2 c1       	rjmp	.+964    	; 0x5830 <__fp_szero>
    546c:	1e c1       	rjmp	.+572    	; 0x56aa <__fp_nan>

0000546e <__divsf3x>:
    546e:	a6 d1       	rcall	.+844    	; 0x57bc <__fp_split3>
    5470:	98 f3       	brcs	.-26     	; 0x5458 <__divsf3+0x4>

00005472 <__divsf3_pse>:
    5472:	99 23       	and	r25, r25
    5474:	c9 f3       	breq	.-14     	; 0x5468 <__divsf3+0x14>
    5476:	55 23       	and	r21, r21
    5478:	b1 f3       	breq	.-20     	; 0x5466 <__divsf3+0x12>
    547a:	95 1b       	sub	r25, r21
    547c:	55 0b       	sbc	r21, r21
    547e:	bb 27       	eor	r27, r27
    5480:	aa 27       	eor	r26, r26
    5482:	62 17       	cp	r22, r18
    5484:	73 07       	cpc	r23, r19
    5486:	84 07       	cpc	r24, r20
    5488:	38 f0       	brcs	.+14     	; 0x5498 <__divsf3_pse+0x26>
    548a:	9f 5f       	subi	r25, 0xFF	; 255
    548c:	5f 4f       	sbci	r21, 0xFF	; 255
    548e:	22 0f       	add	r18, r18
    5490:	33 1f       	adc	r19, r19
    5492:	44 1f       	adc	r20, r20
    5494:	aa 1f       	adc	r26, r26
    5496:	a9 f3       	breq	.-22     	; 0x5482 <__divsf3_pse+0x10>
    5498:	33 d0       	rcall	.+102    	; 0x5500 <__divsf3_pse+0x8e>
    549a:	0e 2e       	mov	r0, r30
    549c:	3a f0       	brmi	.+14     	; 0x54ac <__divsf3_pse+0x3a>
    549e:	e0 e8       	ldi	r30, 0x80	; 128
    54a0:	30 d0       	rcall	.+96     	; 0x5502 <__divsf3_pse+0x90>
    54a2:	91 50       	subi	r25, 0x01	; 1
    54a4:	50 40       	sbci	r21, 0x00	; 0
    54a6:	e6 95       	lsr	r30
    54a8:	00 1c       	adc	r0, r0
    54aa:	ca f7       	brpl	.-14     	; 0x549e <__divsf3_pse+0x2c>
    54ac:	29 d0       	rcall	.+82     	; 0x5500 <__divsf3_pse+0x8e>
    54ae:	fe 2f       	mov	r31, r30
    54b0:	27 d0       	rcall	.+78     	; 0x5500 <__divsf3_pse+0x8e>
    54b2:	66 0f       	add	r22, r22
    54b4:	77 1f       	adc	r23, r23
    54b6:	88 1f       	adc	r24, r24
    54b8:	bb 1f       	adc	r27, r27
    54ba:	26 17       	cp	r18, r22
    54bc:	37 07       	cpc	r19, r23
    54be:	48 07       	cpc	r20, r24
    54c0:	ab 07       	cpc	r26, r27
    54c2:	b0 e8       	ldi	r27, 0x80	; 128
    54c4:	09 f0       	breq	.+2      	; 0x54c8 <__divsf3_pse+0x56>
    54c6:	bb 0b       	sbc	r27, r27
    54c8:	80 2d       	mov	r24, r0
    54ca:	bf 01       	movw	r22, r30
    54cc:	ff 27       	eor	r31, r31
    54ce:	93 58       	subi	r25, 0x83	; 131
    54d0:	5f 4f       	sbci	r21, 0xFF	; 255
    54d2:	2a f0       	brmi	.+10     	; 0x54de <__divsf3_pse+0x6c>
    54d4:	9e 3f       	cpi	r25, 0xFE	; 254
    54d6:	51 05       	cpc	r21, r1
    54d8:	68 f0       	brcs	.+26     	; 0x54f4 <__divsf3_pse+0x82>
    54da:	b6 c0       	rjmp	.+364    	; 0x5648 <__fp_inf>
    54dc:	a9 c1       	rjmp	.+850    	; 0x5830 <__fp_szero>
    54de:	5f 3f       	cpi	r21, 0xFF	; 255
    54e0:	ec f3       	brlt	.-6      	; 0x54dc <__divsf3_pse+0x6a>
    54e2:	98 3e       	cpi	r25, 0xE8	; 232
    54e4:	dc f3       	brlt	.-10     	; 0x54dc <__divsf3_pse+0x6a>
    54e6:	86 95       	lsr	r24
    54e8:	77 95       	ror	r23
    54ea:	67 95       	ror	r22
    54ec:	b7 95       	ror	r27
    54ee:	f7 95       	ror	r31
    54f0:	9f 5f       	subi	r25, 0xFF	; 255
    54f2:	c9 f7       	brne	.-14     	; 0x54e6 <__divsf3_pse+0x74>
    54f4:	88 0f       	add	r24, r24
    54f6:	91 1d       	adc	r25, r1
    54f8:	96 95       	lsr	r25
    54fa:	87 95       	ror	r24
    54fc:	97 f9       	bld	r25, 7
    54fe:	08 95       	ret
    5500:	e1 e0       	ldi	r30, 0x01	; 1
    5502:	66 0f       	add	r22, r22
    5504:	77 1f       	adc	r23, r23
    5506:	88 1f       	adc	r24, r24
    5508:	bb 1f       	adc	r27, r27
    550a:	62 17       	cp	r22, r18
    550c:	73 07       	cpc	r23, r19
    550e:	84 07       	cpc	r24, r20
    5510:	ba 07       	cpc	r27, r26
    5512:	20 f0       	brcs	.+8      	; 0x551c <__divsf3_pse+0xaa>
    5514:	62 1b       	sub	r22, r18
    5516:	73 0b       	sbc	r23, r19
    5518:	84 0b       	sbc	r24, r20
    551a:	ba 0b       	sbc	r27, r26
    551c:	ee 1f       	adc	r30, r30
    551e:	88 f7       	brcc	.-30     	; 0x5502 <__divsf3_pse+0x90>
    5520:	e0 95       	com	r30
    5522:	08 95       	ret

00005524 <__fixsfsi>:
    5524:	04 d0       	rcall	.+8      	; 0x552e <__fixunssfsi>
    5526:	68 94       	set
    5528:	b1 11       	cpse	r27, r1
    552a:	82 c1       	rjmp	.+772    	; 0x5830 <__fp_szero>
    552c:	08 95       	ret

0000552e <__fixunssfsi>:
    552e:	4e d1       	rcall	.+668    	; 0x57cc <__fp_splitA>
    5530:	88 f0       	brcs	.+34     	; 0x5554 <__fixunssfsi+0x26>
    5532:	9f 57       	subi	r25, 0x7F	; 127
    5534:	90 f0       	brcs	.+36     	; 0x555a <__fixunssfsi+0x2c>
    5536:	b9 2f       	mov	r27, r25
    5538:	99 27       	eor	r25, r25
    553a:	b7 51       	subi	r27, 0x17	; 23
    553c:	a0 f0       	brcs	.+40     	; 0x5566 <__fixunssfsi+0x38>
    553e:	d1 f0       	breq	.+52     	; 0x5574 <__fixunssfsi+0x46>
    5540:	66 0f       	add	r22, r22
    5542:	77 1f       	adc	r23, r23
    5544:	88 1f       	adc	r24, r24
    5546:	99 1f       	adc	r25, r25
    5548:	1a f0       	brmi	.+6      	; 0x5550 <__fixunssfsi+0x22>
    554a:	ba 95       	dec	r27
    554c:	c9 f7       	brne	.-14     	; 0x5540 <__fixunssfsi+0x12>
    554e:	12 c0       	rjmp	.+36     	; 0x5574 <__fixunssfsi+0x46>
    5550:	b1 30       	cpi	r27, 0x01	; 1
    5552:	81 f0       	breq	.+32     	; 0x5574 <__fixunssfsi+0x46>
    5554:	6c d1       	rcall	.+728    	; 0x582e <__fp_zero>
    5556:	b1 e0       	ldi	r27, 0x01	; 1
    5558:	08 95       	ret
    555a:	69 c1       	rjmp	.+722    	; 0x582e <__fp_zero>
    555c:	67 2f       	mov	r22, r23
    555e:	78 2f       	mov	r23, r24
    5560:	88 27       	eor	r24, r24
    5562:	b8 5f       	subi	r27, 0xF8	; 248
    5564:	39 f0       	breq	.+14     	; 0x5574 <__fixunssfsi+0x46>
    5566:	b9 3f       	cpi	r27, 0xF9	; 249
    5568:	cc f3       	brlt	.-14     	; 0x555c <__fixunssfsi+0x2e>
    556a:	86 95       	lsr	r24
    556c:	77 95       	ror	r23
    556e:	67 95       	ror	r22
    5570:	b3 95       	inc	r27
    5572:	d9 f7       	brne	.-10     	; 0x556a <__fixunssfsi+0x3c>
    5574:	3e f4       	brtc	.+14     	; 0x5584 <__fixunssfsi+0x56>
    5576:	90 95       	com	r25
    5578:	80 95       	com	r24
    557a:	70 95       	com	r23
    557c:	61 95       	neg	r22
    557e:	7f 4f       	sbci	r23, 0xFF	; 255
    5580:	8f 4f       	sbci	r24, 0xFF	; 255
    5582:	9f 4f       	sbci	r25, 0xFF	; 255
    5584:	08 95       	ret

00005586 <__floatunsisf>:
    5586:	e8 94       	clt
    5588:	09 c0       	rjmp	.+18     	; 0x559c <__floatsisf+0x12>

0000558a <__floatsisf>:
    558a:	97 fb       	bst	r25, 7
    558c:	3e f4       	brtc	.+14     	; 0x559c <__floatsisf+0x12>
    558e:	90 95       	com	r25
    5590:	80 95       	com	r24
    5592:	70 95       	com	r23
    5594:	61 95       	neg	r22
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	8f 4f       	sbci	r24, 0xFF	; 255
    559a:	9f 4f       	sbci	r25, 0xFF	; 255
    559c:	99 23       	and	r25, r25
    559e:	a9 f0       	breq	.+42     	; 0x55ca <__floatsisf+0x40>
    55a0:	f9 2f       	mov	r31, r25
    55a2:	96 e9       	ldi	r25, 0x96	; 150
    55a4:	bb 27       	eor	r27, r27
    55a6:	93 95       	inc	r25
    55a8:	f6 95       	lsr	r31
    55aa:	87 95       	ror	r24
    55ac:	77 95       	ror	r23
    55ae:	67 95       	ror	r22
    55b0:	b7 95       	ror	r27
    55b2:	f1 11       	cpse	r31, r1
    55b4:	f8 cf       	rjmp	.-16     	; 0x55a6 <__floatsisf+0x1c>
    55b6:	fa f4       	brpl	.+62     	; 0x55f6 <__floatsisf+0x6c>
    55b8:	bb 0f       	add	r27, r27
    55ba:	11 f4       	brne	.+4      	; 0x55c0 <__floatsisf+0x36>
    55bc:	60 ff       	sbrs	r22, 0
    55be:	1b c0       	rjmp	.+54     	; 0x55f6 <__floatsisf+0x6c>
    55c0:	6f 5f       	subi	r22, 0xFF	; 255
    55c2:	7f 4f       	sbci	r23, 0xFF	; 255
    55c4:	8f 4f       	sbci	r24, 0xFF	; 255
    55c6:	9f 4f       	sbci	r25, 0xFF	; 255
    55c8:	16 c0       	rjmp	.+44     	; 0x55f6 <__floatsisf+0x6c>
    55ca:	88 23       	and	r24, r24
    55cc:	11 f0       	breq	.+4      	; 0x55d2 <__floatsisf+0x48>
    55ce:	96 e9       	ldi	r25, 0x96	; 150
    55d0:	11 c0       	rjmp	.+34     	; 0x55f4 <__floatsisf+0x6a>
    55d2:	77 23       	and	r23, r23
    55d4:	21 f0       	breq	.+8      	; 0x55de <__floatsisf+0x54>
    55d6:	9e e8       	ldi	r25, 0x8E	; 142
    55d8:	87 2f       	mov	r24, r23
    55da:	76 2f       	mov	r23, r22
    55dc:	05 c0       	rjmp	.+10     	; 0x55e8 <__floatsisf+0x5e>
    55de:	66 23       	and	r22, r22
    55e0:	71 f0       	breq	.+28     	; 0x55fe <__floatsisf+0x74>
    55e2:	96 e8       	ldi	r25, 0x86	; 134
    55e4:	86 2f       	mov	r24, r22
    55e6:	70 e0       	ldi	r23, 0x00	; 0
    55e8:	60 e0       	ldi	r22, 0x00	; 0
    55ea:	2a f0       	brmi	.+10     	; 0x55f6 <__floatsisf+0x6c>
    55ec:	9a 95       	dec	r25
    55ee:	66 0f       	add	r22, r22
    55f0:	77 1f       	adc	r23, r23
    55f2:	88 1f       	adc	r24, r24
    55f4:	da f7       	brpl	.-10     	; 0x55ec <__floatsisf+0x62>
    55f6:	88 0f       	add	r24, r24
    55f8:	96 95       	lsr	r25
    55fa:	87 95       	ror	r24
    55fc:	97 f9       	bld	r25, 7
    55fe:	08 95       	ret

00005600 <__fp_cmp>:
    5600:	99 0f       	add	r25, r25
    5602:	00 08       	sbc	r0, r0
    5604:	55 0f       	add	r21, r21
    5606:	aa 0b       	sbc	r26, r26
    5608:	e0 e8       	ldi	r30, 0x80	; 128
    560a:	fe ef       	ldi	r31, 0xFE	; 254
    560c:	16 16       	cp	r1, r22
    560e:	17 06       	cpc	r1, r23
    5610:	e8 07       	cpc	r30, r24
    5612:	f9 07       	cpc	r31, r25
    5614:	c0 f0       	brcs	.+48     	; 0x5646 <__fp_cmp+0x46>
    5616:	12 16       	cp	r1, r18
    5618:	13 06       	cpc	r1, r19
    561a:	e4 07       	cpc	r30, r20
    561c:	f5 07       	cpc	r31, r21
    561e:	98 f0       	brcs	.+38     	; 0x5646 <__fp_cmp+0x46>
    5620:	62 1b       	sub	r22, r18
    5622:	73 0b       	sbc	r23, r19
    5624:	84 0b       	sbc	r24, r20
    5626:	95 0b       	sbc	r25, r21
    5628:	39 f4       	brne	.+14     	; 0x5638 <__fp_cmp+0x38>
    562a:	0a 26       	eor	r0, r26
    562c:	61 f0       	breq	.+24     	; 0x5646 <__fp_cmp+0x46>
    562e:	23 2b       	or	r18, r19
    5630:	24 2b       	or	r18, r20
    5632:	25 2b       	or	r18, r21
    5634:	21 f4       	brne	.+8      	; 0x563e <__fp_cmp+0x3e>
    5636:	08 95       	ret
    5638:	0a 26       	eor	r0, r26
    563a:	09 f4       	brne	.+2      	; 0x563e <__fp_cmp+0x3e>
    563c:	a1 40       	sbci	r26, 0x01	; 1
    563e:	a6 95       	lsr	r26
    5640:	8f ef       	ldi	r24, 0xFF	; 255
    5642:	81 1d       	adc	r24, r1
    5644:	81 1d       	adc	r24, r1
    5646:	08 95       	ret

00005648 <__fp_inf>:
    5648:	97 f9       	bld	r25, 7
    564a:	9f 67       	ori	r25, 0x7F	; 127
    564c:	80 e8       	ldi	r24, 0x80	; 128
    564e:	70 e0       	ldi	r23, 0x00	; 0
    5650:	60 e0       	ldi	r22, 0x00	; 0
    5652:	08 95       	ret

00005654 <__fp_mintl>:
    5654:	88 23       	and	r24, r24
    5656:	71 f4       	brne	.+28     	; 0x5674 <__fp_mintl+0x20>
    5658:	77 23       	and	r23, r23
    565a:	21 f0       	breq	.+8      	; 0x5664 <__fp_mintl+0x10>
    565c:	98 50       	subi	r25, 0x08	; 8
    565e:	87 2b       	or	r24, r23
    5660:	76 2f       	mov	r23, r22
    5662:	07 c0       	rjmp	.+14     	; 0x5672 <__fp_mintl+0x1e>
    5664:	66 23       	and	r22, r22
    5666:	11 f4       	brne	.+4      	; 0x566c <__fp_mintl+0x18>
    5668:	99 27       	eor	r25, r25
    566a:	0d c0       	rjmp	.+26     	; 0x5686 <__fp_mintl+0x32>
    566c:	90 51       	subi	r25, 0x10	; 16
    566e:	86 2b       	or	r24, r22
    5670:	70 e0       	ldi	r23, 0x00	; 0
    5672:	60 e0       	ldi	r22, 0x00	; 0
    5674:	2a f0       	brmi	.+10     	; 0x5680 <__fp_mintl+0x2c>
    5676:	9a 95       	dec	r25
    5678:	66 0f       	add	r22, r22
    567a:	77 1f       	adc	r23, r23
    567c:	88 1f       	adc	r24, r24
    567e:	da f7       	brpl	.-10     	; 0x5676 <__fp_mintl+0x22>
    5680:	88 0f       	add	r24, r24
    5682:	96 95       	lsr	r25
    5684:	87 95       	ror	r24
    5686:	97 f9       	bld	r25, 7
    5688:	08 95       	ret

0000568a <__fp_mpack>:
    568a:	9f 3f       	cpi	r25, 0xFF	; 255
    568c:	49 f0       	breq	.+18     	; 0x56a0 <__fp_mpack+0x16>
    568e:	91 50       	subi	r25, 0x01	; 1
    5690:	28 f4       	brcc	.+10     	; 0x569c <__fp_mpack+0x12>
    5692:	86 95       	lsr	r24
    5694:	77 95       	ror	r23
    5696:	67 95       	ror	r22
    5698:	b7 95       	ror	r27
    569a:	9f 5f       	subi	r25, 0xFF	; 255
    569c:	80 38       	cpi	r24, 0x80	; 128
    569e:	9f 4f       	sbci	r25, 0xFF	; 255
    56a0:	88 0f       	add	r24, r24
    56a2:	96 95       	lsr	r25
    56a4:	87 95       	ror	r24
    56a6:	97 f9       	bld	r25, 7
    56a8:	08 95       	ret

000056aa <__fp_nan>:
    56aa:	9f ef       	ldi	r25, 0xFF	; 255
    56ac:	80 ec       	ldi	r24, 0xC0	; 192
    56ae:	08 95       	ret

000056b0 <__fp_powser>:
    56b0:	df 93       	push	r29
    56b2:	cf 93       	push	r28
    56b4:	1f 93       	push	r17
    56b6:	0f 93       	push	r16
    56b8:	ff 92       	push	r15
    56ba:	ef 92       	push	r14
    56bc:	df 92       	push	r13
    56be:	7b 01       	movw	r14, r22
    56c0:	8c 01       	movw	r16, r24
    56c2:	68 94       	set
    56c4:	05 c0       	rjmp	.+10     	; 0x56d0 <__fp_powser+0x20>
    56c6:	da 2e       	mov	r13, r26
    56c8:	ef 01       	movw	r28, r30
    56ca:	cf d0       	rcall	.+414    	; 0x586a <__mulsf3x>
    56cc:	fe 01       	movw	r30, r28
    56ce:	e8 94       	clt
    56d0:	a5 91       	lpm	r26, Z+
    56d2:	25 91       	lpm	r18, Z+
    56d4:	35 91       	lpm	r19, Z+
    56d6:	45 91       	lpm	r20, Z+
    56d8:	55 91       	lpm	r21, Z+
    56da:	ae f3       	brts	.-22     	; 0x56c6 <__fp_powser+0x16>
    56dc:	ef 01       	movw	r28, r30
    56de:	eb dd       	rcall	.-1066   	; 0x52b6 <__addsf3x>
    56e0:	fe 01       	movw	r30, r28
    56e2:	97 01       	movw	r18, r14
    56e4:	a8 01       	movw	r20, r16
    56e6:	da 94       	dec	r13
    56e8:	79 f7       	brne	.-34     	; 0x56c8 <__fp_powser+0x18>
    56ea:	df 90       	pop	r13
    56ec:	ef 90       	pop	r14
    56ee:	ff 90       	pop	r15
    56f0:	0f 91       	pop	r16
    56f2:	1f 91       	pop	r17
    56f4:	cf 91       	pop	r28
    56f6:	df 91       	pop	r29
    56f8:	08 95       	ret

000056fa <__fp_pscA>:
    56fa:	00 24       	eor	r0, r0
    56fc:	0a 94       	dec	r0
    56fe:	16 16       	cp	r1, r22
    5700:	17 06       	cpc	r1, r23
    5702:	18 06       	cpc	r1, r24
    5704:	09 06       	cpc	r0, r25
    5706:	08 95       	ret

00005708 <__fp_pscB>:
    5708:	00 24       	eor	r0, r0
    570a:	0a 94       	dec	r0
    570c:	12 16       	cp	r1, r18
    570e:	13 06       	cpc	r1, r19
    5710:	14 06       	cpc	r1, r20
    5712:	05 06       	cpc	r0, r21
    5714:	08 95       	ret
    5716:	c9 cf       	rjmp	.-110    	; 0x56aa <__fp_nan>

00005718 <__fp_rempio2>:
    5718:	59 d0       	rcall	.+178    	; 0x57cc <__fp_splitA>
    571a:	e8 f3       	brcs	.-6      	; 0x5716 <__fp_pscB+0xe>
    571c:	e8 94       	clt
    571e:	ef ef       	ldi	r30, 0xFF	; 255
    5720:	bb 27       	eor	r27, r27
    5722:	3f e0       	ldi	r19, 0x0F	; 15
    5724:	48 ec       	ldi	r20, 0xC8	; 200
    5726:	5f e7       	ldi	r21, 0x7F	; 127
    5728:	6b 3d       	cpi	r22, 0xDB	; 219
    572a:	73 07       	cpc	r23, r19
    572c:	84 07       	cpc	r24, r20
    572e:	95 07       	cpc	r25, r21
    5730:	08 f1       	brcs	.+66     	; 0x5774 <__fp_rempio2+0x5c>
    5732:	ff 27       	eor	r31, r31
    5734:	9f 57       	subi	r25, 0x7F	; 127
    5736:	b2 5a       	subi	r27, 0xA2	; 162
    5738:	6a 4d       	sbci	r22, 0xDA	; 218
    573a:	7f 40       	sbci	r23, 0x0F	; 15
    573c:	89 4c       	sbci	r24, 0xC9	; 201
    573e:	f0 40       	sbci	r31, 0x00	; 0
    5740:	32 f4       	brpl	.+12     	; 0x574e <__fp_rempio2+0x36>
    5742:	be 55       	subi	r27, 0x5E	; 94
    5744:	65 42       	sbci	r22, 0x25	; 37
    5746:	70 4f       	sbci	r23, 0xF0	; 240
    5748:	86 43       	sbci	r24, 0x36	; 54
    574a:	ff 4f       	sbci	r31, 0xFF	; 255
    574c:	08 94       	sec
    574e:	ee 1f       	adc	r30, r30
    5750:	91 50       	subi	r25, 0x01	; 1
    5752:	30 f0       	brcs	.+12     	; 0x5760 <__fp_rempio2+0x48>
    5754:	bb 0f       	add	r27, r27
    5756:	66 1f       	adc	r22, r22
    5758:	77 1f       	adc	r23, r23
    575a:	88 1f       	adc	r24, r24
    575c:	ff 1f       	adc	r31, r31
    575e:	eb cf       	rjmp	.-42     	; 0x5736 <__fp_rempio2+0x1e>
    5760:	9e e7       	ldi	r25, 0x7E	; 126
    5762:	88 23       	and	r24, r24
    5764:	32 f0       	brmi	.+12     	; 0x5772 <__fp_rempio2+0x5a>
    5766:	bb 0f       	add	r27, r27
    5768:	66 1f       	adc	r22, r22
    576a:	77 1f       	adc	r23, r23
    576c:	88 1f       	adc	r24, r24
    576e:	9a 95       	dec	r25
    5770:	c1 f7       	brne	.-16     	; 0x5762 <__fp_rempio2+0x4a>
    5772:	93 95       	inc	r25
    5774:	e0 95       	com	r30
    5776:	89 cf       	rjmp	.-238    	; 0x568a <__fp_mpack>

00005778 <__fp_round>:
    5778:	09 2e       	mov	r0, r25
    577a:	03 94       	inc	r0
    577c:	00 0c       	add	r0, r0
    577e:	11 f4       	brne	.+4      	; 0x5784 <__fp_round+0xc>
    5780:	88 23       	and	r24, r24
    5782:	52 f0       	brmi	.+20     	; 0x5798 <__fp_round+0x20>
    5784:	bb 0f       	add	r27, r27
    5786:	40 f4       	brcc	.+16     	; 0x5798 <__fp_round+0x20>
    5788:	bf 2b       	or	r27, r31
    578a:	11 f4       	brne	.+4      	; 0x5790 <__fp_round+0x18>
    578c:	60 ff       	sbrs	r22, 0
    578e:	04 c0       	rjmp	.+8      	; 0x5798 <__fp_round+0x20>
    5790:	6f 5f       	subi	r22, 0xFF	; 255
    5792:	7f 4f       	sbci	r23, 0xFF	; 255
    5794:	8f 4f       	sbci	r24, 0xFF	; 255
    5796:	9f 4f       	sbci	r25, 0xFF	; 255
    5798:	08 95       	ret

0000579a <__fp_sinus>:
    579a:	ef 93       	push	r30
    579c:	e0 ff       	sbrs	r30, 0
    579e:	06 c0       	rjmp	.+12     	; 0x57ac <__fp_sinus+0x12>
    57a0:	a2 ea       	ldi	r26, 0xA2	; 162
    57a2:	2a ed       	ldi	r18, 0xDA	; 218
    57a4:	3f e0       	ldi	r19, 0x0F	; 15
    57a6:	49 ec       	ldi	r20, 0xC9	; 201
    57a8:	5f eb       	ldi	r21, 0xBF	; 191
    57aa:	85 dd       	rcall	.-1270   	; 0x52b6 <__addsf3x>
    57ac:	e5 df       	rcall	.-54     	; 0x5778 <__fp_round>
    57ae:	0f 90       	pop	r0
    57b0:	03 94       	inc	r0
    57b2:	01 fc       	sbrc	r0, 1
    57b4:	90 58       	subi	r25, 0x80	; 128
    57b6:	e5 e9       	ldi	r30, 0x95	; 149
    57b8:	f0 e0       	ldi	r31, 0x00	; 0
    57ba:	0c c1       	rjmp	.+536    	; 0x59d4 <__fp_powsodd>

000057bc <__fp_split3>:
    57bc:	57 fd       	sbrc	r21, 7
    57be:	90 58       	subi	r25, 0x80	; 128
    57c0:	44 0f       	add	r20, r20
    57c2:	55 1f       	adc	r21, r21
    57c4:	59 f0       	breq	.+22     	; 0x57dc <__fp_splitA+0x10>
    57c6:	5f 3f       	cpi	r21, 0xFF	; 255
    57c8:	71 f0       	breq	.+28     	; 0x57e6 <__fp_splitA+0x1a>
    57ca:	47 95       	ror	r20

000057cc <__fp_splitA>:
    57cc:	88 0f       	add	r24, r24
    57ce:	97 fb       	bst	r25, 7
    57d0:	99 1f       	adc	r25, r25
    57d2:	61 f0       	breq	.+24     	; 0x57ec <__fp_splitA+0x20>
    57d4:	9f 3f       	cpi	r25, 0xFF	; 255
    57d6:	79 f0       	breq	.+30     	; 0x57f6 <__fp_splitA+0x2a>
    57d8:	87 95       	ror	r24
    57da:	08 95       	ret
    57dc:	12 16       	cp	r1, r18
    57de:	13 06       	cpc	r1, r19
    57e0:	14 06       	cpc	r1, r20
    57e2:	55 1f       	adc	r21, r21
    57e4:	f2 cf       	rjmp	.-28     	; 0x57ca <__fp_split3+0xe>
    57e6:	46 95       	lsr	r20
    57e8:	f1 df       	rcall	.-30     	; 0x57cc <__fp_splitA>
    57ea:	08 c0       	rjmp	.+16     	; 0x57fc <__fp_splitA+0x30>
    57ec:	16 16       	cp	r1, r22
    57ee:	17 06       	cpc	r1, r23
    57f0:	18 06       	cpc	r1, r24
    57f2:	99 1f       	adc	r25, r25
    57f4:	f1 cf       	rjmp	.-30     	; 0x57d8 <__fp_splitA+0xc>
    57f6:	86 95       	lsr	r24
    57f8:	71 05       	cpc	r23, r1
    57fa:	61 05       	cpc	r22, r1
    57fc:	08 94       	sec
    57fe:	08 95       	ret

00005800 <__fp_trunc>:
    5800:	e5 df       	rcall	.-54     	; 0x57cc <__fp_splitA>
    5802:	a0 f0       	brcs	.+40     	; 0x582c <__fp_trunc+0x2c>
    5804:	be e7       	ldi	r27, 0x7E	; 126
    5806:	b9 17       	cp	r27, r25
    5808:	88 f4       	brcc	.+34     	; 0x582c <__fp_trunc+0x2c>
    580a:	bb 27       	eor	r27, r27
    580c:	9f 38       	cpi	r25, 0x8F	; 143
    580e:	60 f4       	brcc	.+24     	; 0x5828 <__fp_trunc+0x28>
    5810:	16 16       	cp	r1, r22
    5812:	b1 1d       	adc	r27, r1
    5814:	67 2f       	mov	r22, r23
    5816:	78 2f       	mov	r23, r24
    5818:	88 27       	eor	r24, r24
    581a:	98 5f       	subi	r25, 0xF8	; 248
    581c:	f7 cf       	rjmp	.-18     	; 0x580c <__fp_trunc+0xc>
    581e:	86 95       	lsr	r24
    5820:	77 95       	ror	r23
    5822:	67 95       	ror	r22
    5824:	b1 1d       	adc	r27, r1
    5826:	93 95       	inc	r25
    5828:	96 39       	cpi	r25, 0x96	; 150
    582a:	c8 f3       	brcs	.-14     	; 0x581e <__fp_trunc+0x1e>
    582c:	08 95       	ret

0000582e <__fp_zero>:
    582e:	e8 94       	clt

00005830 <__fp_szero>:
    5830:	bb 27       	eor	r27, r27
    5832:	66 27       	eor	r22, r22
    5834:	77 27       	eor	r23, r23
    5836:	cb 01       	movw	r24, r22
    5838:	97 f9       	bld	r25, 7
    583a:	08 95       	ret

0000583c <__gesf2>:
    583c:	e1 de       	rcall	.-574    	; 0x5600 <__fp_cmp>
    583e:	08 f4       	brcc	.+2      	; 0x5842 <__gesf2+0x6>
    5840:	8f ef       	ldi	r24, 0xFF	; 255
    5842:	08 95       	ret

00005844 <inverse>:
    5844:	9b 01       	movw	r18, r22
    5846:	ac 01       	movw	r20, r24
    5848:	60 e0       	ldi	r22, 0x00	; 0
    584a:	70 e0       	ldi	r23, 0x00	; 0
    584c:	80 e8       	ldi	r24, 0x80	; 128
    584e:	9f e3       	ldi	r25, 0x3F	; 63
    5850:	01 ce       	rjmp	.-1022   	; 0x5454 <__divsf3>

00005852 <__mulsf3>:
    5852:	0b d0       	rcall	.+22     	; 0x586a <__mulsf3x>
    5854:	91 cf       	rjmp	.-222    	; 0x5778 <__fp_round>
    5856:	51 df       	rcall	.-350    	; 0x56fa <__fp_pscA>
    5858:	28 f0       	brcs	.+10     	; 0x5864 <__mulsf3+0x12>
    585a:	56 df       	rcall	.-340    	; 0x5708 <__fp_pscB>
    585c:	18 f0       	brcs	.+6      	; 0x5864 <__mulsf3+0x12>
    585e:	95 23       	and	r25, r21
    5860:	09 f0       	breq	.+2      	; 0x5864 <__mulsf3+0x12>
    5862:	f2 ce       	rjmp	.-540    	; 0x5648 <__fp_inf>
    5864:	22 cf       	rjmp	.-444    	; 0x56aa <__fp_nan>
    5866:	11 24       	eor	r1, r1
    5868:	e3 cf       	rjmp	.-58     	; 0x5830 <__fp_szero>

0000586a <__mulsf3x>:
    586a:	a8 df       	rcall	.-176    	; 0x57bc <__fp_split3>
    586c:	a0 f3       	brcs	.-24     	; 0x5856 <__mulsf3+0x4>

0000586e <__mulsf3_pse>:
    586e:	95 9f       	mul	r25, r21
    5870:	d1 f3       	breq	.-12     	; 0x5866 <__mulsf3+0x14>
    5872:	95 0f       	add	r25, r21
    5874:	50 e0       	ldi	r21, 0x00	; 0
    5876:	55 1f       	adc	r21, r21
    5878:	62 9f       	mul	r22, r18
    587a:	f0 01       	movw	r30, r0
    587c:	72 9f       	mul	r23, r18
    587e:	bb 27       	eor	r27, r27
    5880:	f0 0d       	add	r31, r0
    5882:	b1 1d       	adc	r27, r1
    5884:	63 9f       	mul	r22, r19
    5886:	aa 27       	eor	r26, r26
    5888:	f0 0d       	add	r31, r0
    588a:	b1 1d       	adc	r27, r1
    588c:	aa 1f       	adc	r26, r26
    588e:	64 9f       	mul	r22, r20
    5890:	66 27       	eor	r22, r22
    5892:	b0 0d       	add	r27, r0
    5894:	a1 1d       	adc	r26, r1
    5896:	66 1f       	adc	r22, r22
    5898:	82 9f       	mul	r24, r18
    589a:	22 27       	eor	r18, r18
    589c:	b0 0d       	add	r27, r0
    589e:	a1 1d       	adc	r26, r1
    58a0:	62 1f       	adc	r22, r18
    58a2:	73 9f       	mul	r23, r19
    58a4:	b0 0d       	add	r27, r0
    58a6:	a1 1d       	adc	r26, r1
    58a8:	62 1f       	adc	r22, r18
    58aa:	83 9f       	mul	r24, r19
    58ac:	a0 0d       	add	r26, r0
    58ae:	61 1d       	adc	r22, r1
    58b0:	22 1f       	adc	r18, r18
    58b2:	74 9f       	mul	r23, r20
    58b4:	33 27       	eor	r19, r19
    58b6:	a0 0d       	add	r26, r0
    58b8:	61 1d       	adc	r22, r1
    58ba:	23 1f       	adc	r18, r19
    58bc:	84 9f       	mul	r24, r20
    58be:	60 0d       	add	r22, r0
    58c0:	21 1d       	adc	r18, r1
    58c2:	82 2f       	mov	r24, r18
    58c4:	76 2f       	mov	r23, r22
    58c6:	6a 2f       	mov	r22, r26
    58c8:	11 24       	eor	r1, r1
    58ca:	9f 57       	subi	r25, 0x7F	; 127
    58cc:	50 40       	sbci	r21, 0x00	; 0
    58ce:	8a f0       	brmi	.+34     	; 0x58f2 <__mulsf3_pse+0x84>
    58d0:	e1 f0       	breq	.+56     	; 0x590a <__mulsf3_pse+0x9c>
    58d2:	88 23       	and	r24, r24
    58d4:	4a f0       	brmi	.+18     	; 0x58e8 <__mulsf3_pse+0x7a>
    58d6:	ee 0f       	add	r30, r30
    58d8:	ff 1f       	adc	r31, r31
    58da:	bb 1f       	adc	r27, r27
    58dc:	66 1f       	adc	r22, r22
    58de:	77 1f       	adc	r23, r23
    58e0:	88 1f       	adc	r24, r24
    58e2:	91 50       	subi	r25, 0x01	; 1
    58e4:	50 40       	sbci	r21, 0x00	; 0
    58e6:	a9 f7       	brne	.-22     	; 0x58d2 <__mulsf3_pse+0x64>
    58e8:	9e 3f       	cpi	r25, 0xFE	; 254
    58ea:	51 05       	cpc	r21, r1
    58ec:	70 f0       	brcs	.+28     	; 0x590a <__mulsf3_pse+0x9c>
    58ee:	ac ce       	rjmp	.-680    	; 0x5648 <__fp_inf>
    58f0:	9f cf       	rjmp	.-194    	; 0x5830 <__fp_szero>
    58f2:	5f 3f       	cpi	r21, 0xFF	; 255
    58f4:	ec f3       	brlt	.-6      	; 0x58f0 <__mulsf3_pse+0x82>
    58f6:	98 3e       	cpi	r25, 0xE8	; 232
    58f8:	dc f3       	brlt	.-10     	; 0x58f0 <__mulsf3_pse+0x82>
    58fa:	86 95       	lsr	r24
    58fc:	77 95       	ror	r23
    58fe:	67 95       	ror	r22
    5900:	b7 95       	ror	r27
    5902:	f7 95       	ror	r31
    5904:	e7 95       	ror	r30
    5906:	9f 5f       	subi	r25, 0xFF	; 255
    5908:	c1 f7       	brne	.-16     	; 0x58fa <__mulsf3_pse+0x8c>
    590a:	fe 2b       	or	r31, r30
    590c:	88 0f       	add	r24, r24
    590e:	91 1d       	adc	r25, r1
    5910:	96 95       	lsr	r25
    5912:	87 95       	ror	r24
    5914:	97 f9       	bld	r25, 7
    5916:	08 95       	ret

00005918 <sin>:
    5918:	9f 93       	push	r25
    591a:	fe de       	rcall	.-516    	; 0x5718 <__fp_rempio2>
    591c:	0f 90       	pop	r0
    591e:	07 fc       	sbrc	r0, 7
    5920:	ee 5f       	subi	r30, 0xFE	; 254
    5922:	3b cf       	rjmp	.-394    	; 0x579a <__fp_sinus>
    5924:	11 f4       	brne	.+4      	; 0x592a <sin+0x12>
    5926:	0e f4       	brtc	.+2      	; 0x592a <sin+0x12>
    5928:	c0 ce       	rjmp	.-640    	; 0x56aa <__fp_nan>
    592a:	af ce       	rjmp	.-674    	; 0x568a <__fp_mpack>

0000592c <sqrt>:
    592c:	4f df       	rcall	.-354    	; 0x57cc <__fp_splitA>
    592e:	d0 f3       	brcs	.-12     	; 0x5924 <sin+0xc>
    5930:	99 23       	and	r25, r25
    5932:	d9 f3       	breq	.-10     	; 0x592a <sin+0x12>
    5934:	ce f3       	brts	.-14     	; 0x5928 <sin+0x10>
    5936:	9f 57       	subi	r25, 0x7F	; 127
    5938:	55 0b       	sbc	r21, r21
    593a:	87 ff       	sbrs	r24, 7
    593c:	44 d0       	rcall	.+136    	; 0x59c6 <__fp_norm2>
    593e:	56 95       	lsr	r21
    5940:	97 95       	ror	r25
    5942:	b0 e0       	ldi	r27, 0x00	; 0
    5944:	20 f4       	brcc	.+8      	; 0x594e <sqrt+0x22>
    5946:	66 0f       	add	r22, r22
    5948:	77 1f       	adc	r23, r23
    594a:	88 1f       	adc	r24, r24
    594c:	bb 1f       	adc	r27, r27
    594e:	1f 93       	push	r17
    5950:	0f 93       	push	r16
    5952:	00 24       	eor	r0, r0
    5954:	90 01       	movw	r18, r0
    5956:	a0 01       	movw	r20, r0
    5958:	80 01       	movw	r16, r0
    595a:	f0 01       	movw	r30, r0
    595c:	a0 e8       	ldi	r26, 0x80	; 128
    595e:	0e 0f       	add	r16, r30
    5960:	1f 1f       	adc	r17, r31
    5962:	0a 1e       	adc	r0, r26
    5964:	51 1d       	adc	r21, r1
    5966:	60 1b       	sub	r22, r16
    5968:	71 0b       	sbc	r23, r17
    596a:	80 09       	sbc	r24, r0
    596c:	b5 0b       	sbc	r27, r21
    596e:	48 f4       	brcc	.+18     	; 0x5982 <sqrt+0x56>
    5970:	60 0f       	add	r22, r16
    5972:	71 1f       	adc	r23, r17
    5974:	80 1d       	adc	r24, r0
    5976:	b5 1f       	adc	r27, r21
    5978:	0e 1b       	sub	r16, r30
    597a:	1f 0b       	sbc	r17, r31
    597c:	0a 0a       	sbc	r0, r26
    597e:	51 09       	sbc	r21, r1
    5980:	07 c0       	rjmp	.+14     	; 0x5990 <sqrt+0x64>
    5982:	2e 0f       	add	r18, r30
    5984:	3f 1f       	adc	r19, r31
    5986:	4a 1f       	adc	r20, r26
    5988:	0e 0f       	add	r16, r30
    598a:	1f 1f       	adc	r17, r31
    598c:	0a 1e       	adc	r0, r26
    598e:	51 1d       	adc	r21, r1
    5990:	66 0f       	add	r22, r22
    5992:	77 1f       	adc	r23, r23
    5994:	88 1f       	adc	r24, r24
    5996:	bb 1f       	adc	r27, r27
    5998:	a6 95       	lsr	r26
    599a:	f7 95       	ror	r31
    599c:	e7 95       	ror	r30
    599e:	f8 f6       	brcc	.-66     	; 0x595e <sqrt+0x32>
    59a0:	06 17       	cp	r16, r22
    59a2:	17 07       	cpc	r17, r23
    59a4:	08 06       	cpc	r0, r24
    59a6:	5b 07       	cpc	r21, r27
    59a8:	21 1d       	adc	r18, r1
    59aa:	31 1d       	adc	r19, r1
    59ac:	41 1d       	adc	r20, r1
    59ae:	0f 91       	pop	r16
    59b0:	1f 91       	pop	r17
    59b2:	b9 01       	movw	r22, r18
    59b4:	84 2f       	mov	r24, r20
    59b6:	91 58       	subi	r25, 0x81	; 129
    59b8:	88 0f       	add	r24, r24
    59ba:	96 95       	lsr	r25
    59bc:	87 95       	ror	r24
    59be:	08 95       	ret

000059c0 <square>:
    59c0:	9b 01       	movw	r18, r22
    59c2:	ac 01       	movw	r20, r24
    59c4:	46 cf       	rjmp	.-372    	; 0x5852 <__mulsf3>

000059c6 <__fp_norm2>:
    59c6:	91 50       	subi	r25, 0x01	; 1
    59c8:	50 40       	sbci	r21, 0x00	; 0
    59ca:	66 0f       	add	r22, r22
    59cc:	77 1f       	adc	r23, r23
    59ce:	88 1f       	adc	r24, r24
    59d0:	d2 f7       	brpl	.-12     	; 0x59c6 <__fp_norm2>
    59d2:	08 95       	ret

000059d4 <__fp_powsodd>:
    59d4:	9f 93       	push	r25
    59d6:	8f 93       	push	r24
    59d8:	7f 93       	push	r23
    59da:	6f 93       	push	r22
    59dc:	ff 93       	push	r31
    59de:	ef 93       	push	r30
    59e0:	9b 01       	movw	r18, r22
    59e2:	ac 01       	movw	r20, r24
    59e4:	36 df       	rcall	.-404    	; 0x5852 <__mulsf3>
    59e6:	ef 91       	pop	r30
    59e8:	ff 91       	pop	r31
    59ea:	62 de       	rcall	.-828    	; 0x56b0 <__fp_powser>
    59ec:	2f 91       	pop	r18
    59ee:	3f 91       	pop	r19
    59f0:	4f 91       	pop	r20
    59f2:	5f 91       	pop	r21
    59f4:	2e cf       	rjmp	.-420    	; 0x5852 <__mulsf3>

000059f6 <__mulsi3>:
    59f6:	62 9f       	mul	r22, r18
    59f8:	d0 01       	movw	r26, r0
    59fa:	73 9f       	mul	r23, r19
    59fc:	f0 01       	movw	r30, r0
    59fe:	82 9f       	mul	r24, r18
    5a00:	e0 0d       	add	r30, r0
    5a02:	f1 1d       	adc	r31, r1
    5a04:	64 9f       	mul	r22, r20
    5a06:	e0 0d       	add	r30, r0
    5a08:	f1 1d       	adc	r31, r1
    5a0a:	92 9f       	mul	r25, r18
    5a0c:	f0 0d       	add	r31, r0
    5a0e:	83 9f       	mul	r24, r19
    5a10:	f0 0d       	add	r31, r0
    5a12:	74 9f       	mul	r23, r20
    5a14:	f0 0d       	add	r31, r0
    5a16:	65 9f       	mul	r22, r21
    5a18:	f0 0d       	add	r31, r0
    5a1a:	99 27       	eor	r25, r25
    5a1c:	72 9f       	mul	r23, r18
    5a1e:	b0 0d       	add	r27, r0
    5a20:	e1 1d       	adc	r30, r1
    5a22:	f9 1f       	adc	r31, r25
    5a24:	63 9f       	mul	r22, r19
    5a26:	b0 0d       	add	r27, r0
    5a28:	e1 1d       	adc	r30, r1
    5a2a:	f9 1f       	adc	r31, r25
    5a2c:	bd 01       	movw	r22, r26
    5a2e:	cf 01       	movw	r24, r30
    5a30:	11 24       	eor	r1, r1
    5a32:	08 95       	ret

00005a34 <__udivmodsi4>:
    5a34:	a1 e2       	ldi	r26, 0x21	; 33
    5a36:	1a 2e       	mov	r1, r26
    5a38:	aa 1b       	sub	r26, r26
    5a3a:	bb 1b       	sub	r27, r27
    5a3c:	fd 01       	movw	r30, r26
    5a3e:	0d c0       	rjmp	.+26     	; 0x5a5a <__udivmodsi4_ep>

00005a40 <__udivmodsi4_loop>:
    5a40:	aa 1f       	adc	r26, r26
    5a42:	bb 1f       	adc	r27, r27
    5a44:	ee 1f       	adc	r30, r30
    5a46:	ff 1f       	adc	r31, r31
    5a48:	a2 17       	cp	r26, r18
    5a4a:	b3 07       	cpc	r27, r19
    5a4c:	e4 07       	cpc	r30, r20
    5a4e:	f5 07       	cpc	r31, r21
    5a50:	20 f0       	brcs	.+8      	; 0x5a5a <__udivmodsi4_ep>
    5a52:	a2 1b       	sub	r26, r18
    5a54:	b3 0b       	sbc	r27, r19
    5a56:	e4 0b       	sbc	r30, r20
    5a58:	f5 0b       	sbc	r31, r21

00005a5a <__udivmodsi4_ep>:
    5a5a:	66 1f       	adc	r22, r22
    5a5c:	77 1f       	adc	r23, r23
    5a5e:	88 1f       	adc	r24, r24
    5a60:	99 1f       	adc	r25, r25
    5a62:	1a 94       	dec	r1
    5a64:	69 f7       	brne	.-38     	; 0x5a40 <__udivmodsi4_loop>
    5a66:	60 95       	com	r22
    5a68:	70 95       	com	r23
    5a6a:	80 95       	com	r24
    5a6c:	90 95       	com	r25
    5a6e:	9b 01       	movw	r18, r22
    5a70:	ac 01       	movw	r20, r24
    5a72:	bd 01       	movw	r22, r26
    5a74:	cf 01       	movw	r24, r30
    5a76:	08 95       	ret

00005a78 <__divmodsi4>:
    5a78:	97 fb       	bst	r25, 7
    5a7a:	09 2e       	mov	r0, r25
    5a7c:	05 26       	eor	r0, r21
    5a7e:	0e d0       	rcall	.+28     	; 0x5a9c <__divmodsi4_neg1>
    5a80:	57 fd       	sbrc	r21, 7
    5a82:	04 d0       	rcall	.+8      	; 0x5a8c <__divmodsi4_neg2>
    5a84:	d7 df       	rcall	.-82     	; 0x5a34 <__udivmodsi4>
    5a86:	0a d0       	rcall	.+20     	; 0x5a9c <__divmodsi4_neg1>
    5a88:	00 1c       	adc	r0, r0
    5a8a:	38 f4       	brcc	.+14     	; 0x5a9a <__divmodsi4_exit>

00005a8c <__divmodsi4_neg2>:
    5a8c:	50 95       	com	r21
    5a8e:	40 95       	com	r20
    5a90:	30 95       	com	r19
    5a92:	21 95       	neg	r18
    5a94:	3f 4f       	sbci	r19, 0xFF	; 255
    5a96:	4f 4f       	sbci	r20, 0xFF	; 255
    5a98:	5f 4f       	sbci	r21, 0xFF	; 255

00005a9a <__divmodsi4_exit>:
    5a9a:	08 95       	ret

00005a9c <__divmodsi4_neg1>:
    5a9c:	f6 f7       	brtc	.-4      	; 0x5a9a <__divmodsi4_exit>
    5a9e:	90 95       	com	r25
    5aa0:	80 95       	com	r24
    5aa2:	70 95       	com	r23
    5aa4:	61 95       	neg	r22
    5aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    5aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    5aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    5aac:	08 95       	ret

00005aae <__tablejump2__>:
    5aae:	ee 0f       	add	r30, r30
    5ab0:	ff 1f       	adc	r31, r31

00005ab2 <__tablejump__>:
    5ab2:	05 90       	lpm	r0, Z+
    5ab4:	f4 91       	lpm	r31, Z+
    5ab6:	e0 2d       	mov	r30, r0
    5ab8:	09 94       	ijmp

00005aba <isspace>:
    5aba:	91 11       	cpse	r25, r1
    5abc:	06 c0       	rjmp	.+12     	; 0x5aca <__ctype_isfalse>
    5abe:	80 32       	cpi	r24, 0x20	; 32
    5ac0:	19 f0       	breq	.+6      	; 0x5ac8 <isspace+0xe>
    5ac2:	89 50       	subi	r24, 0x09	; 9
    5ac4:	85 50       	subi	r24, 0x05	; 5
    5ac6:	d0 f7       	brcc	.-12     	; 0x5abc <isspace+0x2>
    5ac8:	08 95       	ret

00005aca <__ctype_isfalse>:
    5aca:	99 27       	eor	r25, r25
    5acc:	88 27       	eor	r24, r24

00005ace <__ctype_istrue>:
    5ace:	08 95       	ret

00005ad0 <__prologue_saves__>:
    5ad0:	2f 92       	push	r2
    5ad2:	3f 92       	push	r3
    5ad4:	4f 92       	push	r4
    5ad6:	5f 92       	push	r5
    5ad8:	6f 92       	push	r6
    5ada:	7f 92       	push	r7
    5adc:	8f 92       	push	r8
    5ade:	9f 92       	push	r9
    5ae0:	af 92       	push	r10
    5ae2:	bf 92       	push	r11
    5ae4:	cf 92       	push	r12
    5ae6:	df 92       	push	r13
    5ae8:	ef 92       	push	r14
    5aea:	ff 92       	push	r15
    5aec:	0f 93       	push	r16
    5aee:	1f 93       	push	r17
    5af0:	cf 93       	push	r28
    5af2:	df 93       	push	r29
    5af4:	cd b7       	in	r28, 0x3d	; 61
    5af6:	de b7       	in	r29, 0x3e	; 62
    5af8:	ca 1b       	sub	r28, r26
    5afa:	db 0b       	sbc	r29, r27
    5afc:	0f b6       	in	r0, 0x3f	; 63
    5afe:	f8 94       	cli
    5b00:	de bf       	out	0x3e, r29	; 62
    5b02:	0f be       	out	0x3f, r0	; 63
    5b04:	cd bf       	out	0x3d, r28	; 61
    5b06:	09 94       	ijmp

00005b08 <__epilogue_restores__>:
    5b08:	2a 88       	ldd	r2, Y+18	; 0x12
    5b0a:	39 88       	ldd	r3, Y+17	; 0x11
    5b0c:	48 88       	ldd	r4, Y+16	; 0x10
    5b0e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b10:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b12:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b14:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b16:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b18:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b1a:	b9 84       	ldd	r11, Y+9	; 0x09
    5b1c:	c8 84       	ldd	r12, Y+8	; 0x08
    5b1e:	df 80       	ldd	r13, Y+7	; 0x07
    5b20:	ee 80       	ldd	r14, Y+6	; 0x06
    5b22:	fd 80       	ldd	r15, Y+5	; 0x05
    5b24:	0c 81       	ldd	r16, Y+4	; 0x04
    5b26:	1b 81       	ldd	r17, Y+3	; 0x03
    5b28:	aa 81       	ldd	r26, Y+2	; 0x02
    5b2a:	b9 81       	ldd	r27, Y+1	; 0x01
    5b2c:	ce 0f       	add	r28, r30
    5b2e:	d1 1d       	adc	r29, r1
    5b30:	0f b6       	in	r0, 0x3f	; 63
    5b32:	f8 94       	cli
    5b34:	de bf       	out	0x3e, r29	; 62
    5b36:	0f be       	out	0x3f, r0	; 63
    5b38:	cd bf       	out	0x3d, r28	; 61
    5b3a:	ed 01       	movw	r28, r26
    5b3c:	08 95       	ret

00005b3e <_exit>:
    5b3e:	f8 94       	cli

00005b40 <__stop_program>:
    5b40:	ff cf       	rjmp	.-2      	; 0x5b40 <__stop_program>
