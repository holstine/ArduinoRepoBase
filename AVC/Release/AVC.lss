
AVC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  00002a60  00002af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c2  008001ba  008001ba  00002bae  2**0
                  ALLOC
  3 .debug_aranges 00000740  00000000  00000000  00002bae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000013f3  00000000  00000000  000032ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009055  00000000  00000000  000046e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001c09  00000000  00000000  0000d736  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043de  00000000  00000000  0000f33f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d80  00000000  00000000  00013720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000021f2  00000000  00000000  000144a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004100  00000000  00000000  00016692  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000708  00000000  00000000  0001a792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  // set address of targeted slave
  txAddress = address;
  // reset tx buffer iterator vars
  txBufferIndex = 0;
  txBufferLength = 0;
}
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
  if( ServoCount < MAX_SERVOS) {
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
       4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
 digitalWrite(FORWARD_PIN, LOW);
 digitalWrite(BACKWARD_PIN, LOW);
}

// ***********************************
int readOdo(){
       8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
       c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
      10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
      14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
      18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
}
      1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
      20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      2c:	0c 94 71 05 	jmp	0xae2	; 0xae2 <__vector_11>
      30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      40:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__vector_16>
      44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      48:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_18>
      4c:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_19>
      50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      60:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_24>
      64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 05       	cpc	r19, r15
      96:	a8 4c       	sbci	r26, 0xC8	; 200
      98:	cd b2       	in	r12, 0x1d	; 29
      9a:	d4 4e       	sbci	r29, 0xE4	; 228
      9c:	b9 38       	cpi	r27, 0x89	; 137
      9e:	36 a9       	ldd	r19, Z+54	; 0x36
      a0:	02 0c       	add	r0, r2
      a2:	50 b9       	out	0x00, r21	; 0
      a4:	91 86       	std	Z+9, r9	; 0x09
      a6:	88 08       	sbc	r8, r8
      a8:	3c a6       	std	Y+44, r3	; 0x2c
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	2a be       	out	0x3a, r2	; 58
      ae:	00 00       	nop
      b0:	00 80       	ld	r0, Z
      b2:	3f 00       	.word	0x003f	; ????

000000b3 <port_to_mode_PGM>:
      b3:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000bd <port_to_output_PGM>:
      bd:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c7 <port_to_input_PGM>:
      c7:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d1 <digital_pin_to_port_PGM>:
      d1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      e1:	03 03 03 03                                         ....

000000e5 <digital_pin_to_bit_mask_PGM>:
      e5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f5:	04 08 10 20                                         ... 

000000f9 <digital_pin_to_timer_PGM>:
      f9:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     109:	00 00 00 00 00                                      .....

0000010e <__ctors_start>:
     10e:	7c 03       	fmul	r23, r20
     110:	e0 06       	cpc	r14, r16
     112:	64 0d       	add	r22, r4

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d8 e0       	ldi	r29, 0x08	; 8
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e0 e6       	ldi	r30, 0x60	; 96
     128:	fa e2       	ldi	r31, 0x2A	; 42
     12a:	02 c0       	rjmp	.+4      	; 0x130 <.do_copy_data_start>

0000012c <.do_copy_data_loop>:
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0

00000130 <.do_copy_data_start>:
     130:	aa 3b       	cpi	r26, 0xBA	; 186
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <.do_copy_data_loop>

00000136 <__do_clear_bss>:
     136:	13 e0       	ldi	r17, 0x03	; 3
     138:	aa eb       	ldi	r26, 0xBA	; 186
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	ac 37       	cpi	r26, 0x7C	; 124
     142:	b1 07       	cpc	r27, r17
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>

00000146 <__do_global_ctors>:
     146:	11 e0       	ldi	r17, 0x01	; 1
     148:	c4 e1       	ldi	r28, 0x14	; 20
     14a:	d1 e0       	ldi	r29, 0x01	; 1
     14c:	04 c0       	rjmp	.+8      	; 0x156 <.do_global_ctors_start>

0000014e <.do_global_ctors_loop>:
     14e:	22 97       	sbiw	r28, 0x02	; 2
     150:	fe 01       	movw	r30, r28
     152:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <__tablejump__>

00000156 <.do_global_ctors_start>:
     156:	ce 30       	cpi	r28, 0x0E	; 14
     158:	d1 07       	cpc	r29, r17
     15a:	c9 f7       	brne	.-14     	; 0x14e <.do_global_ctors_loop>
     15c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <main>
     160:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <_exit>

00000164 <__bad_interrupt>:
     164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     168:	88 0f       	add	r24, r24
     16a:	80 93 ba 00 	sts	0x00BA, r24
}
     16e:	08 95       	ret

00000170 <twi_readFrom>:
 *          length: number of bytes to read into array
 *          sendStop: Boolean indicating whether to send a stop at the end
 * Output   number of bytes read
 */
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
     170:	38 2f       	mov	r19, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     172:	41 32       	cpi	r20, 0x21	; 33
     174:	10 f0       	brcs	.+4      	; 0x17a <twi_readFrom+0xa>
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	42 c0       	rjmp	.+132    	; 0x1fe <twi_readFrom+0x8e>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     17a:	80 91 ba 01 	lds	r24, 0x01BA
     17e:	88 23       	and	r24, r24
     180:	e1 f7       	brne	.-8      	; 0x17a <twi_readFrom+0xa>
    continue;
  }
  twi_state = TWI_MRX;
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	90 93 ba 01 	sts	0x01BA, r25
  twi_sendStop = sendStop;
     188:	20 93 bc 01 	sts	0x01BC, r18
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     18c:	8f ef       	ldi	r24, 0xFF	; 255
     18e:	80 93 27 02 	sts	0x0227, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     192:	10 92 e2 01 	sts	0x01E2, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     196:	41 50       	subi	r20, 0x01	; 1
     198:	40 93 e3 01 	sts	0x01E3, r20
     19c:	4f 5f       	subi	r20, 0xFF	; 255
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
     19e:	90 93 bb 01 	sts	0x01BB, r25
  twi_slarw |= address << 1;
     1a2:	80 91 bb 01 	lds	r24, 0x01BB
     1a6:	33 0f       	add	r19, r19
     1a8:	83 2b       	or	r24, r19
     1aa:	80 93 bb 01 	sts	0x01BB, r24

  if (true == twi_inRepStart) {
     1ae:	80 91 bd 01 	lds	r24, 0x01BD
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	41 f4       	brne	.+16     	; 0x1c6 <twi_readFrom+0x56>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     1b6:	10 92 bd 01 	sts	0x01BD, r1
    TWDR = twi_slarw;
     1ba:	80 91 bb 01 	lds	r24, 0x01BB
     1be:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     1c2:	85 ec       	ldi	r24, 0xC5	; 197
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <twi_readFrom+0x58>
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     1c6:	85 ee       	ldi	r24, 0xE5	; 229
     1c8:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     1cc:	80 91 ba 01 	lds	r24, 0x01BA
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	e1 f3       	breq	.-8      	; 0x1cc <twi_readFrom+0x5c>
    continue;
  }

  if (twi_masterBufferIndex < length)
     1d4:	80 91 e2 01 	lds	r24, 0x01E2
     1d8:	84 17       	cp	r24, r20
     1da:	10 f4       	brcc	.+4      	; 0x1e0 <twi_readFrom+0x70>
    length = twi_masterBufferIndex;
     1dc:	40 91 e2 01 	lds	r20, 0x01E2
     1e0:	20 e0       	ldi	r18, 0x00	; 0
     1e2:	30 e0       	ldi	r19, 0x00	; 0
     1e4:	0a c0       	rjmp	.+20     	; 0x1fa <twi_readFrom+0x8a>

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
     1e6:	fb 01       	movw	r30, r22
     1e8:	e2 0f       	add	r30, r18
     1ea:	f3 1f       	adc	r31, r19
     1ec:	d9 01       	movw	r26, r18
     1ee:	ae 53       	subi	r26, 0x3E	; 62
     1f0:	be 4f       	sbci	r27, 0xFE	; 254
     1f2:	8c 91       	ld	r24, X
     1f4:	80 83       	st	Z, r24
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     1fa:	24 17       	cp	r18, r20
     1fc:	a0 f3       	brcs	.-24     	; 0x1e6 <twi_readFrom+0x76>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     1fe:	84 2f       	mov	r24, r20
     200:	08 95       	ret

00000202 <twi_writeTo>:
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	58 2f       	mov	r21, r24
     208:	12 2f       	mov	r17, r18
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     20a:	41 32       	cpi	r20, 0x21	; 33
     20c:	10 f0       	brcs	.+4      	; 0x212 <twi_writeTo+0x10>
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	4a c0       	rjmp	.+148    	; 0x2a6 <twi_writeTo+0xa4>
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     212:	80 91 ba 01 	lds	r24, 0x01BA
     216:	88 23       	and	r24, r24
     218:	e1 f7       	brne	.-8      	; 0x212 <twi_writeTo+0x10>
    continue;
  }
  twi_state = TWI_MTX;
     21a:	82 e0       	ldi	r24, 0x02	; 2
     21c:	80 93 ba 01 	sts	0x01BA, r24
  twi_sendStop = sendStop;
     220:	00 93 bc 01 	sts	0x01BC, r16
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     224:	8f ef       	ldi	r24, 0xFF	; 255
     226:	80 93 27 02 	sts	0x0227, r24

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     22a:	10 92 e2 01 	sts	0x01E2, r1
  twi_masterBufferLength = length;
     22e:	40 93 e3 01 	sts	0x01E3, r20
     232:	a2 ec       	ldi	r26, 0xC2	; 194
     234:	b1 e0       	ldi	r27, 0x01	; 1
     236:	fb 01       	movw	r30, r22
     238:	02 c0       	rjmp	.+4      	; 0x23e <twi_writeTo+0x3c>
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
     23a:	81 91       	ld	r24, Z+
     23c:	8d 93       	st	X+, r24
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     23e:	8e 2f       	mov	r24, r30
     240:	86 1b       	sub	r24, r22
     242:	84 17       	cp	r24, r20
     244:	d0 f3       	brcs	.-12     	; 0x23a <twi_writeTo+0x38>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     246:	10 92 bb 01 	sts	0x01BB, r1
  twi_slarw |= address << 1;
     24a:	80 91 bb 01 	lds	r24, 0x01BB
     24e:	55 0f       	add	r21, r21
     250:	85 2b       	or	r24, r21
     252:	80 93 bb 01 	sts	0x01BB, r24
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     256:	80 91 bd 01 	lds	r24, 0x01BD
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	41 f4       	brne	.+16     	; 0x26e <twi_writeTo+0x6c>
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false;			// remember, we're dealing with an ASYNC ISR
     25e:	10 92 bd 01 	sts	0x01BD, r1
    TWDR = twi_slarw;				
     262:	80 91 bb 01 	lds	r24, 0x01BB
     266:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);	// enable INTs, but not START
     26a:	85 ec       	ldi	r24, 0xC5	; 197
     26c:	01 c0       	rjmp	.+2      	; 0x270 <twi_writeTo+0x6e>
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);	// enable INTs
     26e:	85 ee       	ldi	r24, 0xE5	; 229
     270:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     274:	11 23       	and	r17, r17
     276:	21 f0       	breq	.+8      	; 0x280 <twi_writeTo+0x7e>
     278:	80 91 ba 01 	lds	r24, 0x01BA
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	e1 f3       	breq	.-8      	; 0x278 <twi_writeTo+0x76>
    continue;
  }
  
  if (twi_error == 0xFF)
     280:	80 91 27 02 	lds	r24, 0x0227
     284:	8f 3f       	cpi	r24, 0xFF	; 255
     286:	11 f4       	brne	.+4      	; 0x28c <twi_writeTo+0x8a>
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	0d c0       	rjmp	.+26     	; 0x2a6 <twi_writeTo+0xa4>
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     28c:	80 91 27 02 	lds	r24, 0x0227
     290:	80 32       	cpi	r24, 0x20	; 32
     292:	11 f4       	brne	.+4      	; 0x298 <twi_writeTo+0x96>
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	07 c0       	rjmp	.+14     	; 0x2a6 <twi_writeTo+0xa4>
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     298:	80 91 27 02 	lds	r24, 0x0227
     29c:	80 33       	cpi	r24, 0x30	; 48
     29e:	11 f0       	breq	.+4      	; 0x2a4 <twi_writeTo+0xa2>
     2a0:	84 e0       	ldi	r24, 0x04	; 4
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <twi_writeTo+0xa4>
     2a4:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	08 95       	ret

000002ac <twi_transmit>:
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
     2ac:	48 2f       	mov	r20, r24
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     2ae:	61 32       	cpi	r22, 0x21	; 33
     2b0:	10 f0       	brcs	.+4      	; 0x2b6 <twi_transmit+0xa>
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     2b6:	80 91 ba 01 	lds	r24, 0x01BA
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	11 f0       	breq	.+4      	; 0x2c2 <twi_transmit+0x16>
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     2c2:	60 93 05 02 	sts	0x0205, r22
     2c6:	a4 ee       	ldi	r26, 0xE4	; 228
     2c8:	b1 e0       	ldi	r27, 0x01	; 1
     2ca:	84 2f       	mov	r24, r20
     2cc:	9c 01       	movw	r18, r24
     2ce:	f9 01       	movw	r30, r18
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <twi_transmit+0x2a>
  for(i = 0; i < length; ++i){
    twi_txBuffer[i] = data[i];
     2d2:	81 91       	ld	r24, Z+
     2d4:	8d 93       	st	X+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     2d6:	8e 2f       	mov	r24, r30
     2d8:	84 1b       	sub	r24, r20
     2da:	86 17       	cp	r24, r22
     2dc:	d0 f3       	brcs	.-12     	; 0x2d2 <twi_transmit+0x26>
     2de:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     2e0:	08 95       	ret

000002e2 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     2e2:	90 93 c1 01 	sts	0x01C1, r25
     2e6:	80 93 c0 01 	sts	0x01C0, r24
}
     2ea:	08 95       	ret

000002ec <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     2ec:	90 93 bf 01 	sts	0x01BF, r25
     2f0:	80 93 be 01 	sts	0x01BE, r24
}
     2f4:	08 95       	ret

000002f6 <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     2f6:	88 23       	and	r24, r24
     2f8:	11 f0       	breq	.+4      	; 0x2fe <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     2fa:	85 ec       	ldi	r24, 0xC5	; 197
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <twi_reply+0xa>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     2fe:	85 e8       	ldi	r24, 0x85	; 133
     300:	80 93 bc 00 	sts	0x00BC, r24
     304:	08 95       	ret

00000306 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     306:	85 ed       	ldi	r24, 0xD5	; 213
     308:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     30c:	80 91 bc 00 	lds	r24, 0x00BC
     310:	84 fd       	sbrc	r24, 4
     312:	fc cf       	rjmp	.-8      	; 0x30c <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     314:	10 92 ba 01 	sts	0x01BA, r1
}
     318:	08 95       	ret

0000031a <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     31a:	85 ec       	ldi	r24, 0xC5	; 197
     31c:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     320:	10 92 ba 01 	sts	0x01BA, r1
}
     324:	08 95       	ret

00000326 <__vector_24>:

SIGNAL(TWI_vect)
{
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
  switch(TW_STATUS){
     348:	80 91 b9 00 	lds	r24, 0x00B9
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	88 7f       	andi	r24, 0xF8	; 248
     350:	90 70       	andi	r25, 0x00	; 0
     352:	80 36       	cpi	r24, 0x60	; 96
     354:	91 05       	cpc	r25, r1
     356:	09 f4       	brne	.+2      	; 0x35a <__vector_24+0x34>
     358:	f2 c0       	rjmp	.+484    	; 0x53e <__vector_24+0x218>
     35a:	81 36       	cpi	r24, 0x61	; 97
     35c:	91 05       	cpc	r25, r1
     35e:	cc f5       	brge	.+114    	; 0x3d2 <__vector_24+0xac>
     360:	88 32       	cpi	r24, 0x28	; 40
     362:	91 05       	cpc	r25, r1
     364:	09 f4       	brne	.+2      	; 0x368 <__vector_24+0x42>
     366:	7b c0       	rjmp	.+246    	; 0x45e <__vector_24+0x138>
     368:	89 32       	cpi	r24, 0x29	; 41
     36a:	91 05       	cpc	r25, r1
     36c:	b4 f4       	brge	.+44     	; 0x39a <__vector_24+0x74>
     36e:	80 31       	cpi	r24, 0x10	; 16
     370:	91 05       	cpc	r25, r1
     372:	09 f4       	brne	.+2      	; 0x376 <__vector_24+0x50>
     374:	6f c0       	rjmp	.+222    	; 0x454 <__vector_24+0x12e>
     376:	81 31       	cpi	r24, 0x11	; 17
     378:	91 05       	cpc	r25, r1
     37a:	3c f4       	brge	.+14     	; 0x38a <__vector_24+0x64>
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	09 f4       	brne	.+2      	; 0x382 <__vector_24+0x5c>
     380:	47 c1       	rjmp	.+654    	; 0x610 <__vector_24+0x2ea>
     382:	08 97       	sbiw	r24, 0x08	; 8
     384:	09 f0       	breq	.+2      	; 0x388 <__vector_24+0x62>
     386:	4f c1       	rjmp	.+670    	; 0x626 <__vector_24+0x300>
     388:	65 c0       	rjmp	.+202    	; 0x454 <__vector_24+0x12e>
     38a:	88 31       	cpi	r24, 0x18	; 24
     38c:	91 05       	cpc	r25, r1
     38e:	09 f4       	brne	.+2      	; 0x392 <__vector_24+0x6c>
     390:	66 c0       	rjmp	.+204    	; 0x45e <__vector_24+0x138>
     392:	80 97       	sbiw	r24, 0x20	; 32
     394:	09 f0       	breq	.+2      	; 0x398 <__vector_24+0x72>
     396:	47 c1       	rjmp	.+654    	; 0x626 <__vector_24+0x300>
     398:	82 c0       	rjmp	.+260    	; 0x49e <__vector_24+0x178>
     39a:	80 34       	cpi	r24, 0x40	; 64
     39c:	91 05       	cpc	r25, r1
     39e:	09 f4       	brne	.+2      	; 0x3a2 <__vector_24+0x7c>
     3a0:	a4 c0       	rjmp	.+328    	; 0x4ea <__vector_24+0x1c4>
     3a2:	81 34       	cpi	r24, 0x41	; 65
     3a4:	91 05       	cpc	r25, r1
     3a6:	44 f4       	brge	.+16     	; 0x3b8 <__vector_24+0x92>
     3a8:	80 33       	cpi	r24, 0x30	; 48
     3aa:	91 05       	cpc	r25, r1
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <__vector_24+0x8a>
     3ae:	82 c0       	rjmp	.+260    	; 0x4b4 <__vector_24+0x18e>
     3b0:	c8 97       	sbiw	r24, 0x38	; 56
     3b2:	09 f0       	breq	.+2      	; 0x3b6 <__vector_24+0x90>
     3b4:	38 c1       	rjmp	.+624    	; 0x626 <__vector_24+0x300>
     3b6:	89 c0       	rjmp	.+274    	; 0x4ca <__vector_24+0x1a4>
     3b8:	80 35       	cpi	r24, 0x50	; 80
     3ba:	91 05       	cpc	r25, r1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <__vector_24+0x9a>
     3be:	89 c0       	rjmp	.+274    	; 0x4d2 <__vector_24+0x1ac>
     3c0:	88 35       	cpi	r24, 0x58	; 88
     3c2:	91 05       	cpc	r25, r1
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <__vector_24+0xa2>
     3c6:	96 c0       	rjmp	.+300    	; 0x4f4 <__vector_24+0x1ce>
     3c8:	88 34       	cpi	r24, 0x48	; 72
     3ca:	91 05       	cpc	r25, r1
     3cc:	09 f0       	breq	.+2      	; 0x3d0 <__vector_24+0xaa>
     3ce:	2b c1       	rjmp	.+598    	; 0x626 <__vector_24+0x300>
     3d0:	ae c0       	rjmp	.+348    	; 0x52e <__vector_24+0x208>
     3d2:	88 39       	cpi	r24, 0x98	; 152
     3d4:	91 05       	cpc	r25, r1
     3d6:	09 f4       	brne	.+2      	; 0x3da <__vector_24+0xb4>
     3d8:	13 c1       	rjmp	.+550    	; 0x600 <__vector_24+0x2da>
     3da:	89 39       	cpi	r24, 0x99	; 153
     3dc:	91 05       	cpc	r25, r1
     3de:	ec f4       	brge	.+58     	; 0x41a <__vector_24+0xf4>
     3e0:	88 37       	cpi	r24, 0x78	; 120
     3e2:	91 05       	cpc	r25, r1
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <__vector_24+0xc2>
     3e6:	ab c0       	rjmp	.+342    	; 0x53e <__vector_24+0x218>
     3e8:	89 37       	cpi	r24, 0x79	; 121
     3ea:	91 05       	cpc	r25, r1
     3ec:	4c f4       	brge	.+18     	; 0x400 <__vector_24+0xda>
     3ee:	88 36       	cpi	r24, 0x68	; 104
     3f0:	91 05       	cpc	r25, r1
     3f2:	09 f4       	brne	.+2      	; 0x3f6 <__vector_24+0xd0>
     3f4:	a4 c0       	rjmp	.+328    	; 0x53e <__vector_24+0x218>
     3f6:	80 37       	cpi	r24, 0x70	; 112
     3f8:	91 05       	cpc	r25, r1
     3fa:	09 f0       	breq	.+2      	; 0x3fe <__vector_24+0xd8>
     3fc:	14 c1       	rjmp	.+552    	; 0x626 <__vector_24+0x300>
     3fe:	9f c0       	rjmp	.+318    	; 0x53e <__vector_24+0x218>
     400:	88 38       	cpi	r24, 0x88	; 136
     402:	91 05       	cpc	r25, r1
     404:	09 f4       	brne	.+2      	; 0x408 <__vector_24+0xe2>
     406:	fc c0       	rjmp	.+504    	; 0x600 <__vector_24+0x2da>
     408:	80 39       	cpi	r24, 0x90	; 144
     40a:	91 05       	cpc	r25, r1
     40c:	09 f4       	brne	.+2      	; 0x410 <__vector_24+0xea>
     40e:	9d c0       	rjmp	.+314    	; 0x54a <__vector_24+0x224>
     410:	80 38       	cpi	r24, 0x80	; 128
     412:	91 05       	cpc	r25, r1
     414:	09 f0       	breq	.+2      	; 0x418 <__vector_24+0xf2>
     416:	07 c1       	rjmp	.+526    	; 0x626 <__vector_24+0x300>
     418:	98 c0       	rjmp	.+304    	; 0x54a <__vector_24+0x224>
     41a:	80 3b       	cpi	r24, 0xB0	; 176
     41c:	91 05       	cpc	r25, r1
     41e:	09 f4       	brne	.+2      	; 0x422 <__vector_24+0xfc>
     420:	c6 c0       	rjmp	.+396    	; 0x5ae <__vector_24+0x288>
     422:	81 3b       	cpi	r24, 0xB1	; 177
     424:	91 05       	cpc	r25, r1
     426:	4c f4       	brge	.+18     	; 0x43a <__vector_24+0x114>
     428:	80 3a       	cpi	r24, 0xA0	; 160
     42a:	91 05       	cpc	r25, r1
     42c:	09 f4       	brne	.+2      	; 0x430 <__vector_24+0x10a>
     42e:	9f c0       	rjmp	.+318    	; 0x56e <__vector_24+0x248>
     430:	88 3a       	cpi	r24, 0xA8	; 168
     432:	91 05       	cpc	r25, r1
     434:	09 f0       	breq	.+2      	; 0x438 <__vector_24+0x112>
     436:	f7 c0       	rjmp	.+494    	; 0x626 <__vector_24+0x300>
     438:	ba c0       	rjmp	.+372    	; 0x5ae <__vector_24+0x288>
     43a:	80 3c       	cpi	r24, 0xC0	; 192
     43c:	91 05       	cpc	r25, r1
     43e:	09 f4       	brne	.+2      	; 0x442 <__vector_24+0x11c>
     440:	e3 c0       	rjmp	.+454    	; 0x608 <__vector_24+0x2e2>
     442:	88 3c       	cpi	r24, 0xC8	; 200
     444:	91 05       	cpc	r25, r1
     446:	09 f4       	brne	.+2      	; 0x44a <__vector_24+0x124>
     448:	df c0       	rjmp	.+446    	; 0x608 <__vector_24+0x2e2>
     44a:	88 3b       	cpi	r24, 0xB8	; 184
     44c:	91 05       	cpc	r25, r1
     44e:	09 f0       	breq	.+2      	; 0x452 <__vector_24+0x12c>
     450:	ea c0       	rjmp	.+468    	; 0x626 <__vector_24+0x300>
     452:	c2 c0       	rjmp	.+388    	; 0x5d8 <__vector_24+0x2b2>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     454:	80 91 bb 01 	lds	r24, 0x01BB
     458:	80 93 bb 00 	sts	0x00BB, r24
     45c:	cf c0       	rjmp	.+414    	; 0x5fc <__vector_24+0x2d6>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     45e:	90 91 e2 01 	lds	r25, 0x01E2
     462:	80 91 e3 01 	lds	r24, 0x01E3
     466:	98 17       	cp	r25, r24
     468:	68 f4       	brcc	.+26     	; 0x484 <__vector_24+0x15e>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     46a:	90 91 e2 01 	lds	r25, 0x01E2
     46e:	e9 2f       	mov	r30, r25
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ee 53       	subi	r30, 0x3E	; 62
     474:	fe 4f       	sbci	r31, 0xFE	; 254
     476:	80 81       	ld	r24, Z
     478:	80 93 bb 00 	sts	0x00BB, r24
     47c:	9f 5f       	subi	r25, 0xFF	; 255
     47e:	90 93 e2 01 	sts	0x01E2, r25
     482:	bc c0       	rjmp	.+376    	; 0x5fc <__vector_24+0x2d6>
        twi_reply(1);
      }else{
	if (twi_sendStop)
     484:	80 91 bc 01 	lds	r24, 0x01BC
     488:	88 23       	and	r24, r24
     48a:	09 f4       	brne	.+2      	; 0x48e <__vector_24+0x168>
     48c:	4b c0       	rjmp	.+150    	; 0x524 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     48e:	85 ed       	ldi	r24, 0xD5	; 213
     490:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     494:	80 91 bc 00 	lds	r24, 0x00BC
     498:	84 fd       	sbrc	r24, 4
     49a:	fc cf       	rjmp	.-8      	; 0x494 <__vector_24+0x16e>
     49c:	c2 c0       	rjmp	.+388    	; 0x622 <__vector_24+0x2fc>
	  twi_state = TWI_READY;
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     49e:	80 e2       	ldi	r24, 0x20	; 32
     4a0:	80 93 27 02 	sts	0x0227, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     4a4:	85 ed       	ldi	r24, 0xD5	; 213
     4a6:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     4aa:	80 91 bc 00 	lds	r24, 0x00BC
     4ae:	84 fd       	sbrc	r24, 4
     4b0:	fc cf       	rjmp	.-8      	; 0x4aa <__vector_24+0x184>
     4b2:	b7 c0       	rjmp	.+366    	; 0x622 <__vector_24+0x2fc>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     4b4:	80 e3       	ldi	r24, 0x30	; 48
     4b6:	80 93 27 02 	sts	0x0227, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     4ba:	85 ed       	ldi	r24, 0xD5	; 213
     4bc:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     4c0:	80 91 bc 00 	lds	r24, 0x00BC
     4c4:	84 fd       	sbrc	r24, 4
     4c6:	fc cf       	rjmp	.-8      	; 0x4c0 <__vector_24+0x19a>
     4c8:	ac c0       	rjmp	.+344    	; 0x622 <__vector_24+0x2fc>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     4ca:	88 e3       	ldi	r24, 0x38	; 56
     4cc:	80 93 27 02 	sts	0x0227, r24
     4d0:	9b c0       	rjmp	.+310    	; 0x608 <__vector_24+0x2e2>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     4d2:	80 91 e2 01 	lds	r24, 0x01E2
     4d6:	90 91 bb 00 	lds	r25, 0x00BB
     4da:	e8 2f       	mov	r30, r24
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	ee 53       	subi	r30, 0x3E	; 62
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	90 83       	st	Z, r25
     4e4:	8f 5f       	subi	r24, 0xFF	; 255
     4e6:	80 93 e2 01 	sts	0x01E2, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     4ea:	90 91 e2 01 	lds	r25, 0x01E2
     4ee:	80 91 e3 01 	lds	r24, 0x01E3
     4f2:	82 c0       	rjmp	.+260    	; 0x5f8 <__vector_24+0x2d2>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     4f4:	80 91 e2 01 	lds	r24, 0x01E2
     4f8:	90 91 bb 00 	lds	r25, 0x00BB
     4fc:	e8 2f       	mov	r30, r24
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	ee 53       	subi	r30, 0x3E	; 62
     502:	fe 4f       	sbci	r31, 0xFE	; 254
     504:	90 83       	st	Z, r25
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	80 93 e2 01 	sts	0x01E2, r24
	if (twi_sendStop)
     50c:	80 91 bc 01 	lds	r24, 0x01BC
     510:	88 23       	and	r24, r24
     512:	41 f0       	breq	.+16     	; 0x524 <__vector_24+0x1fe>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     514:	85 ed       	ldi	r24, 0xD5	; 213
     516:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     51a:	80 91 bc 00 	lds	r24, 0x00BC
     51e:	84 fd       	sbrc	r24, 4
     520:	fc cf       	rjmp	.-8      	; 0x51a <__vector_24+0x1f4>
     522:	7f c0       	rjmp	.+254    	; 0x622 <__vector_24+0x2fc>
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
	if (twi_sendStop)
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 bd 01 	sts	0x01BD, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     52a:	84 ea       	ldi	r24, 0xA4	; 164
     52c:	6e c0       	rjmp	.+220    	; 0x60a <__vector_24+0x2e4>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     52e:	85 ed       	ldi	r24, 0xD5	; 213
     530:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     534:	80 91 bc 00 	lds	r24, 0x00BC
     538:	84 fd       	sbrc	r24, 4
     53a:	fc cf       	rjmp	.-8      	; 0x534 <__vector_24+0x20e>
     53c:	72 c0       	rjmp	.+228    	; 0x622 <__vector_24+0x2fc>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	80 93 ba 01 	sts	0x01BA, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     544:	10 92 26 02 	sts	0x0226, r1
     548:	59 c0       	rjmp	.+178    	; 0x5fc <__vector_24+0x2d6>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     54a:	80 91 26 02 	lds	r24, 0x0226
     54e:	80 32       	cpi	r24, 0x20	; 32
     550:	08 f0       	brcs	.+2      	; 0x554 <__vector_24+0x22e>
     552:	56 c0       	rjmp	.+172    	; 0x600 <__vector_24+0x2da>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     554:	80 91 26 02 	lds	r24, 0x0226
     558:	90 91 bb 00 	lds	r25, 0x00BB
     55c:	e8 2f       	mov	r30, r24
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	ea 5f       	subi	r30, 0xFA	; 250
     562:	fd 4f       	sbci	r31, 0xFD	; 253
     564:	90 83       	st	Z, r25
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	80 93 26 02 	sts	0x0226, r24
     56c:	47 c0       	rjmp	.+142    	; 0x5fc <__vector_24+0x2d6>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     56e:	80 91 26 02 	lds	r24, 0x0226
     572:	80 32       	cpi	r24, 0x20	; 32
     574:	30 f4       	brcc	.+12     	; 0x582 <__vector_24+0x25c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     576:	e0 91 26 02 	lds	r30, 0x0226
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ea 5f       	subi	r30, 0xFA	; 250
     57e:	fd 4f       	sbci	r31, 0xFD	; 253
     580:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     582:	85 ed       	ldi	r24, 0xD5	; 213
     584:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     588:	80 91 bc 00 	lds	r24, 0x00BC
     58c:	84 fd       	sbrc	r24, 4
     58e:	fc cf       	rjmp	.-8      	; 0x588 <__vector_24+0x262>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     590:	10 92 ba 01 	sts	0x01BA, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     594:	60 91 26 02 	lds	r22, 0x0226
     598:	e0 91 c0 01 	lds	r30, 0x01C0
     59c:	f0 91 c1 01 	lds	r31, 0x01C1
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     5a8:	10 92 26 02 	sts	0x0226, r1
     5ac:	2d c0       	rjmp	.+90     	; 0x608 <__vector_24+0x2e2>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	80 93 ba 01 	sts	0x01BA, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     5b4:	10 92 04 02 	sts	0x0204, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     5b8:	10 92 05 02 	sts	0x0205, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     5bc:	e0 91 be 01 	lds	r30, 0x01BE
     5c0:	f0 91 bf 01 	lds	r31, 0x01BF
     5c4:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     5c6:	80 91 05 02 	lds	r24, 0x0205
     5ca:	88 23       	and	r24, r24
     5cc:	29 f4       	brne	.+10     	; 0x5d8 <__vector_24+0x2b2>
        twi_txBufferLength = 1;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	80 93 05 02 	sts	0x0205, r24
        twi_txBuffer[0] = 0x00;
     5d4:	10 92 e4 01 	sts	0x01E4, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     5d8:	90 91 04 02 	lds	r25, 0x0204
     5dc:	e9 2f       	mov	r30, r25
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	ec 51       	subi	r30, 0x1C	; 28
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	80 81       	ld	r24, Z
     5e6:	80 93 bb 00 	sts	0x00BB, r24
     5ea:	9f 5f       	subi	r25, 0xFF	; 255
     5ec:	90 93 04 02 	sts	0x0204, r25
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     5f0:	90 91 04 02 	lds	r25, 0x0204
     5f4:	80 91 05 02 	lds	r24, 0x0205
     5f8:	98 17       	cp	r25, r24
     5fa:	10 f4       	brcc	.+4      	; 0x600 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     5fc:	85 ec       	ldi	r24, 0xC5	; 197
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <__vector_24+0x2dc>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     600:	85 e8       	ldi	r24, 0x85	; 133
     602:	80 93 bc 00 	sts	0x00BC, r24
     606:	0f c0       	rjmp	.+30     	; 0x626 <__vector_24+0x300>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     608:	85 ec       	ldi	r24, 0xC5	; 197
     60a:	80 93 bc 00 	sts	0x00BC, r24
     60e:	09 c0       	rjmp	.+18     	; 0x622 <__vector_24+0x2fc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     610:	10 92 27 02 	sts	0x0227, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     614:	85 ed       	ldi	r24, 0xD5	; 213
     616:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     61a:	80 91 bc 00 	lds	r24, 0x00BC
     61e:	84 fd       	sbrc	r24, 4
     620:	fc cf       	rjmp	.-8      	; 0x61a <__vector_24+0x2f4>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     622:	10 92 ba 01 	sts	0x01BA, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     648:	10 92 ba 01 	sts	0x01BA, r1
  twi_sendStop = true;		// default value
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	80 93 bc 01 	sts	0x01BC, r24
  twi_inRepStart = false;
     652:	10 92 bd 01 	sts	0x01BD, r1
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     656:	82 e1       	ldi	r24, 0x12	; 18
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
  digitalWrite(SCL, 1);
     65e:	83 e1       	ldi	r24, 0x13	; 19
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     666:	e9 eb       	ldi	r30, 0xB9	; 185
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	8e 7f       	andi	r24, 0xFE	; 254
     66e:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     670:	80 81       	ld	r24, Z
     672:	8d 7f       	andi	r24, 0xFD	; 253
     674:	80 83       	st	Z, r24
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     676:	88 e4       	ldi	r24, 0x48	; 72
     678:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     67c:	85 e4       	ldi	r24, 0x45	; 69
     67e:	80 93 bc 00 	sts	0x00BC, r24
}
     682:	08 95       	ret

00000684 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 6d 02 	sts	0x026D, r24
  // set address of targeted slave
  txAddress = address;
     68a:	60 93 4a 02 	sts	0x024A, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     68e:	10 92 6b 02 	sts	0x026B, r1
  txBufferLength = 0;
     692:	10 92 6c 02 	sts	0x026C, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
     696:	08 95       	ret

00000698 <_ZN7TwoWire9availableEv>:
}

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
     698:	20 91 49 02 	lds	r18, 0x0249
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	80 91 48 02 	lds	r24, 0x0248
     6a2:	28 1b       	sub	r18, r24
     6a4:	31 09       	sbc	r19, r1
{
  return rxBufferLength - rxBufferIndex;
}
     6a6:	c9 01       	movw	r24, r18
     6a8:	08 95       	ret

000006aa <_ZN7TwoWire4readEv>:
int TwoWire::read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     6aa:	40 91 48 02 	lds	r20, 0x0248
     6ae:	80 91 49 02 	lds	r24, 0x0249
     6b2:	48 17       	cp	r20, r24
     6b4:	18 f0       	brcs	.+6      	; 0x6bc <_ZN7TwoWire4readEv+0x12>
     6b6:	2f ef       	ldi	r18, 0xFF	; 255
     6b8:	3f ef       	ldi	r19, 0xFF	; 255
     6ba:	0a c0       	rjmp	.+20     	; 0x6d0 <_ZN7TwoWire4readEv+0x26>
    value = rxBuffer[rxBufferIndex];
     6bc:	e4 2f       	mov	r30, r20
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	e8 5d       	subi	r30, 0xD8	; 216
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	80 81       	ld	r24, Z
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
     6ca:	4f 5f       	subi	r20, 0xFF	; 255
     6cc:	40 93 48 02 	sts	0x0248, r20
  }

  return value;
}
     6d0:	c9 01       	movw	r24, r18
     6d2:	08 95       	ret

000006d4 <_ZN7TwoWire4peekEv>:
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
  
  if(rxBufferIndex < rxBufferLength){
     6d4:	e0 91 48 02 	lds	r30, 0x0248
     6d8:	80 91 49 02 	lds	r24, 0x0249
     6dc:	e8 17       	cp	r30, r24
     6de:	18 f0       	brcs	.+6      	; 0x6e6 <_ZN7TwoWire4peekEv+0x12>
     6e0:	ef ef       	ldi	r30, 0xFF	; 255
     6e2:	ff ef       	ldi	r31, 0xFF	; 255
     6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <_ZN7TwoWire4peekEv+0x1e>
    value = rxBuffer[rxBufferIndex];
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	e8 5d       	subi	r30, 0xD8	; 216
     6ea:	fd 4f       	sbci	r31, 0xFD	; 253
     6ec:	80 81       	ld	r24, Z
     6ee:	e8 2f       	mov	r30, r24
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
  }

  return value;
}
     6f2:	cf 01       	movw	r24, r30
     6f4:	08 95       	ret

000006f6 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     6f6:	08 95       	ret

000006f8 <_GLOBAL__I__ZN7TwoWire8rxBufferE>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     6f8:	10 92 71 02 	sts	0x0271, r1
     6fc:	10 92 70 02 	sts	0x0270, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     700:	88 ee       	ldi	r24, 0xE8	; 232
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	80 93 72 02 	sts	0x0272, r24
     70c:	90 93 73 02 	sts	0x0273, r25
     710:	a0 93 74 02 	sts	0x0274, r26
     714:	b0 93 75 02 	sts	0x0275, r27
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     718:	8e e9       	ldi	r24, 0x9E	; 158
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	90 93 6f 02 	sts	0x026F, r25
     720:	80 93 6e 02 	sts	0x026E, r24
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     724:	08 95       	ret

00000726 <_ZN7TwoWire5writeEPKhj>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	7c 01       	movw	r14, r24
     738:	6b 01       	movw	r12, r22
     73a:	8a 01       	movw	r16, r20
{
  if(transmitting){
     73c:	80 91 6d 02 	lds	r24, 0x026D
     740:	88 23       	and	r24, r24
     742:	a1 f0       	breq	.+40     	; 0x76c <_ZN7TwoWire5writeEPKhj+0x46>
     744:	c0 e0       	ldi	r28, 0x00	; 0
     746:	d0 e0       	ldi	r29, 0x00	; 0
     748:	0d c0       	rjmp	.+26     	; 0x764 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
      write(data[i]);
     74a:	d7 01       	movw	r26, r14
     74c:	ed 91       	ld	r30, X+
     74e:	fc 91       	ld	r31, X
     750:	d6 01       	movw	r26, r12
     752:	ac 0f       	add	r26, r28
     754:	bd 1f       	adc	r27, r29
     756:	01 90       	ld	r0, Z+
     758:	f0 81       	ld	r31, Z
     75a:	e0 2d       	mov	r30, r0
     75c:	c7 01       	movw	r24, r14
     75e:	6c 91       	ld	r22, X
     760:	09 95       	icall
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     762:	21 96       	adiw	r28, 0x01	; 1
     764:	c0 17       	cp	r28, r16
     766:	d1 07       	cpc	r29, r17
     768:	80 f3       	brcs	.-32     	; 0x74a <_ZN7TwoWire5writeEPKhj+0x24>
     76a:	04 c0       	rjmp	.+8      	; 0x774 <_ZN7TwoWire5writeEPKhj+0x4e>
      write(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     76c:	cb 01       	movw	r24, r22
     76e:	64 2f       	mov	r22, r20
     770:	0e 94 56 01 	call	0x2ac	; 0x2ac <twi_transmit>
  }
  return quantity;
}
     774:	c8 01       	movw	r24, r16
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret

00000788 <_ZN7TwoWire5writeEh>:
}

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	0f 92       	push	r0
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	69 83       	std	Y+1, r22	; 0x01
{
  if(transmitting){
     794:	80 91 6d 02 	lds	r24, 0x026D
     798:	88 23       	and	r24, r24
     79a:	a9 f0       	breq	.+42     	; 0x7c6 <_ZN7TwoWire5writeEh+0x3e>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
     79c:	80 91 6c 02 	lds	r24, 0x026C
     7a0:	80 32       	cpi	r24, 0x20	; 32
     7a2:	18 f0       	brcs	.+6      	; 0x7aa <_ZN7TwoWire5writeEh+0x22>
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	15 c0       	rjmp	.+42     	; 0x7d4 <_ZN7TwoWire5writeEh+0x4c>
//      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
     7aa:	80 91 6b 02 	lds	r24, 0x026B
     7ae:	e8 2f       	mov	r30, r24
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	e5 5b       	subi	r30, 0xB5	; 181
     7b4:	fd 4f       	sbci	r31, 0xFD	; 253
     7b6:	99 81       	ldd	r25, Y+1	; 0x01
     7b8:	90 83       	st	Z, r25
    ++txBufferIndex;
     7ba:	8f 5f       	subi	r24, 0xFF	; 255
     7bc:	80 93 6b 02 	sts	0x026B, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
     7c0:	80 93 6c 02 	sts	0x026C, r24
     7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <_ZN7TwoWire5writeEh+0x48>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 56 01 	call	0x2ac	; 0x2ac <twi_transmit>
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	30 e0       	ldi	r19, 0x00	; 0
  }
  return 1;
}
     7d4:	c9 01       	movw	r24, r18
     7d6:	0f 90       	pop	r0
     7d8:	cf 91       	pop	r28
     7da:	df 91       	pop	r29
     7dc:	08 95       	ret

000007de <_ZN7TwoWire15endTransmissionEh>:
//	the bus tenure has been properly ended with a STOP. It
//	is very possible to leave the bus in a hung state if
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
     7de:	0f 93       	push	r16
     7e0:	06 2f       	mov	r16, r22
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     7e2:	80 91 4a 02 	lds	r24, 0x024A
     7e6:	6b e4       	ldi	r22, 0x4B	; 75
     7e8:	72 e0       	ldi	r23, 0x02	; 2
     7ea:	40 91 6c 02 	lds	r20, 0x026C
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	0e 94 01 01 	call	0x202	; 0x202 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     7f4:	10 92 6b 02 	sts	0x026B, r1
  txBufferLength = 0;
     7f8:	10 92 6c 02 	sts	0x026C, r1
  // indicate that we are done transmitting
  transmitting = 0;
     7fc:	10 92 6d 02 	sts	0x026D, r1
  return ret;
}
     800:	0f 91       	pop	r16
     802:	08 95       	ret

00000804 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN7TwoWire15endTransmissionEh>
}
     80a:	08 95       	ret

0000080c <_ZN7TwoWire11requestFromEhhh>:
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
     80c:	41 32       	cpi	r20, 0x21	; 33
     80e:	08 f0       	brcs	.+2      	; 0x812 <_ZN7TwoWire11requestFromEhhh+0x6>
     810:	40 e2       	ldi	r20, 0x20	; 32
     812:	86 2f       	mov	r24, r22
     814:	68 e2       	ldi	r22, 0x28	; 40
     816:	72 e0       	ldi	r23, 0x02	; 2
     818:	0e 94 b8 00 	call	0x170	; 0x170 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
     81c:	10 92 48 02 	sts	0x0248, r1
  rxBufferLength = read;
     820:	80 93 49 02 	sts	0x0249, r24

  return read;
}
     824:	08 95       	ret

00000826 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	0e 94 06 04 	call	0x80c	; 0x80c <_ZN7TwoWire11requestFromEhhh>
}
     82c:	08 95       	ret

0000082e <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     82e:	10 92 48 02 	sts	0x0248, r1
  rxBufferLength = 0;
     832:	10 92 49 02 	sts	0x0249, r1

  txBufferIndex = 0;
     836:	10 92 6b 02 	sts	0x026B, r1
  txBufferLength = 0;
     83a:	10 92 6c 02 	sts	0x026C, r1

  twi_init();
     83e:	0e 94 24 03 	call	0x648	; 0x648 <twi_init>
}
     842:	08 95       	ret

00000844 <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
     844:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
     846:	80 91 7a 02 	lds	r24, 0x027A
     84a:	8c 30       	cpi	r24, 0x0C	; 12
     84c:	90 f4       	brcc	.+36     	; 0x872 <_ZN5ServoC1Ev+0x2e>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
     84e:	80 83       	st	Z, r24
     850:	8f 5f       	subi	r24, 0xFF	; 255
     852:	80 93 7a 02 	sts	0x027A, r24
     856:	81 50       	subi	r24, 0x01	; 1
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	fc 01       	movw	r30, r24
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	e8 0f       	add	r30, r24
     862:	f9 1f       	adc	r31, r25
     864:	e5 58       	subi	r30, 0x85	; 133
     866:	fd 4f       	sbci	r31, 0xFD	; 253
     868:	88 eb       	ldi	r24, 0xB8	; 184
     86a:	9b e0       	ldi	r25, 0x0B	; 11
     86c:	92 83       	std	Z+2, r25	; 0x02
     86e:	81 83       	std	Z+1, r24	; 0x01
     870:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	80 83       	st	Z, r24
     876:	08 95       	ret

00000878 <_ZN5Servo17writeMicrosecondsEi>:
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
     878:	fc 01       	movw	r30, r24
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
     87a:	20 81       	ld	r18, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
     87c:	2c 30       	cpi	r18, 0x0C	; 12
     87e:	08 f0       	brcs	.+2      	; 0x882 <_ZN5Servo17writeMicrosecondsEi+0xa>
     880:	41 c0       	rjmp	.+130    	; 0x904 <__stack+0x5>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
     882:	81 81       	ldd	r24, Z+1	; 0x01
     884:	99 27       	eor	r25, r25
     886:	87 fd       	sbrc	r24, 7
     888:	90 95       	com	r25
     88a:	48 e8       	ldi	r20, 0x88	; 136
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	48 1b       	sub	r20, r24
     890:	59 0b       	sbc	r21, r25
     892:	44 0f       	add	r20, r20
     894:	55 1f       	adc	r21, r21
     896:	44 0f       	add	r20, r20
     898:	55 1f       	adc	r21, r21
     89a:	64 17       	cp	r22, r20
     89c:	75 07       	cpc	r23, r21
     89e:	84 f0       	brlt	.+32     	; 0x8c0 <_ZN5Servo17writeMicrosecondsEi+0x48>
     8a0:	82 81       	ldd	r24, Z+2	; 0x02
     8a2:	99 27       	eor	r25, r25
     8a4:	87 fd       	sbrc	r24, 7
     8a6:	90 95       	com	r25
     8a8:	48 e5       	ldi	r20, 0x58	; 88
     8aa:	52 e0       	ldi	r21, 0x02	; 2
     8ac:	48 1b       	sub	r20, r24
     8ae:	59 0b       	sbc	r21, r25
     8b0:	44 0f       	add	r20, r20
     8b2:	55 1f       	adc	r21, r21
     8b4:	44 0f       	add	r20, r20
     8b6:	55 1f       	adc	r21, r21
     8b8:	64 17       	cp	r22, r20
     8ba:	75 07       	cpc	r23, r21
     8bc:	0c f4       	brge	.+2      	; 0x8c0 <_ZN5Servo17writeMicrosecondsEi+0x48>
     8be:	ab 01       	movw	r20, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
     8c0:	42 50       	subi	r20, 0x02	; 2
     8c2:	50 40       	sbci	r21, 0x00	; 0
     8c4:	ca 01       	movw	r24, r20
     8c6:	aa 27       	eor	r26, r26
     8c8:	97 fd       	sbrc	r25, 7
     8ca:	a0 95       	com	r26
     8cc:	ba 2f       	mov	r27, r26
     8ce:	74 e0       	ldi	r23, 0x04	; 4
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	aa 1f       	adc	r26, r26
     8d6:	bb 1f       	adc	r27, r27
     8d8:	7a 95       	dec	r23
     8da:	d1 f7       	brne	.-12     	; 0x8d0 <_ZN5Servo17writeMicrosecondsEi+0x58>
     8dc:	63 e0       	ldi	r22, 0x03	; 3
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	97 95       	ror	r25
     8e4:	87 95       	ror	r24
     8e6:	6a 95       	dec	r22
     8e8:	d1 f7       	brne	.-12     	; 0x8de <_ZN5Servo17writeMicrosecondsEi+0x66>

    uint8_t oldSREG = SREG;
     8ea:	4f b7       	in	r20, 0x3f	; 63
    cli();
     8ec:	f8 94       	cli
    servos[channel].ticks = value;  
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	f9 01       	movw	r30, r18
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	e2 0f       	add	r30, r18
     8f8:	f3 1f       	adc	r31, r19
     8fa:	e5 58       	subi	r30, 0x85	; 133
     8fc:	fd 4f       	sbci	r31, 0xFD	; 253
     8fe:	92 83       	std	Z+2, r25	; 0x02
     900:	81 83       	std	Z+1, r24	; 0x01
    SREG = oldSREG;   
     902:	4f bf       	out	0x3f, r20	; 63
     904:	08 95       	ret

00000906 <_ZN5Servo5writeEi>:
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
     906:	af 92       	push	r10
     908:	bf 92       	push	r11
     90a:	cf 92       	push	r12
     90c:	df 92       	push	r13
     90e:	ef 92       	push	r14
     910:	ff 92       	push	r15
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
     91c:	9b 01       	movw	r18, r22
{  
  if(value < MIN_PULSE_WIDTH)
     91e:	82 e0       	ldi	r24, 0x02	; 2
     920:	60 32       	cpi	r22, 0x20	; 32
     922:	78 07       	cpc	r23, r24
     924:	0c f0       	brlt	.+2      	; 0x928 <_ZN5Servo5writeEi+0x22>
     926:	48 c0       	rjmp	.+144    	; 0x9b8 <_ZN5Servo5writeEi+0xb2>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
     928:	77 ff       	sbrs	r23, 7
     92a:	03 c0       	rjmp	.+6      	; 0x932 <_ZN5Servo5writeEi+0x2c>
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	05 c0       	rjmp	.+10     	; 0x93c <_ZN5Servo5writeEi+0x36>
    if(value > 180) value = 180;
     932:	65 3b       	cpi	r22, 0xB5	; 181
     934:	71 05       	cpc	r23, r1
     936:	14 f0       	brlt	.+4      	; 0x93c <_ZN5Servo5writeEi+0x36>
     938:	24 eb       	ldi	r18, 0xB4	; 180
     93a:	30 e0       	ldi	r19, 0x00	; 0
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
     93c:	00 d0       	rcall	.+0      	; 0x93e <_ZN5Servo5writeEi+0x38>
     93e:	00 d0       	rcall	.+0      	; 0x940 <_ZN5Servo5writeEi+0x3a>
     940:	b9 01       	movw	r22, r18
     942:	88 27       	eor	r24, r24
     944:	77 fd       	sbrc	r23, 7
     946:	80 95       	com	r24
     948:	98 2f       	mov	r25, r24
     94a:	29 81       	ldd	r18, Y+1	; 0x01
     94c:	33 27       	eor	r19, r19
     94e:	27 fd       	sbrc	r18, 7
     950:	30 95       	com	r19
     952:	e8 e8       	ldi	r30, 0x88	; 136
     954:	ae 2e       	mov	r10, r30
     956:	b1 2c       	mov	r11, r1
     958:	a2 1a       	sub	r10, r18
     95a:	b3 0a       	sbc	r11, r19
     95c:	aa 0c       	add	r10, r10
     95e:	bb 1c       	adc	r11, r11
     960:	aa 0c       	add	r10, r10
     962:	bb 1c       	adc	r11, r11
     964:	cc 24       	eor	r12, r12
     966:	b7 fc       	sbrc	r11, 7
     968:	c0 94       	com	r12
     96a:	dc 2c       	mov	r13, r12
     96c:	ea 81       	ldd	r30, Y+2	; 0x02
     96e:	ff 27       	eor	r31, r31
     970:	e7 fd       	sbrc	r30, 7
     972:	f0 95       	com	r31
     974:	28 e5       	ldi	r18, 0x58	; 88
     976:	32 e0       	ldi	r19, 0x02	; 2
     978:	2e 1b       	sub	r18, r30
     97a:	3f 0b       	sbc	r19, r31
     97c:	22 0f       	add	r18, r18
     97e:	33 1f       	adc	r19, r19
     980:	22 0f       	add	r18, r18
     982:	33 1f       	adc	r19, r19
     984:	44 27       	eor	r20, r20
     986:	37 fd       	sbrc	r19, 7
     988:	40 95       	com	r20
     98a:	54 2f       	mov	r21, r20
     98c:	ed b7       	in	r30, 0x3d	; 61
     98e:	fe b7       	in	r31, 0x3e	; 62
     990:	21 83       	std	Z+1, r18	; 0x01
     992:	32 83       	std	Z+2, r19	; 0x02
     994:	43 83       	std	Z+3, r20	; 0x03
     996:	54 83       	std	Z+4, r21	; 0x04
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	04 eb       	ldi	r16, 0xB4	; 180
     9a2:	e0 2e       	mov	r14, r16
     9a4:	f1 2c       	mov	r15, r1
     9a6:	01 2d       	mov	r16, r1
     9a8:	11 2d       	mov	r17, r1
     9aa:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <_Z3maplllll>
     9ae:	9b 01       	movw	r18, r22
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
     9b8:	ce 01       	movw	r24, r28
     9ba:	b9 01       	movw	r22, r18
     9bc:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN5Servo17writeMicrosecondsEi>
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	08 95       	ret

000009d6 <_ZN5Servo6attachEiii>:
uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
     9d6:	cf 92       	push	r12
     9d8:	df 92       	push	r13
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ec 01       	movw	r28, r24
     9e6:	16 2f       	mov	r17, r22
     9e8:	7a 01       	movw	r14, r20
     9ea:	69 01       	movw	r12, r18
{
  if(this->servoIndex < MAX_SERVOS ) {
     9ec:	88 81       	ld	r24, Y
     9ee:	8c 30       	cpi	r24, 0x0C	; 12
     9f0:	08 f0       	brcs	.+2      	; 0x9f4 <_ZN5Servo6attachEiii+0x1e>
     9f2:	64 c0       	rjmp	.+200    	; 0xabc <_ZN5Servo6attachEiii+0xe6>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
     9f4:	86 2f       	mov	r24, r22
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>
    servos[this->servoIndex].Pin.nbr = pin;  
     9fc:	88 81       	ld	r24, Y
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e8 0f       	add	r30, r24
     a08:	f9 1f       	adc	r31, r25
     a0a:	e5 58       	subi	r30, 0x85	; 133
     a0c:	fd 4f       	sbci	r31, 0xFD	; 253
     a0e:	1f 73       	andi	r17, 0x3F	; 63
     a10:	80 81       	ld	r24, Z
     a12:	80 7c       	andi	r24, 0xC0	; 192
     a14:	81 2b       	or	r24, r17
     a16:	80 83       	st	Z, r24
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
     a18:	80 e2       	ldi	r24, 0x20	; 32
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	8e 19       	sub	r24, r14
     a1e:	9f 09       	sbc	r25, r15
     a20:	64 e0       	ldi	r22, 0x04	; 4
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     a28:	69 83       	std	Y+1, r22	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
     a2a:	80 e6       	ldi	r24, 0x60	; 96
     a2c:	99 e0       	ldi	r25, 0x09	; 9
     a2e:	8c 19       	sub	r24, r12
     a30:	9d 09       	sbc	r25, r13
     a32:	64 e0       	ldi	r22, 0x04	; 4
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     a3a:	6a 83       	std	Y+2, r22	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
     a3c:	a8 81       	ld	r26, Y
     a3e:	8a 2f       	mov	r24, r26
     a40:	6c e0       	ldi	r22, 0x0C	; 12
     a42:	0e 94 b8 14 	call	0x2970	; 0x2970 <__udivmodqi4>
     a46:	68 2f       	mov	r22, r24
     a48:	70 e0       	ldi	r23, 0x00	; 0

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
     a4a:	ab 01       	movw	r20, r22
     a4c:	44 0f       	add	r20, r20
     a4e:	55 1f       	adc	r21, r21
     a50:	46 0f       	add	r20, r22
     a52:	57 1f       	adc	r21, r23
     a54:	44 0f       	add	r20, r20
     a56:	55 1f       	adc	r21, r21
     a58:	44 0f       	add	r20, r20
     a5a:	55 1f       	adc	r21, r21
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	c9 01       	movw	r24, r18
     a62:	84 0f       	add	r24, r20
     a64:	95 1f       	adc	r25, r21
     a66:	fc 01       	movw	r30, r24
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	e8 0f       	add	r30, r24
     a6e:	f9 1f       	adc	r31, r25
     a70:	e5 58       	subi	r30, 0x85	; 133
     a72:	fd 4f       	sbci	r31, 0xFD	; 253
     a74:	80 81       	ld	r24, Z
     a76:	86 fd       	sbrc	r24, 6
     a78:	15 c0       	rjmp	.+42     	; 0xaa4 <_ZN5Servo6attachEiii+0xce>
     a7a:	2f 5f       	subi	r18, 0xFF	; 255
     a7c:	3f 4f       	sbci	r19, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
     a7e:	2c 30       	cpi	r18, 0x0C	; 12
     a80:	31 05       	cpc	r19, r1
     a82:	71 f7       	brne	.-36     	; 0xa60 <_ZN5Servo6attachEiii+0x8a>
     a84:	24 c0       	rjmp	.+72     	; 0xace <_ZN5Servo6attachEiii+0xf8>

static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    TCCR1A = 0;             // normal counting mode 
     a86:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
     a90:	10 92 85 00 	sts	0x0085, r1
     a94:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
     a98:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
     a9a:	80 91 6f 00 	lds	r24, 0x006F
     a9e:	82 60       	ori	r24, 0x02	; 2
     aa0:	80 93 6f 00 	sts	0x006F, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
     aa4:	8a 2f       	mov	r24, r26
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	e8 0f       	add	r30, r24
     ab0:	f9 1f       	adc	r31, r25
     ab2:	e5 58       	subi	r30, 0x85	; 133
     ab4:	fd 4f       	sbci	r31, 0xFD	; 253
     ab6:	80 81       	ld	r24, Z
     ab8:	80 64       	ori	r24, 0x40	; 64
     aba:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
     abc:	88 81       	ld	r24, Y
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	08 95       	ret


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
     ace:	67 2b       	or	r22, r23
     ad0:	d1 f2       	breq	.-76     	; 0xa86 <_ZN5Servo6attachEiii+0xb0>
     ad2:	e8 cf       	rjmp	.-48     	; 0xaa4 <_ZN5Servo6attachEiii+0xce>

00000ad4 <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
     ad4:	40 e2       	ldi	r20, 0x20	; 32
     ad6:	52 e0       	ldi	r21, 0x02	; 2
     ad8:	20 e6       	ldi	r18, 0x60	; 96
     ada:	39 e0       	ldi	r19, 0x09	; 9
     adc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <_ZN5Servo6attachEiii>
}
     ae0:	08 95       	ret

00000ae2 <__vector_11>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
     ae2:	1f 92       	push	r1
     ae4:	0f 92       	push	r0
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	0f 92       	push	r0
     aea:	11 24       	eor	r1, r1
     aec:	2f 93       	push	r18
     aee:	3f 93       	push	r19
     af0:	4f 93       	push	r20
     af2:	5f 93       	push	r21
     af4:	6f 93       	push	r22
     af6:	7f 93       	push	r23
     af8:	8f 93       	push	r24
     afa:	9f 93       	push	r25
     afc:	af 93       	push	r26
     afe:	bf 93       	push	r27
     b00:	ef 93       	push	r30
     b02:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
     b04:	80 91 9f 02 	lds	r24, 0x029F
     b08:	87 ff       	sbrs	r24, 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__vector_11+0x34>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
     b0c:	10 92 85 00 	sts	0x0085, r1
     b10:	10 92 84 00 	sts	0x0084, r1
     b14:	2b c0       	rjmp	.+86     	; 0xb6c <__vector_11+0x8a>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
     b16:	20 91 9f 02 	lds	r18, 0x029F
     b1a:	33 27       	eor	r19, r19
     b1c:	27 fd       	sbrc	r18, 7
     b1e:	30 95       	com	r19
     b20:	80 91 7a 02 	lds	r24, 0x027A
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	28 17       	cp	r18, r24
     b28:	39 07       	cpc	r19, r25
     b2a:	04 f5       	brge	.+64     	; 0xb6c <__vector_11+0x8a>
     b2c:	80 91 9f 02 	lds	r24, 0x029F
     b30:	99 27       	eor	r25, r25
     b32:	87 fd       	sbrc	r24, 7
     b34:	90 95       	com	r25
     b36:	fc 01       	movw	r30, r24
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e8 0f       	add	r30, r24
     b3e:	f9 1f       	adc	r31, r25
     b40:	e5 58       	subi	r30, 0x85	; 133
     b42:	fd 4f       	sbci	r31, 0xFD	; 253
     b44:	80 81       	ld	r24, Z
     b46:	86 ff       	sbrs	r24, 6
     b48:	11 c0       	rjmp	.+34     	; 0xb6c <__vector_11+0x8a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
     b4a:	80 91 9f 02 	lds	r24, 0x029F
     b4e:	99 27       	eor	r25, r25
     b50:	87 fd       	sbrc	r24, 7
     b52:	90 95       	com	r25
     b54:	fc 01       	movw	r30, r24
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e8 0f       	add	r30, r24
     b5c:	f9 1f       	adc	r31, r25
     b5e:	e5 58       	subi	r30, 0x85	; 133
     b60:	fd 4f       	sbci	r31, 0xFD	; 253
     b62:	80 81       	ld	r24, Z
     b64:	8f 73       	andi	r24, 0x3F	; 63
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
     b6c:	80 91 9f 02 	lds	r24, 0x029F
     b70:	8f 5f       	subi	r24, 0xFF	; 255
     b72:	80 93 9f 02 	sts	0x029F, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
     b76:	20 91 9f 02 	lds	r18, 0x029F
     b7a:	33 27       	eor	r19, r19
     b7c:	27 fd       	sbrc	r18, 7
     b7e:	30 95       	com	r19
     b80:	80 91 7a 02 	lds	r24, 0x027A
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	28 17       	cp	r18, r24
     b88:	39 07       	cpc	r19, r25
     b8a:	0c f0       	brlt	.+2      	; 0xb8e <__vector_11+0xac>
     b8c:	4e c0       	rjmp	.+156    	; 0xc2a <__vector_11+0x148>
     b8e:	80 91 9f 02 	lds	r24, 0x029F
     b92:	8c 30       	cpi	r24, 0x0C	; 12
     b94:	0c f0       	brlt	.+2      	; 0xb98 <__vector_11+0xb6>
     b96:	49 c0       	rjmp	.+146    	; 0xc2a <__vector_11+0x148>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
     b98:	20 91 84 00 	lds	r18, 0x0084
     b9c:	30 91 85 00 	lds	r19, 0x0085
     ba0:	80 91 9f 02 	lds	r24, 0x029F
     ba4:	99 27       	eor	r25, r25
     ba6:	87 fd       	sbrc	r24, 7
     ba8:	90 95       	com	r25
     baa:	fc 01       	movw	r30, r24
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	e8 0f       	add	r30, r24
     bb2:	f9 1f       	adc	r31, r25
     bb4:	e5 58       	subi	r30, 0x85	; 133
     bb6:	fd 4f       	sbci	r31, 0xFD	; 253
     bb8:	81 81       	ldd	r24, Z+1	; 0x01
     bba:	92 81       	ldd	r25, Z+2	; 0x02
     bbc:	28 0f       	add	r18, r24
     bbe:	39 1f       	adc	r19, r25
     bc0:	30 93 89 00 	sts	0x0089, r19
     bc4:	20 93 88 00 	sts	0x0088, r18
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
     bc8:	80 91 9f 02 	lds	r24, 0x029F
     bcc:	99 27       	eor	r25, r25
     bce:	87 fd       	sbrc	r24, 7
     bd0:	90 95       	com	r25
     bd2:	fc 01       	movw	r30, r24
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	e8 0f       	add	r30, r24
     bda:	f9 1f       	adc	r31, r25
     bdc:	e5 58       	subi	r30, 0x85	; 133
     bde:	fd 4f       	sbci	r31, 0xFD	; 253
     be0:	80 81       	ld	r24, Z
     be2:	86 ff       	sbrs	r24, 6
     be4:	2b c0       	rjmp	.+86     	; 0xc3c <__vector_11+0x15a>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
     be6:	80 91 9f 02 	lds	r24, 0x029F
     bea:	99 27       	eor	r25, r25
     bec:	87 fd       	sbrc	r24, 7
     bee:	90 95       	com	r25
     bf0:	fc 01       	movw	r30, r24
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e8 0f       	add	r30, r24
     bf8:	f9 1f       	adc	r31, r25
     bfa:	e5 58       	subi	r30, 0x85	; 133
     bfc:	fd 4f       	sbci	r31, 0xFD	; 253
     bfe:	80 81       	ld	r24, Z
     c00:	8f 73       	andi	r24, 0x3F	; 63
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
     c08:	19 c0       	rjmp	.+50     	; 0xc3c <__vector_11+0x15a>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
     c0a:	80 e4       	ldi	r24, 0x40	; 64
     c0c:	9c e9       	ldi	r25, 0x9C	; 156
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <__vector_11+0x138>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
     c10:	80 91 84 00 	lds	r24, 0x0084
     c14:	90 91 85 00 	lds	r25, 0x0085
     c18:	04 96       	adiw	r24, 0x04	; 4
     c1a:	90 93 89 00 	sts	0x0089, r25
     c1e:	80 93 88 00 	sts	0x0088, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
     c22:	8f ef       	ldi	r24, 0xFF	; 255
     c24:	80 93 9f 02 	sts	0x029F, r24
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <__vector_11+0x15a>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
     c2a:	80 91 84 00 	lds	r24, 0x0084
     c2e:	90 91 85 00 	lds	r25, 0x0085
     c32:	04 96       	adiw	r24, 0x04	; 4
     c34:	80 54       	subi	r24, 0x40	; 64
     c36:	9c 49       	sbci	r25, 0x9C	; 156
     c38:	40 f3       	brcs	.-48     	; 0xc0a <__vector_11+0x128>
     c3a:	ea cf       	rjmp	.-44     	; 0xc10 <__vector_11+0x12e>
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <_Z14updateWaypointv>:
      delay(200);
      go();
   }
}
// ***********************************
void updateWaypoint(){
     c5e:	4f 92       	push	r4
     c60:	5f 92       	push	r5
     c62:	6f 92       	push	r6
     c64:	7f 92       	push	r7
     c66:	8f 92       	push	r8
     c68:	9f 92       	push	r9
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
  double deltaN = currentWaypoint[N] - currentPosition[N];
     c7e:	c0 91 a4 02 	lds	r28, 0x02A4
     c82:	d0 91 a5 02 	lds	r29, 0x02A5
     c86:	fe 01       	movw	r30, r28
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	56 ea       	ldi	r21, 0xA6	; 166
     c92:	45 2e       	mov	r4, r21
     c94:	52 e0       	ldi	r21, 0x02	; 2
     c96:	55 2e       	mov	r5, r21
     c98:	4e 0e       	add	r4, r30
     c9a:	5f 1e       	adc	r5, r31
     c9c:	e2 55       	subi	r30, 0x52	; 82
     c9e:	fd 4f       	sbci	r31, 0xFD	; 253
     ca0:	d2 01       	movw	r26, r4
     ca2:	6d 91       	ld	r22, X+
     ca4:	7d 91       	ld	r23, X+
     ca6:	8d 91       	ld	r24, X+
     ca8:	9c 91       	ld	r25, X
     caa:	20 81       	ld	r18, Z
     cac:	31 81       	ldd	r19, Z+1	; 0x01
     cae:	42 81       	ldd	r20, Z+2	; 0x02
     cb0:	53 81       	ldd	r21, Z+3	; 0x03
     cb2:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
     cb6:	5b 01       	movw	r10, r22
     cb8:	6c 01       	movw	r12, r24
  double deltaE = currentWaypoint[E] - currentPosition[E];
     cba:	80 90 7a 01 	lds	r8, 0x017A
     cbe:	90 90 7b 01 	lds	r9, 0x017B
     cc2:	f4 01       	movw	r30, r8
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	36 ea       	ldi	r19, 0xA6	; 166
     cce:	63 2e       	mov	r6, r19
     cd0:	32 e0       	ldi	r19, 0x02	; 2
     cd2:	73 2e       	mov	r7, r19
     cd4:	6e 0e       	add	r6, r30
     cd6:	7f 1e       	adc	r7, r31
     cd8:	e2 55       	subi	r30, 0x52	; 82
     cda:	fd 4f       	sbci	r31, 0xFD	; 253
     cdc:	d3 01       	movw	r26, r6
     cde:	6d 91       	ld	r22, X+
     ce0:	7d 91       	ld	r23, X+
     ce2:	8d 91       	ld	r24, X+
     ce4:	9c 91       	ld	r25, X
     ce6:	20 81       	ld	r18, Z
     ce8:	31 81       	ldd	r19, Z+1	; 0x01
     cea:	42 81       	ldd	r20, Z+2	; 0x02
     cec:	53 81       	ldd	r21, Z+3	; 0x03
     cee:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
     cf2:	7b 01       	movw	r14, r22
     cf4:	8c 01       	movw	r16, r24

  double distance2 = deltaN*deltaN + deltaE*deltaE;

  if(distance2 < CLOSEENOUGH) {
     cf6:	c6 01       	movw	r24, r12
     cf8:	b5 01       	movw	r22, r10
     cfa:	a6 01       	movw	r20, r12
     cfc:	95 01       	movw	r18, r10
     cfe:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     d02:	5b 01       	movw	r10, r22
     d04:	6c 01       	movw	r12, r24
     d06:	c8 01       	movw	r24, r16
     d08:	b7 01       	movw	r22, r14
     d0a:	a8 01       	movw	r20, r16
     d0c:	97 01       	movw	r18, r14
     d0e:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     d12:	9b 01       	movw	r18, r22
     d14:	ac 01       	movw	r20, r24
     d16:	c6 01       	movw	r24, r12
     d18:	b5 01       	movw	r22, r10
     d1a:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3>
     d1e:	20 91 7c 01 	lds	r18, 0x017C
     d22:	30 91 7d 01 	lds	r19, 0x017D
     d26:	40 91 7e 01 	lds	r20, 0x017E
     d2a:	50 91 7f 01 	lds	r21, 0x017F
     d2e:	0e 94 48 12 	call	0x2490	; 0x2490 <__cmpsf2>
     d32:	88 23       	and	r24, r24
     d34:	a4 f5       	brge	.+104    	; 0xd9e <_Z14updateWaypointv+0x140>

    waypointIterator = ++waypointIterator % numWaypoints;
     d36:	80 91 a0 02 	lds	r24, 0x02A0
     d3a:	90 91 a1 02 	lds	r25, 0x02A1
     d3e:	60 91 78 01 	lds	r22, 0x0178
     d42:	70 91 79 01 	lds	r23, 0x0179
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     d4c:	fc 01       	movw	r30, r24
     d4e:	90 93 a1 02 	sts	0x02A1, r25
     d52:	80 93 a0 02 	sts	0x02A0, r24

    currentWaypoint[N] = waypoints[waypointIterator][N];
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ce 0f       	add	r28, r30
     d5c:	df 1f       	adc	r29, r31
     d5e:	cc 0f       	add	r28, r28
     d60:	dd 1f       	adc	r29, r29
     d62:	cc 0f       	add	r28, r28
     d64:	dd 1f       	adc	r29, r29
     d66:	c8 5a       	subi	r28, 0xA8	; 168
     d68:	de 4f       	sbci	r29, 0xFE	; 254
     d6a:	88 81       	ld	r24, Y
     d6c:	99 81       	ldd	r25, Y+1	; 0x01
     d6e:	aa 81       	ldd	r26, Y+2	; 0x02
     d70:	bb 81       	ldd	r27, Y+3	; 0x03
     d72:	e2 01       	movw	r28, r4
     d74:	88 83       	st	Y, r24
     d76:	99 83       	std	Y+1, r25	; 0x01
     d78:	aa 83       	std	Y+2, r26	; 0x02
     d7a:	bb 83       	std	Y+3, r27	; 0x03
    currentWaypoint[E] = waypoints[waypointIterator][E];
     d7c:	e8 0d       	add	r30, r8
     d7e:	f9 1d       	adc	r31, r9
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	ee 0f       	add	r30, r30
     d86:	ff 1f       	adc	r31, r31
     d88:	e8 5a       	subi	r30, 0xA8	; 168
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	80 81       	ld	r24, Z
     d8e:	91 81       	ldd	r25, Z+1	; 0x01
     d90:	a2 81       	ldd	r26, Z+2	; 0x02
     d92:	b3 81       	ldd	r27, Z+3	; 0x03
     d94:	f3 01       	movw	r30, r6
     d96:	80 83       	st	Z, r24
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	a2 83       	std	Z+2, r26	; 0x02
     d9c:	b3 83       	std	Z+3, r27	; 0x03
  }


}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	7f 90       	pop	r7
     db8:	6f 90       	pop	r6
     dba:	5f 90       	pop	r5
     dbc:	4f 90       	pop	r4
     dbe:	08 95       	ret

00000dc0 <_GLOBAL__I_waypoints>:
double currentPosition[2] = {0, 0};
double CLOSEENOUGH = 10;
double DISTANCEPERROTATION = 9.5;
int DIRECTION = 1;

Servo myservo;  // create servo object to control a servo
     dc0:	86 eb       	ldi	r24, 0xB6	; 182
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	0e 94 22 04 	call	0x844	; 0x844 <_ZN5ServoC1Ev>
       Serial.print(currentWaypoint[E]);
     Serial.println();


      Serial.println();
}
     dc8:	08 95       	ret

00000dca <_Z21updateCurrentPositionv>:
       updateCurrentPosition();
    }
}

// ***********************************
void updateCurrentPosition(){
     dca:	2f 92       	push	r2
     dcc:	3f 92       	push	r3
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
  float x = sin(heading/180.0*3.1415926);
     dea:	60 91 ba 02 	lds	r22, 0x02BA
     dee:	70 91 bb 02 	lds	r23, 0x02BB
     df2:	80 91 bc 02 	lds	r24, 0x02BC
     df6:	90 91 bd 02 	lds	r25, 0x02BD
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	44 e3       	ldi	r20, 0x34	; 52
     e00:	53 e4       	ldi	r21, 0x43	; 67
     e02:	0e 94 4f 12 	call	0x249e	; 0x249e <__divsf3>
     e06:	2a ed       	ldi	r18, 0xDA	; 218
     e08:	3f e0       	ldi	r19, 0x0F	; 15
     e0a:	49 e4       	ldi	r20, 0x49	; 73
     e0c:	50 e4       	ldi	r21, 0x40	; 64
     e0e:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     e12:	7b 01       	movw	r14, r22
     e14:	8c 01       	movw	r16, r24
     e16:	c8 01       	movw	r24, r16
     e18:	0e 94 6f 14 	call	0x28de	; 0x28de <sin>
     e1c:	3b 01       	movw	r6, r22
     e1e:	4c 01       	movw	r8, r24
  float y = cos(heading/180.0*3.1415926);
     e20:	b7 01       	movw	r22, r14
     e22:	c8 01       	movw	r24, r16
     e24:	0e 94 4c 12 	call	0x2498	; 0x2498 <cos>
     e28:	5b 01       	movw	r10, r22
     e2a:	6c 01       	movw	r12, r24
  x = x*DISTANCEPERROTATION * DIRECTION;
     e2c:	e0 90 80 01 	lds	r14, 0x0180
     e30:	f0 90 81 01 	lds	r15, 0x0181
     e34:	00 91 82 01 	lds	r16, 0x0182
     e38:	10 91 83 01 	lds	r17, 0x0183
     e3c:	c4 01       	movw	r24, r8
     e3e:	b3 01       	movw	r22, r6
     e40:	a8 01       	movw	r20, r16
     e42:	97 01       	movw	r18, r14
     e44:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     e48:	3b 01       	movw	r6, r22
     e4a:	4c 01       	movw	r8, r24
     e4c:	60 91 84 01 	lds	r22, 0x0184
     e50:	70 91 85 01 	lds	r23, 0x0185
     e54:	88 27       	eor	r24, r24
     e56:	77 fd       	sbrc	r23, 7
     e58:	80 95       	com	r24
     e5a:	98 2f       	mov	r25, r24
     e5c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
     e60:	1b 01       	movw	r2, r22
     e62:	2c 01       	movw	r4, r24
  y = y*DISTANCEPERROTATION * DIRECTION;
     e64:	c6 01       	movw	r24, r12
     e66:	b5 01       	movw	r22, r10
     e68:	a8 01       	movw	r20, r16
     e6a:	97 01       	movw	r18, r14
     e6c:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     e70:	6b 01       	movw	r12, r22
     e72:	7c 01       	movw	r14, r24
  currentPosition[E] = currentPosition[E] + x;
     e74:	00 91 7a 01 	lds	r16, 0x017A
     e78:	10 91 7b 01 	lds	r17, 0x017B
     e7c:	fe ea       	ldi	r31, 0xAE	; 174
     e7e:	af 2e       	mov	r10, r31
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	bf 2e       	mov	r11, r31
     e84:	00 0f       	add	r16, r16
     e86:	11 1f       	adc	r17, r17
     e88:	00 0f       	add	r16, r16
     e8a:	11 1f       	adc	r17, r17
     e8c:	0a 0d       	add	r16, r10
     e8e:	1b 1d       	adc	r17, r11
     e90:	c4 01       	movw	r24, r8
     e92:	b3 01       	movw	r22, r6
     e94:	a2 01       	movw	r20, r4
     e96:	91 01       	movw	r18, r2
     e98:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	f8 01       	movw	r30, r16
     ea2:	60 81       	ld	r22, Z
     ea4:	71 81       	ldd	r23, Z+1	; 0x01
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3>
     eae:	f8 01       	movw	r30, r16
     eb0:	60 83       	st	Z, r22
     eb2:	71 83       	std	Z+1, r23	; 0x01
     eb4:	82 83       	std	Z+2, r24	; 0x02
     eb6:	93 83       	std	Z+3, r25	; 0x03
  currentPosition[N] = currentPosition[N] + y;
     eb8:	00 91 a4 02 	lds	r16, 0x02A4
     ebc:	10 91 a5 02 	lds	r17, 0x02A5
     ec0:	00 0f       	add	r16, r16
     ec2:	11 1f       	adc	r17, r17
     ec4:	00 0f       	add	r16, r16
     ec6:	11 1f       	adc	r17, r17
     ec8:	0a 0d       	add	r16, r10
     eca:	1b 1d       	adc	r17, r11
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
     ed0:	a2 01       	movw	r20, r4
     ed2:	91 01       	movw	r18, r2
     ed4:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     ed8:	9b 01       	movw	r18, r22
     eda:	ac 01       	movw	r20, r24
     edc:	f8 01       	movw	r30, r16
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3>
     eea:	f8 01       	movw	r30, r16
     eec:	60 83       	st	Z, r22
     eee:	71 83       	std	Z+1, r23	; 0x01
     ef0:	82 83       	std	Z+2, r24	; 0x02
     ef2:	93 83       	std	Z+3, r25	; 0x03
}
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	9f 90       	pop	r9
     f06:	8f 90       	pop	r8
     f08:	7f 90       	pop	r7
     f0a:	6f 90       	pop	r6
     f0c:	5f 90       	pop	r5
     f0e:	4f 90       	pop	r4
     f10:	3f 90       	pop	r3
     f12:	2f 90       	pop	r2
     f14:	08 95       	ret

00000f16 <_Z14updatePositionv>:
    return val;
  }
    return 0.0;
  }
// ***********************************
void updatePosition(){
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
   int val=  analogRead(ODOMETER_PIN);
     f1a:	80 91 90 01 	lds	r24, 0x0190
     f1e:	0e 94 cc 10 	call	0x2198	; 0x2198 <analogRead>
     f22:	ec 01       	movw	r28, r24
   if(odoState && (val > 110)){
     f24:	80 91 98 01 	lds	r24, 0x0198
     f28:	88 23       	and	r24, r24
     f2a:	d1 f0       	breq	.+52     	; 0xf60 <_Z14updatePositionv+0x4a>
     f2c:	cf 36       	cpi	r28, 0x6F	; 111
     f2e:	d1 05       	cpc	r29, r1
     f30:	bc f0       	brlt	.+46     	; 0xf60 <_Z14updatePositionv+0x4a>
     odoCount ++;
     f32:	80 91 be 02 	lds	r24, 0x02BE
     f36:	90 91 bf 02 	lds	r25, 0x02BF
     f3a:	a0 91 c0 02 	lds	r26, 0x02C0
     f3e:	b0 91 c1 02 	lds	r27, 0x02C1
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	a1 1d       	adc	r26, r1
     f46:	b1 1d       	adc	r27, r1
     f48:	80 93 be 02 	sts	0x02BE, r24
     f4c:	90 93 bf 02 	sts	0x02BF, r25
     f50:	a0 93 c0 02 	sts	0x02C0, r26
     f54:	b0 93 c1 02 	sts	0x02C1, r27
     odoState = !odoState;
     f58:	10 92 98 01 	sts	0x0198, r1
      updateCurrentPosition();
     f5c:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z21updateCurrentPositionv>
   }
    if(!odoState && (val < 85)){
     f60:	80 91 98 01 	lds	r24, 0x0198
     f64:	88 23       	and	r24, r24
     f66:	d9 f4       	brne	.+54     	; 0xf9e <_Z14updatePositionv+0x88>
     f68:	c5 35       	cpi	r28, 0x55	; 85
     f6a:	d1 05       	cpc	r29, r1
     f6c:	c4 f4       	brge	.+48     	; 0xf9e <_Z14updatePositionv+0x88>
      odoCount ++;
     f6e:	80 91 be 02 	lds	r24, 0x02BE
     f72:	90 91 bf 02 	lds	r25, 0x02BF
     f76:	a0 91 c0 02 	lds	r26, 0x02C0
     f7a:	b0 91 c1 02 	lds	r27, 0x02C1
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	a1 1d       	adc	r26, r1
     f82:	b1 1d       	adc	r27, r1
     f84:	80 93 be 02 	sts	0x02BE, r24
     f88:	90 93 bf 02 	sts	0x02BF, r25
     f8c:	a0 93 c0 02 	sts	0x02C0, r26
     f90:	b0 93 c1 02 	sts	0x02C1, r27
      odoState = !odoState;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	80 93 98 01 	sts	0x0198, r24
       updateCurrentPosition();
     f9a:	0e 94 e5 06 	call	0xdca	; 0xdca <_Z21updateCurrentPositionv>
    }
}
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <_Z8readProxv>:
    return val;
}


// ***********************************
int readProx(){
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
    int val=  analogRead(PROXIMITY_PIN);
     fb4:	80 91 92 01 	lds	r24, 0x0192
     fb8:	0e 94 cc 10 	call	0x2198	; 0x2198 <analogRead>
     fbc:	7c 01       	movw	r14, r24
    prox = (6.0*prox/10.0) + (4.0*val/10.0);
     fbe:	60 91 a2 02 	lds	r22, 0x02A2
     fc2:	70 91 a3 02 	lds	r23, 0x02A3
     fc6:	88 27       	eor	r24, r24
     fc8:	77 fd       	sbrc	r23, 7
     fca:	80 95       	com	r24
     fcc:	98 2f       	mov	r25, r24
     fce:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 ec       	ldi	r20, 0xC0	; 192
     fd8:	50 e4       	ldi	r21, 0x40	; 64
     fda:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 4f 12 	call	0x249e	; 0x249e <__divsf3>
     fea:	5b 01       	movw	r10, r22
     fec:	6c 01       	movw	r12, r24
     fee:	00 27       	eor	r16, r16
     ff0:	f7 fc       	sbrc	r15, 7
     ff2:	00 95       	com	r16
     ff4:	10 2f       	mov	r17, r16
     ff6:	c8 01       	movw	r24, r16
     ff8:	b7 01       	movw	r22, r14
     ffa:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	50 e4       	ldi	r21, 0x40	; 64
    1006:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e2       	ldi	r20, 0x20	; 32
    1010:	51 e4       	ldi	r21, 0x41	; 65
    1012:	0e 94 4f 12 	call	0x249e	; 0x249e <__divsf3>
    1016:	9b 01       	movw	r18, r22
    1018:	ac 01       	movw	r20, r24
    101a:	c6 01       	movw	r24, r12
    101c:	b5 01       	movw	r22, r10
    101e:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3>
    1022:	0e 94 b7 12 	call	0x256e	; 0x256e <__fixsfsi>
    1026:	9b 01       	movw	r18, r22
    1028:	ac 01       	movw	r20, r24
    102a:	60 93 a2 02 	sts	0x02A2, r22
    102e:	30 93 a3 02 	sts	0x02A3, r19
      return prox;
}
    1032:	cb 01       	movw	r24, r22
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	08 95       	ret

00001046 <_Z10printStatev>:
  currentPosition[E] = currentPosition[E] + x;
  currentPosition[N] = currentPosition[N] + y;
}

// ***********************************
void printState(){
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17

       Serial.print("prox: ");
    1052:	04 e5       	ldi	r16, 0x54	; 84
    1054:	13 e0       	ldi	r17, 0x03	; 3
    1056:	c8 01       	movw	r24, r16
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	71 e0       	ldi	r23, 0x01	; 1
    105c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
     Serial.println(readProx());
    1060:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_Z8readProxv>
    1064:	bc 01       	movw	r22, r24
    1066:	c8 01       	movw	r24, r16
    1068:	4a e0       	ldi	r20, 0x0A	; 10
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN5Print7printlnEii>
//     Serial.print("  ");
//     Serial.println(readOdo());
     Serial.print("Current heading: ");
    1070:	c8 01       	movw	r24, r16
    1072:	67 e0       	ldi	r22, 0x07	; 7
    1074:	71 e0       	ldi	r23, 0x01	; 1
    1076:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
     Serial.print(heading);
    107a:	40 91 ba 02 	lds	r20, 0x02BA
    107e:	50 91 bb 02 	lds	r21, 0x02BB
    1082:	60 91 bc 02 	lds	r22, 0x02BC
    1086:	70 91 bd 02 	lds	r23, 0x02BD
    108a:	c8 01       	movw	r24, r16
    108c:	22 e0       	ldi	r18, 0x02	; 2
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEdi>
        Serial.print("  headingToWaypoint: ");
    1094:	c8 01       	movw	r24, r16
    1096:	69 e1       	ldi	r22, 0x19	; 25
    1098:	71 e0       	ldi	r23, 0x01	; 1
    109a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
     Serial.print(headingToWaypoint);
    109e:	40 91 c2 02 	lds	r20, 0x02C2
    10a2:	50 91 c3 02 	lds	r21, 0x02C3
    10a6:	60 91 c4 02 	lds	r22, 0x02C4
    10aa:	70 91 c5 02 	lds	r23, 0x02C5
    10ae:	c8 01       	movw	r24, r16
    10b0:	22 e0       	ldi	r18, 0x02	; 2
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEdi>
     Serial.println();
    10b8:	c8 01       	movw	r24, r16
    10ba:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print7printlnEv>
      Serial.println();
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print7printlnEv>
      Serial.print("currentPosition: ");
    10c4:	c8 01       	movw	r24, r16
    10c6:	6f e2       	ldi	r22, 0x2F	; 47
    10c8:	71 e0       	ldi	r23, 0x01	; 1
    10ca:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
     Serial.print(currentPosition[N]);
    10ce:	e0 91 a4 02 	lds	r30, 0x02A4
    10d2:	f0 91 a5 02 	lds	r31, 0x02A5
    10d6:	5e ea       	ldi	r21, 0xAE	; 174
    10d8:	e5 2e       	mov	r14, r21
    10da:	52 e0       	ldi	r21, 0x02	; 2
    10dc:	f5 2e       	mov	r15, r21
    10de:	ee 0f       	add	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0d       	add	r30, r14
    10e8:	ff 1d       	adc	r31, r15
    10ea:	40 81       	ld	r20, Z
    10ec:	51 81       	ldd	r21, Z+1	; 0x01
    10ee:	62 81       	ldd	r22, Z+2	; 0x02
    10f0:	73 81       	ldd	r23, Z+3	; 0x03
    10f2:	c8 01       	movw	r24, r16
    10f4:	22 e0       	ldi	r18, 0x02	; 2
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEdi>
      Serial.print("  ");
    10fc:	31 e4       	ldi	r19, 0x41	; 65
    10fe:	c3 2e       	mov	r12, r19
    1100:	31 e0       	ldi	r19, 0x01	; 1
    1102:	d3 2e       	mov	r13, r19
    1104:	c8 01       	movw	r24, r16
    1106:	b6 01       	movw	r22, r12
    1108:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
       Serial.print(currentPosition[E]);
    110c:	80 91 7a 01 	lds	r24, 0x017A
    1110:	90 91 7b 01 	lds	r25, 0x017B
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	e8 0e       	add	r14, r24
    111e:	f9 1e       	adc	r15, r25
    1120:	f7 01       	movw	r30, r14
    1122:	40 81       	ld	r20, Z
    1124:	51 81       	ldd	r21, Z+1	; 0x01
    1126:	62 81       	ldd	r22, Z+2	; 0x02
    1128:	73 81       	ldd	r23, Z+3	; 0x03
    112a:	c8 01       	movw	r24, r16
    112c:	22 e0       	ldi	r18, 0x02	; 2
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEdi>
     Serial.println();
    1134:	c8 01       	movw	r24, r16
    1136:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print7printlnEv>

       Serial.print("currentWaypoint: ");
    113a:	c8 01       	movw	r24, r16
    113c:	64 e4       	ldi	r22, 0x44	; 68
    113e:	71 e0       	ldi	r23, 0x01	; 1
    1140:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
     Serial.print(currentWaypoint[N]);
    1144:	e0 91 a4 02 	lds	r30, 0x02A4
    1148:	f0 91 a5 02 	lds	r31, 0x02A5
    114c:	86 ea       	ldi	r24, 0xA6	; 166
    114e:	e8 2e       	mov	r14, r24
    1150:	82 e0       	ldi	r24, 0x02	; 2
    1152:	f8 2e       	mov	r15, r24
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	ee 0f       	add	r30, r30
    115a:	ff 1f       	adc	r31, r31
    115c:	ee 0d       	add	r30, r14
    115e:	ff 1d       	adc	r31, r15
    1160:	40 81       	ld	r20, Z
    1162:	51 81       	ldd	r21, Z+1	; 0x01
    1164:	62 81       	ldd	r22, Z+2	; 0x02
    1166:	73 81       	ldd	r23, Z+3	; 0x03
    1168:	c8 01       	movw	r24, r16
    116a:	22 e0       	ldi	r18, 0x02	; 2
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEdi>
      Serial.print("  ");
    1172:	c8 01       	movw	r24, r16
    1174:	b6 01       	movw	r22, r12
    1176:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
       Serial.print(currentWaypoint[E]);
    117a:	80 91 7a 01 	lds	r24, 0x017A
    117e:	90 91 7b 01 	lds	r25, 0x017B
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	e8 0e       	add	r14, r24
    118c:	f9 1e       	adc	r15, r25
    118e:	f7 01       	movw	r30, r14
    1190:	40 81       	ld	r20, Z
    1192:	51 81       	ldd	r21, Z+1	; 0x01
    1194:	62 81       	ldd	r22, Z+2	; 0x02
    1196:	73 81       	ldd	r23, Z+3	; 0x03
    1198:	c8 01       	movw	r24, r16
    119a:	22 e0       	ldi	r18, 0x02	; 2
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEdi>
     Serial.println();
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print7printlnEv>


      Serial.println();
    11a8:	c8 01       	movw	r24, r16
    11aa:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print7printlnEv>
}
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	08 95       	ret

000011bc <_Z5stopsv>:
 DIRECTION = -1;
}

// ***********************************
void stops(){
 digitalWrite(FORWARD_PIN, LOW);
    11bc:	80 91 94 01 	lds	r24, 0x0194
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
 digitalWrite(BACKWARD_PIN, LOW);
    11c6:	80 91 96 01 	lds	r24, 0x0196
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
}
    11d0:	08 95       	ret

000011d2 <_Z6backupv>:
 DIRECTION = 1;
}

// ***********************************
void backup (){
 digitalWrite(BACKWARD_PIN, HIGH);
    11d2:	80 91 96 01 	lds	r24, 0x0196
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
 DIRECTION = -1;
    11dc:	8f ef       	ldi	r24, 0xFF	; 255
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	90 93 85 01 	sts	0x0185, r25
    11e4:	80 93 84 01 	sts	0x0184, r24
}
    11e8:	08 95       	ret

000011ea <_Z2gov>:
  myservo.write(turnTo);
}

// ***********************************
void go (){
 digitalWrite(FORWARD_PIN, HIGH);
    11ea:	80 91 94 01 	lds	r24, 0x0194
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
 DIRECTION = 1;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	90 93 85 01 	sts	0x0185, r25
    11fc:	80 93 84 01 	sts	0x0184, r24
}
    1200:	08 95       	ret

00001202 <_Z5flashv>:

// ***********************************
void flash(){
 // Flash the LED on pin 13 just to show that something is happening
  // Also serves as an indication that we're not "stuck" waiting for TWI data
  ledState = !ledState;
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	80 91 b9 02 	lds	r24, 0x02B9
    1208:	88 23       	and	r24, r24
    120a:	09 f4       	brne	.+2      	; 0x120e <_Z5flashv+0xc>
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	90 93 b9 02 	sts	0x02B9, r25
  if (ledState) {
    1212:	99 23       	and	r25, r25
    1214:	21 f0       	breq	.+8      	; 0x121e <_Z5flashv+0x1c>
    digitalWrite(ledPin,HIGH);
    1216:	80 91 8c 01 	lds	r24, 0x018C
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <_Z5flashv+0x22>
  }
  else
  {
    digitalWrite(ledPin,LOW);
    121e:	80 91 8c 01 	lds	r24, 0x018C
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	0e 94 2d 11 	call	0x225a	; 0x225a <digitalWrite>
    1228:	08 95       	ret

0000122a <_Z4turni>:
  }
}

// ***********************************
void turn(int deg){
  int turnTo = deg + CENTER;
    122a:	60 91 86 01 	lds	r22, 0x0186
    122e:	70 91 87 01 	lds	r23, 0x0187
    1232:	20 91 88 01 	lds	r18, 0x0188
    1236:	30 91 89 01 	lds	r19, 0x0189
    123a:	68 0f       	add	r22, r24
    123c:	79 1f       	adc	r23, r25
    123e:	26 17       	cp	r18, r22
    1240:	37 07       	cpc	r19, r23
    1242:	0c f4       	brge	.+2      	; 0x1246 <_Z4turni+0x1c>
    1244:	b9 01       	movw	r22, r18
  if (turnTo > MAX_TURN) turnTo = MAX_TURN;
   if (turnTo < MIN_TURN) turnTo = MIN_TURN;
  myservo.write(turnTo);
    1246:	80 91 8a 01 	lds	r24, 0x018A
    124a:	90 91 8b 01 	lds	r25, 0x018B
    124e:	68 17       	cp	r22, r24
    1250:	79 07       	cpc	r23, r25
    1252:	0c f4       	brge	.+2      	; 0x1256 <_Z4turni+0x2c>
    1254:	bc 01       	movw	r22, r24
    1256:	86 eb       	ldi	r24, 0xB6	; 182
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	0e 94 83 04 	call	0x906	; 0x906 <_ZN5Servo5writeEi>
}
    125e:	08 95       	ret

00001260 <_Z5steerv>:
  }


}
// ***********************************
void steer(){
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17

  double deltaN = currentWaypoint[N] - currentPosition[N];
    126c:	c0 90 a4 02 	lds	r12, 0x02A4
    1270:	d0 90 a5 02 	lds	r13, 0x02A5
  double deltaE = currentWaypoint[E] - currentPosition[E];
    1274:	e0 91 7a 01 	lds	r30, 0x017A
    1278:	f0 91 7b 01 	lds	r31, 0x017B

   headingToWaypoint = -180/3.1415926 * atan2(-deltaE,deltaN);
    127c:	ee 0f       	add	r30, r30
    127e:	ff 1f       	adc	r31, r31
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	df 01       	movw	r26, r30
    1286:	a2 55       	subi	r26, 0x52	; 82
    1288:	bd 4f       	sbci	r27, 0xFD	; 253
    128a:	ea 55       	subi	r30, 0x5A	; 90
    128c:	fd 4f       	sbci	r31, 0xFD	; 253
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	2d 91       	ld	r18, X+
    1298:	3d 91       	ld	r19, X+
    129a:	4d 91       	ld	r20, X+
    129c:	5c 91       	ld	r21, X
    129e:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
    12a2:	7b 01       	movw	r14, r22
    12a4:	8c 01       	movw	r16, r24
    12a6:	17 fb       	bst	r17, 7
    12a8:	10 95       	com	r17
    12aa:	17 f9       	bld	r17, 7
    12ac:	10 95       	com	r17
    12ae:	cc 0c       	add	r12, r12
    12b0:	dd 1c       	adc	r13, r13
    12b2:	cc 0c       	add	r12, r12
    12b4:	dd 1c       	adc	r13, r13
    12b6:	f6 01       	movw	r30, r12
    12b8:	e2 55       	subi	r30, 0x52	; 82
    12ba:	fd 4f       	sbci	r31, 0xFD	; 253
    12bc:	86 ea       	ldi	r24, 0xA6	; 166
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	c8 0e       	add	r12, r24
    12c2:	d9 1e       	adc	r13, r25
    12c4:	d6 01       	movw	r26, r12
    12c6:	6d 91       	ld	r22, X+
    12c8:	7d 91       	ld	r23, X+
    12ca:	8d 91       	ld	r24, X+
    12cc:	9c 91       	ld	r25, X
    12ce:	20 81       	ld	r18, Z
    12d0:	31 81       	ldd	r19, Z+1	; 0x01
    12d2:	42 81       	ldd	r20, Z+2	; 0x02
    12d4:	53 81       	ldd	r21, Z+3	; 0x03
    12d6:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	c8 01       	movw	r24, r16
    12e0:	b7 01       	movw	r22, r14
    12e2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <atan2>
    12e6:	22 ee       	ldi	r18, 0xE2	; 226
    12e8:	3e e2       	ldi	r19, 0x2E	; 46
    12ea:	45 e6       	ldi	r20, 0x65	; 101
    12ec:	52 ec       	ldi	r21, 0xC2	; 194
    12ee:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
    12f2:	60 93 c2 02 	sts	0x02C2, r22
    12f6:	70 93 c3 02 	sts	0x02C3, r23
    12fa:	80 93 c4 02 	sts	0x02C4, r24
    12fe:	90 93 c5 02 	sts	0x02C5, r25
   steeringDifference = headingToWaypoint - heading;
    1302:	20 91 ba 02 	lds	r18, 0x02BA
    1306:	30 91 bb 02 	lds	r19, 0x02BB
    130a:	40 91 bc 02 	lds	r20, 0x02BC
    130e:	50 91 bd 02 	lds	r21, 0x02BD
    1312:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
    1316:	7b 01       	movw	r14, r22
    1318:	8c 01       	movw	r16, r24
    131a:	60 93 c6 02 	sts	0x02C6, r22
    131e:	70 93 c7 02 	sts	0x02C7, r23
    1322:	80 93 c8 02 	sts	0x02C8, r24
    1326:	90 93 c9 02 	sts	0x02C9, r25
  if(steeringDifference > 180) steeringDifference -=360;
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	44 e3       	ldi	r20, 0x34	; 52
    1330:	53 e4       	ldi	r21, 0x43	; 67
    1332:	0e 94 01 14 	call	0x2802	; 0x2802 <__gesf2>
    1336:	18 16       	cp	r1, r24
    1338:	84 f4       	brge	.+32     	; 0x135a <_Z5steerv+0xfa>
    133a:	c8 01       	movw	r24, r16
    133c:	b7 01       	movw	r22, r14
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	44 eb       	ldi	r20, 0xB4	; 180
    1344:	53 e4       	ldi	r21, 0x43	; 67
    1346:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
    134a:	60 93 c6 02 	sts	0x02C6, r22
    134e:	70 93 c7 02 	sts	0x02C7, r23
    1352:	80 93 c8 02 	sts	0x02C8, r24
    1356:	90 93 c9 02 	sts	0x02C9, r25
  if(steeringDifference < -180) steeringDifference +=360;
    135a:	e0 90 c6 02 	lds	r14, 0x02C6
    135e:	f0 90 c7 02 	lds	r15, 0x02C7
    1362:	00 91 c8 02 	lds	r16, 0x02C8
    1366:	10 91 c9 02 	lds	r17, 0x02C9
    136a:	c8 01       	movw	r24, r16
    136c:	b7 01       	movw	r22, r14
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	44 e3       	ldi	r20, 0x34	; 52
    1374:	53 ec       	ldi	r21, 0xC3	; 195
    1376:	0e 94 48 12 	call	0x2490	; 0x2490 <__cmpsf2>
    137a:	88 23       	and	r24, r24
    137c:	84 f4       	brge	.+32     	; 0x139e <_Z5steerv+0x13e>
    137e:	c8 01       	movw	r24, r16
    1380:	b7 01       	movw	r22, r14
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	44 eb       	ldi	r20, 0xB4	; 180
    1388:	53 e4       	ldi	r21, 0x43	; 67
    138a:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3>
    138e:	60 93 c6 02 	sts	0x02C6, r22
    1392:	70 93 c7 02 	sts	0x02C7, r23
    1396:	80 93 c8 02 	sts	0x02C8, r24
    139a:	90 93 c9 02 	sts	0x02C9, r25

   if(prox < 50) steeringDifference -= (50-prox)/2.0;  // go left more and more urgently as obstacle approaches
    139e:	80 91 a2 02 	lds	r24, 0x02A2
    13a2:	90 91 a3 02 	lds	r25, 0x02A3
    13a6:	82 33       	cpi	r24, 0x32	; 50
    13a8:	91 05       	cpc	r25, r1
    13aa:	24 f5       	brge	.+72     	; 0x13f4 <_Z5steerv+0x194>
    13ac:	62 e3       	ldi	r22, 0x32	; 50
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	68 1b       	sub	r22, r24
    13b2:	79 0b       	sbc	r23, r25
    13b4:	88 27       	eor	r24, r24
    13b6:	77 fd       	sbrc	r23, 7
    13b8:	80 95       	com	r24
    13ba:	98 2f       	mov	r25, r24
    13bc:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	5f eb       	ldi	r21, 0xBF	; 191
    13c8:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	60 91 c6 02 	lds	r22, 0x02C6
    13d4:	70 91 c7 02 	lds	r23, 0x02C7
    13d8:	80 91 c8 02 	lds	r24, 0x02C8
    13dc:	90 91 c9 02 	lds	r25, 0x02C9
    13e0:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3>
    13e4:	60 93 c6 02 	sts	0x02C6, r22
    13e8:	70 93 c7 02 	sts	0x02C7, r23
    13ec:	80 93 c8 02 	sts	0x02C8, r24
    13f0:	90 93 c9 02 	sts	0x02C9, r25

  turn(steeringDifference/2.0);
    13f4:	60 91 c6 02 	lds	r22, 0x02C6
    13f8:	70 91 c7 02 	lds	r23, 0x02C7
    13fc:	80 91 c8 02 	lds	r24, 0x02C8
    1400:	90 91 c9 02 	lds	r25, 0x02C9
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
    1410:	0e 94 b7 12 	call	0x256e	; 0x256e <__fixsfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	0e 94 15 09 	call	0x122a	; 0x122a <_Z4turni>

}
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	cf 90       	pop	r12
    1428:	08 95       	ret

0000142a <_Z6breaksv>:
}
// backup();
}

// ***********************************
void breaks(){
    142a:	ef 92       	push	r14
    142c:	ff 92       	push	r15
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
   float prox = readProx();
    1432:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_Z8readProxv>
    1436:	aa 27       	eor	r26, r26
    1438:	97 fd       	sbrc	r25, 7
    143a:	a0 95       	com	r26
    143c:	ba 2f       	mov	r27, r26
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
    1446:	7b 01       	movw	r14, r22
    1448:	8c 01       	movw	r16, r24
     Serial.print("prox: ");
    144a:	84 e5       	ldi	r24, 0x54	; 84
    144c:	93 e0       	ldi	r25, 0x03	; 3
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	71 e0       	ldi	r23, 0x01	; 1
    1452:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print5printEPKc>
     Serial.println(prox);
    1456:	84 e5       	ldi	r24, 0x54	; 84
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	b8 01       	movw	r22, r16
    145c:	a7 01       	movw	r20, r14
    145e:	22 e0       	ldi	r18, 0x02	; 2
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <_ZN5Print7printlnEdi>
   if(prox < 20){
    1466:	c8 01       	movw	r24, r16
    1468:	b7 01       	movw	r22, r14
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 ea       	ldi	r20, 0xA0	; 160
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 48 12 	call	0x2490	; 0x2490 <__cmpsf2>
    1476:	88 23       	and	r24, r24
    1478:	4c f5       	brge	.+82     	; 0x14cc <_Z6breaksv+0xa2>
      stops();
    147a:	0e 94 de 08 	call	0x11bc	; 0x11bc <_Z5stopsv>
      delay(1000);
    147e:	68 ee       	ldi	r22, 0xE8	; 232
    1480:	73 e0       	ldi	r23, 0x03	; 3
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>
      backup();
    148a:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_Z6backupv>
      turn(-steeringDifference);
    148e:	60 91 c6 02 	lds	r22, 0x02C6
    1492:	70 91 c7 02 	lds	r23, 0x02C7
    1496:	80 91 c8 02 	lds	r24, 0x02C8
    149a:	90 91 c9 02 	lds	r25, 0x02C9
    149e:	90 58       	subi	r25, 0x80	; 128
    14a0:	0e 94 b7 12 	call	0x256e	; 0x256e <__fixsfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	0e 94 15 09 	call	0x122a	; 0x122a <_Z4turni>
      delay(200);
    14ac:	68 ec       	ldi	r22, 0xC8	; 200
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>
      stops();
    14b8:	0e 94 de 08 	call	0x11bc	; 0x11bc <_Z5stopsv>
      delay(200);
    14bc:	68 ec       	ldi	r22, 0xC8	; 200
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>
      go();
    14c8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_Z2gov>
   }
}
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	08 95       	ret

000014d6 <_Z11readCompassv>:
//  }
//  headingValue = headingData[0]*256 + headingData[1];  // Put the MSB and LSB together
//
//  return headingValue/10.0;
//}
float readCompass(){
    14d6:	bf 92       	push	r11
    14d8:	cf 92       	push	r12
    14da:	df 92       	push	r13
    14dc:	ef 92       	push	r14
    14de:	ff 92       	push	r15
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
 int x, y, z;

  // Initiate communications with compass
  Wire.beginTransmission(Addr);
    14e4:	8e e6       	ldi	r24, 0x6E	; 110
    14e6:	92 e0       	ldi	r25, 0x02	; 2
    14e8:	6e e1       	ldi	r22, 0x1E	; 30
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	0e 94 42 03 	call	0x684	; 0x684 <_ZN7TwoWire17beginTransmissionEi>
    void onRequest( void (*)(void) );
  
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    14f0:	8e e6       	ldi	r24, 0x6E	; 110
    14f2:	92 e0       	ldi	r25, 0x02	; 2
    14f4:	63 e0       	ldi	r22, 0x03	; 3
    14f6:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN7TwoWire5writeEh>
  Wire.write(0x03);                         // Send request to X MSB register
  Wire.endTransmission();
    14fa:	8e e6       	ldi	r24, 0x6E	; 110
    14fc:	92 e0       	ldi	r25, 0x02	; 2
    14fe:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(Addr, 6);               // Request 6 bytes; 2 bytes per axis
    1502:	8e e6       	ldi	r24, 0x6E	; 110
    1504:	92 e0       	ldi	r25, 0x02	; 2
    1506:	6e e1       	ldi	r22, 0x1E	; 30
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	46 e0       	ldi	r20, 0x06	; 6
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	0e 94 13 04 	call	0x826	; 0x826 <_ZN7TwoWire11requestFromEii>
  if(Wire.available() <=6) {               // If 6 bytes available
    1512:	8e e6       	ldi	r24, 0x6E	; 110
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	0e 94 4c 03 	call	0x698	; 0x698 <_ZN7TwoWire9availableEv>
    151a:	07 97       	sbiw	r24, 0x07	; 7
    151c:	2c f0       	brlt	.+10     	; 0x1528 <_Z11readCompassv+0x52>
    151e:	e0 e0       	ldi	r30, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	43 c0       	rjmp	.+134    	; 0x15ae <_Z11readCompassv+0xd8>
    x = Wire.read() << 8 | Wire.read();
    1528:	8e e6       	ldi	r24, 0x6E	; 110
    152a:	92 e0       	ldi	r25, 0x02	; 2
    152c:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7TwoWire4readEv>
    1530:	f8 2e       	mov	r15, r24
    1532:	8e e6       	ldi	r24, 0x6E	; 110
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7TwoWire4readEv>
    153a:	8c 01       	movw	r16, r24
    z = Wire.read() << 8 | Wire.read();
    153c:	8e e6       	ldi	r24, 0x6E	; 110
    153e:	92 e0       	ldi	r25, 0x02	; 2
    1540:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7TwoWire4readEv>
    1544:	8e e6       	ldi	r24, 0x6E	; 110
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7TwoWire4readEv>
    y = Wire.read() << 8 | Wire.read();
    154c:	8e e6       	ldi	r24, 0x6E	; 110
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7TwoWire4readEv>
    1554:	b8 2e       	mov	r11, r24
    1556:	8e e6       	ldi	r24, 0x6E	; 110
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	0e 94 55 03 	call	0x6aa	; 0x6aa <_ZN7TwoWire4readEv>
    155e:	6c 01       	movw	r12, r24
    float val = 180.0 / 3.1415926 *atan2(-x,y);
    1560:	7f 2d       	mov	r23, r15
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	60 2b       	or	r22, r16
    1566:	71 2b       	or	r23, r17
    1568:	70 95       	com	r23
    156a:	61 95       	neg	r22
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	88 27       	eor	r24, r24
    1570:	77 fd       	sbrc	r23, 7
    1572:	80 95       	com	r24
    1574:	98 2f       	mov	r25, r24
    1576:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
    157a:	7b 01       	movw	r14, r22
    157c:	8c 01       	movw	r16, r24
    157e:	7b 2d       	mov	r23, r11
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	6c 29       	or	r22, r12
    1584:	7d 29       	or	r23, r13
    1586:	88 27       	eor	r24, r24
    1588:	77 fd       	sbrc	r23, 7
    158a:	80 95       	com	r24
    158c:	98 2f       	mov	r25, r24
    158e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	c8 01       	movw	r24, r16
    1598:	b7 01       	movw	r22, r14
    159a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <atan2>
    159e:	22 ee       	ldi	r18, 0xE2	; 226
    15a0:	3e e2       	ldi	r19, 0x2E	; 46
    15a2:	45 e6       	ldi	r20, 0x65	; 101
    15a4:	52 e4       	ldi	r21, 0x42	; 66
    15a6:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
    15aa:	e6 2f       	mov	r30, r22
    15ac:	69 2f       	mov	r22, r25
    return val;
  }
    return 0.0;
  }
    15ae:	2e 2f       	mov	r18, r30
    15b0:	37 2f       	mov	r19, r23
    15b2:	48 2f       	mov	r20, r24
    15b4:	56 2f       	mov	r21, r22
    15b6:	b9 01       	movw	r22, r18
    15b8:	ca 01       	movw	r24, r20
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	bf 90       	pop	r11
    15c8:	08 95       	ret

000015ca <loop>:

}
// **************************************** LOOP *****************************
void loop()
{
 flash();
    15ca:	0e 94 01 09 	call	0x1202	; 0x1202 <_Z5flashv>
// go();
  heading = readCompass();
    15ce:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_Z11readCompassv>
    15d2:	60 93 ba 02 	sts	0x02BA, r22
    15d6:	70 93 bb 02 	sts	0x02BB, r23
    15da:	80 93 bc 02 	sts	0x02BC, r24
    15de:	90 93 bd 02 	sts	0x02BD, r25
  updatePosition();
    15e2:	0e 94 8b 07 	call	0xf16	; 0xf16 <_Z14updatePositionv>
 if(count++ %500 ==0) printState();
    15e6:	80 91 ca 02 	lds	r24, 0x02CA
    15ea:	90 91 cb 02 	lds	r25, 0x02CB
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	90 93 cb 02 	sts	0x02CB, r25
    15f4:	80 93 ca 02 	sts	0x02CA, r24
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	64 ef       	ldi	r22, 0xF4	; 244
    15fc:	71 e0       	ldi	r23, 0x01	; 1
    15fe:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
    1602:	89 2b       	or	r24, r25
    1604:	11 f4       	brne	.+4      	; 0x160a <loop+0x40>
    1606:	0e 94 23 08 	call	0x1046	; 0x1046 <_Z10printStatev>
  steer();
    160a:	0e 94 30 09 	call	0x1260	; 0x1260 <_Z5steerv>
  updateWaypoint();
    160e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_Z14updateWaypointv>

  breaks();
    1612:	0e 94 15 0a 	call	0x142a	; 0x142a <_Z6breaksv>
if(odoCount > 500){
    1616:	80 91 be 02 	lds	r24, 0x02BE
    161a:	90 91 bf 02 	lds	r25, 0x02BF
    161e:	a0 91 c0 02 	lds	r26, 0x02C0
    1622:	b0 91 c1 02 	lds	r27, 0x02C1
    1626:	85 5f       	subi	r24, 0xF5	; 245
    1628:	91 40       	sbci	r25, 0x01	; 1
    162a:	a0 40       	sbci	r26, 0x00	; 0
    162c:	b0 40       	sbci	r27, 0x00	; 0
    162e:	14 f4       	brge	.+4      	; 0x1634 <loop+0x6a>
// stops();
}else{
  go();
    1630:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_Z2gov>
    1634:	08 95       	ret

00001636 <setup>:
  double steeringDifference =0;
int count =0;


// ***********************************  SETUP ***************************************
void setup(){
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17

  delay(1000);
    163a:	68 ee       	ldi	r22, 0xE8	; 232
    163c:	73 e0       	ldi	r23, 0x03	; 3
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>

    Serial.begin(9600);
    1646:	84 e5       	ldi	r24, 0x54	; 84
    1648:	93 e0       	ldi	r25, 0x03	; 3
    164a:	40 e8       	ldi	r20, 0x80	; 128
    164c:	55 e2       	ldi	r21, 0x25	; 37
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	0e 94 39 0c 	call	0x1872	; 0x1872 <_ZN14HardwareSerial5beginEm>
  // Shift the device's documented slave address (0x42) 1 bit right
  // This compensates for how the TWI library only wants the
  // 7 most significant bits (with the high bit padded with 0)
//  slaveAddress = HMC6352Address >> 1;   // This results in 0x21 as the address to pass to TWI

  pinMode(ledPin, OUTPUT);      // Set the LED pin as output
    1656:	80 91 8c 01 	lds	r24, 0x018C
    165a:	61 e0       	ldi	r22, 0x01	; 1
    165c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>

   turn(0);
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 15 09 	call	0x122a	; 0x122a <_Z4turni>
//     Timer1.initialize(5000);         // initialize timer1, and set a 1/2 second period
//    Timer1.attachInterrupt(updatePosition);  // attaches callback() as a timer overflow interrupt
  pinMode(FORWARD_PIN, OUTPUT);
    1668:	80 91 94 01 	lds	r24, 0x0194
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>
  pinMode(BACKWARD_PIN, OUTPUT);
    1672:	80 91 96 01 	lds	r24, 0x0196
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>
  pinMode(STEERING_PIN, OUTPUT);
    167c:	80 91 8e 01 	lds	r24, 0x018E
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>

  pinMode(ODOMETER_PIN, INPUT);
    1686:	80 91 90 01 	lds	r24, 0x0190
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>
  pinMode(PROXIMITY_PIN, INPUT);
    1690:	80 91 92 01 	lds	r24, 0x0192
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	0e 94 ee 10 	call	0x21dc	; 0x21dc <pinMode>

 delay(1000);                            // Power up delay
    169a:	68 ee       	ldi	r22, 0xE8	; 232
    169c:	73 e0       	ldi	r23, 0x03	; 3
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 38 10 	call	0x2070	; 0x2070 <delay>
  Wire.begin();
    16a6:	0e e6       	ldi	r16, 0x6E	; 110
    16a8:	12 e0       	ldi	r17, 0x02	; 2
    16aa:	c8 01       	movw	r24, r16
    16ac:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN7TwoWire5beginEv>

  // Set operating mode to continuous
  Wire.beginTransmission(Addr);
    16b0:	c8 01       	movw	r24, r16
    16b2:	6e e1       	ldi	r22, 0x1E	; 30
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	0e 94 42 03 	call	0x684	; 0x684 <_ZN7TwoWire17beginTransmissionEi>
    16ba:	c8 01       	movw	r24, r16
    16bc:	62 e0       	ldi	r22, 0x02	; 2
    16be:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN7TwoWire5writeEh>
  Wire.write(0x02);
  Wire.write(0x00);
  Wire.endTransmission();
    16c2:	c8 01       	movw	r24, r16
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN7TwoWire5writeEh>
    16ca:	c8 01       	movw	r24, r16
    16cc:	0e 94 02 04 	call	0x804	; 0x804 <_ZN7TwoWire15endTransmissionEv>


  myservo.attach(STEERING_PIN);
    16d0:	60 91 8e 01 	lds	r22, 0x018E
    16d4:	70 91 8f 01 	lds	r23, 0x018F
    16d8:	86 eb       	ldi	r24, 0xB6	; 182
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0e 94 6a 05 	call	0xad4	; 0xad4 <_ZN5Servo6attachEi>
   currentWaypoint[N] = waypoints[waypointIterator][N];
    16e0:	20 91 a0 02 	lds	r18, 0x02A0
    16e4:	30 91 a1 02 	lds	r19, 0x02A1
    16e8:	e0 91 a4 02 	lds	r30, 0x02A4
    16ec:	f0 91 a5 02 	lds	r31, 0x02A5
    16f0:	06 ea       	ldi	r16, 0xA6	; 166
    16f2:	12 e0       	ldi	r17, 0x02	; 2
    16f4:	af 01       	movw	r20, r30
    16f6:	44 0f       	add	r20, r20
    16f8:	55 1f       	adc	r21, r21
    16fa:	44 0f       	add	r20, r20
    16fc:	55 1f       	adc	r21, r21
    16fe:	40 0f       	add	r20, r16
    1700:	51 1f       	adc	r21, r17
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	e2 0f       	add	r30, r18
    1708:	f3 1f       	adc	r31, r19
    170a:	68 e5       	ldi	r22, 0x58	; 88
    170c:	71 e0       	ldi	r23, 0x01	; 1
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	e6 0f       	add	r30, r22
    1718:	f7 1f       	adc	r31, r23
    171a:	80 81       	ld	r24, Z
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	a2 81       	ldd	r26, Z+2	; 0x02
    1720:	b3 81       	ldd	r27, Z+3	; 0x03
    1722:	fa 01       	movw	r30, r20
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
   currentWaypoint[E] = waypoints[waypointIterator][E];
    172c:	40 91 7a 01 	lds	r20, 0x017A
    1730:	50 91 7b 01 	lds	r21, 0x017B
    1734:	ca 01       	movw	r24, r20
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	08 0f       	add	r16, r24
    1740:	19 1f       	adc	r17, r25
    1742:	24 0f       	add	r18, r20
    1744:	35 1f       	adc	r19, r21
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	62 0f       	add	r22, r18
    1750:	73 1f       	adc	r23, r19
    1752:	fb 01       	movw	r30, r22
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	a2 81       	ldd	r26, Z+2	; 0x02
    175a:	b3 81       	ldd	r27, Z+3	; 0x03
    175c:	f8 01       	movw	r30, r16
    175e:	80 83       	st	Z, r24
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	a2 83       	std	Z+2, r26	; 0x02
    1764:	b3 83       	std	Z+3, r27	; 0x03

}
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	08 95       	ret

0000176c <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    176c:	08 95       	ret

0000176e <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	8f 93       	push	r24
    1780:	9f 93       	push	r25
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1786:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    178a:	20 91 0c 03 	lds	r18, 0x030C
    178e:	30 91 0d 03 	lds	r19, 0x030D

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1792:	2f 5f       	subi	r18, 0xFF	; 255
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	2f 73       	andi	r18, 0x3F	; 63
    1798:	30 70       	andi	r19, 0x00	; 0
    179a:	80 91 0e 03 	lds	r24, 0x030E
    179e:	90 91 0f 03 	lds	r25, 0x030F
    17a2:	28 17       	cp	r18, r24
    17a4:	39 07       	cpc	r19, r25
    17a6:	59 f0       	breq	.+22     	; 0x17be <__vector_18+0x50>
    buffer->buffer[buffer->head] = c;
    17a8:	e0 91 0c 03 	lds	r30, 0x030C
    17ac:	f0 91 0d 03 	lds	r31, 0x030D
    17b0:	e4 53       	subi	r30, 0x34	; 52
    17b2:	fd 4f       	sbci	r31, 0xFD	; 253
    17b4:	40 83       	st	Z, r20
    buffer->head = i;
    17b6:	30 93 0d 03 	sts	0x030D, r19
    17ba:	20 93 0c 03 	sts	0x030C, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    17d6:	e0 91 60 03 	lds	r30, 0x0360
    17da:	f0 91 61 03 	lds	r31, 0x0361
    17de:	e0 5c       	subi	r30, 0xC0	; 192
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	81 91       	ld	r24, Z+
    17e4:	91 91       	ld	r25, Z+
    17e6:	20 81       	ld	r18, Z
    17e8:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    17ea:	82 1b       	sub	r24, r18
    17ec:	93 0b       	sbc	r25, r19
    17ee:	8f 73       	andi	r24, 0x3F	; 63
    17f0:	90 70       	andi	r25, 0x00	; 0
    17f2:	89 2b       	or	r24, r25
    17f4:	11 f0       	breq	.+4      	; 0x17fa <_Z14serialEventRunv+0x24>
    17f6:	0e 94 b6 0b 	call	0x176c	; 0x176c <_Z11serialEventv>
    17fa:	08 95       	ret

000017fc <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	0f 92       	push	r0
    1804:	11 24       	eor	r1, r1
    1806:	2f 93       	push	r18
    1808:	3f 93       	push	r19
    180a:	8f 93       	push	r24
    180c:	9f 93       	push	r25
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    1812:	20 91 50 03 	lds	r18, 0x0350
    1816:	30 91 51 03 	lds	r19, 0x0351
    181a:	80 91 52 03 	lds	r24, 0x0352
    181e:	90 91 53 03 	lds	r25, 0x0353
    1822:	28 17       	cp	r18, r24
    1824:	39 07       	cpc	r19, r25
    1826:	31 f4       	brne	.+12     	; 0x1834 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1828:	80 91 c1 00 	lds	r24, 0x00C1
    182c:	8f 7d       	andi	r24, 0xDF	; 223
    182e:	80 93 c1 00 	sts	0x00C1, r24
    1832:	14 c0       	rjmp	.+40     	; 0x185c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1834:	e0 91 52 03 	lds	r30, 0x0352
    1838:	f0 91 53 03 	lds	r31, 0x0353
    183c:	e0 5f       	subi	r30, 0xF0	; 240
    183e:	fc 4f       	sbci	r31, 0xFC	; 252
    1840:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1842:	80 91 52 03 	lds	r24, 0x0352
    1846:	90 91 53 03 	lds	r25, 0x0353
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	8f 73       	andi	r24, 0x3F	; 63
    184e:	90 70       	andi	r25, 0x00	; 0
    1850:	90 93 53 03 	sts	0x0353, r25
    1854:	80 93 52 03 	sts	0x0352, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1858:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    185c:	ff 91       	pop	r31
    185e:	ef 91       	pop	r30
    1860:	9f 91       	pop	r25
    1862:	8f 91       	pop	r24
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1872:	af 92       	push	r10
    1874:	bf 92       	push	r11
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	ec 01       	movw	r28, r24
    1886:	7a 01       	movw	r14, r20
    1888:	8b 01       	movw	r16, r22
    188a:	dd 24       	eor	r13, r13
    188c:	40 30       	cpi	r20, 0x00	; 0
    188e:	81 ee       	ldi	r24, 0xE1	; 225
    1890:	58 07       	cpc	r21, r24
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	68 07       	cpc	r22, r24
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	78 07       	cpc	r23, r24
    189a:	11 f0       	breq	.+4      	; 0x18a0 <_ZN14HardwareSerial5beginEm+0x2e>
    189c:	dd 24       	eor	r13, r13
    189e:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	a9 2e       	mov	r10, r25
    18a4:	b1 2c       	mov	r11, r1
    18a6:	ec 89       	ldd	r30, Y+20	; 0x14
    18a8:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
    18aa:	dd 20       	and	r13, r13
    18ac:	69 f0       	breq	.+26     	; 0x18c8 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
    18ae:	c5 01       	movw	r24, r10
    18b0:	0e 8c       	ldd	r0, Y+30	; 0x1e
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <_ZN14HardwareSerial5beginEm+0x46>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <_ZN14HardwareSerial5beginEm+0x42>
    18bc:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	79 e0       	ldi	r23, 0x09	; 9
    18c2:	8d e3       	ldi	r24, 0x3D	; 61
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
    18c8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    18ca:	60 e8       	ldi	r22, 0x80	; 128
    18cc:	74 e8       	ldi	r23, 0x84	; 132
    18ce:	8e e1       	ldi	r24, 0x1E	; 30
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	a8 01       	movw	r20, r16
    18d4:	97 01       	movw	r18, r14
    18d6:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    18da:	21 50       	subi	r18, 0x01	; 1
    18dc:	30 40       	sbci	r19, 0x00	; 0
    18de:	40 40       	sbci	r20, 0x00	; 0
    18e0:	50 40       	sbci	r21, 0x00	; 0
    18e2:	56 95       	lsr	r21
    18e4:	47 95       	ror	r20
    18e6:	37 95       	ror	r19
    18e8:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    18ea:	80 e1       	ldi	r24, 0x10	; 16
    18ec:	20 30       	cpi	r18, 0x00	; 0
    18ee:	38 07       	cpc	r19, r24
    18f0:	20 f0       	brcs	.+8      	; 0x18fa <_ZN14HardwareSerial5beginEm+0x88>
    18f2:	dd 20       	and	r13, r13
    18f4:	11 f0       	breq	.+4      	; 0x18fa <_ZN14HardwareSerial5beginEm+0x88>
    18f6:	dd 24       	eor	r13, r13
    18f8:	d6 cf       	rjmp	.-84     	; 0x18a6 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    18fa:	e8 89       	ldd	r30, Y+16	; 0x10
    18fc:	f9 89       	ldd	r31, Y+17	; 0x11
    18fe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1900:	ea 89       	ldd	r30, Y+18	; 0x12
    1902:	fb 89       	ldd	r31, Y+19	; 0x13
    1904:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1906:	ee 89       	ldd	r30, Y+22	; 0x16
    1908:	ff 89       	ldd	r31, Y+23	; 0x17
    190a:	40 81       	ld	r20, Z
    190c:	21 e0       	ldi	r18, 0x01	; 1
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	c9 01       	movw	r24, r18
    1912:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1914:	02 c0       	rjmp	.+4      	; 0x191a <_ZN14HardwareSerial5beginEm+0xa8>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <_ZN14HardwareSerial5beginEm+0xa4>
    191e:	48 2b       	or	r20, r24
    1920:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1922:	ee 89       	ldd	r30, Y+22	; 0x16
    1924:	ff 89       	ldd	r31, Y+23	; 0x17
    1926:	40 81       	ld	r20, Z
    1928:	c9 01       	movw	r24, r18
    192a:	0b 8c       	ldd	r0, Y+27	; 0x1b
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <_ZN14HardwareSerial5beginEm+0xc0>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <_ZN14HardwareSerial5beginEm+0xbc>
    1936:	48 2b       	or	r20, r24
    1938:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    193a:	ee 89       	ldd	r30, Y+22	; 0x16
    193c:	ff 89       	ldd	r31, Y+23	; 0x17
    193e:	40 81       	ld	r20, Z
    1940:	c9 01       	movw	r24, r18
    1942:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1944:	02 c0       	rjmp	.+4      	; 0x194a <_ZN14HardwareSerial5beginEm+0xd8>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <_ZN14HardwareSerial5beginEm+0xd4>
    194e:	48 2b       	or	r20, r24
    1950:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1952:	ee 89       	ldd	r30, Y+22	; 0x16
    1954:	ff 89       	ldd	r31, Y+23	; 0x17
    1956:	80 81       	ld	r24, Z
    1958:	0d 8c       	ldd	r0, Y+29	; 0x1d
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <_ZN14HardwareSerial5beginEm+0xee>
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <_ZN14HardwareSerial5beginEm+0xea>
    1964:	20 95       	com	r18
    1966:	28 23       	and	r18, r24
    1968:	20 83       	st	Z, r18
}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	bf 90       	pop	r11
    197a:	af 90       	pop	r10
    197c:	08 95       	ret

0000197e <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    197e:	dc 01       	movw	r26, r24
    1980:	1c 96       	adiw	r26, 0x0c	; 12
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	1d 97       	sbiw	r26, 0x0d	; 13
    1988:	e0 5c       	subi	r30, 0xC0	; 192
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	21 91       	ld	r18, Z+
    198e:	31 91       	ld	r19, Z+
    1990:	80 81       	ld	r24, Z
    1992:	91 81       	ldd	r25, Z+1	; 0x01
    1994:	28 1b       	sub	r18, r24
    1996:	39 0b       	sbc	r19, r25
    1998:	2f 73       	andi	r18, 0x3F	; 63
    199a:	30 70       	andi	r19, 0x00	; 0
}
    199c:	c9 01       	movw	r24, r18
    199e:	08 95       	ret

000019a0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    19a0:	dc 01       	movw	r26, r24
    19a2:	1c 96       	adiw	r26, 0x0c	; 12
    19a4:	ed 91       	ld	r30, X+
    19a6:	fc 91       	ld	r31, X
    19a8:	1d 97       	sbiw	r26, 0x0d	; 13
    19aa:	e0 5c       	subi	r30, 0xC0	; 192
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	20 81       	ld	r18, Z
    19b0:	31 81       	ldd	r19, Z+1	; 0x01
    19b2:	e0 54       	subi	r30, 0x40	; 64
    19b4:	f0 40       	sbci	r31, 0x00	; 0
    19b6:	df 01       	movw	r26, r30
    19b8:	ae 5b       	subi	r26, 0xBE	; 190
    19ba:	bf 4f       	sbci	r27, 0xFF	; 255
    19bc:	8d 91       	ld	r24, X+
    19be:	9c 91       	ld	r25, X
    19c0:	11 97       	sbiw	r26, 0x01	; 1
    19c2:	28 17       	cp	r18, r24
    19c4:	39 07       	cpc	r19, r25
    19c6:	19 f4       	brne	.+6      	; 0x19ce <_ZN14HardwareSerial4peekEv+0x2e>
    19c8:	2f ef       	ldi	r18, 0xFF	; 255
    19ca:	3f ef       	ldi	r19, 0xFF	; 255
    19cc:	07 c0       	rjmp	.+14     	; 0x19dc <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    19ce:	8d 91       	ld	r24, X+
    19d0:	9c 91       	ld	r25, X
    19d2:	e8 0f       	add	r30, r24
    19d4:	f9 1f       	adc	r31, r25
    19d6:	80 81       	ld	r24, Z
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    19dc:	c9 01       	movw	r24, r18
    19de:	08 95       	ret

000019e0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    19e0:	dc 01       	movw	r26, r24
    19e2:	1c 96       	adiw	r26, 0x0c	; 12
    19e4:	ed 91       	ld	r30, X+
    19e6:	fc 91       	ld	r31, X
    19e8:	1d 97       	sbiw	r26, 0x0d	; 13
    19ea:	e0 5c       	subi	r30, 0xC0	; 192
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	20 81       	ld	r18, Z
    19f0:	31 81       	ldd	r19, Z+1	; 0x01
    19f2:	e0 54       	subi	r30, 0x40	; 64
    19f4:	f0 40       	sbci	r31, 0x00	; 0
    19f6:	df 01       	movw	r26, r30
    19f8:	ae 5b       	subi	r26, 0xBE	; 190
    19fa:	bf 4f       	sbci	r27, 0xFF	; 255
    19fc:	8d 91       	ld	r24, X+
    19fe:	9c 91       	ld	r25, X
    1a00:	11 97       	sbiw	r26, 0x01	; 1
    1a02:	28 17       	cp	r18, r24
    1a04:	39 07       	cpc	r19, r25
    1a06:	19 f4       	brne	.+6      	; 0x1a0e <_ZN14HardwareSerial4readEv+0x2e>
    1a08:	2f ef       	ldi	r18, 0xFF	; 255
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	10 c0       	rjmp	.+32     	; 0x1a2e <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1a0e:	8d 91       	ld	r24, X+
    1a10:	9c 91       	ld	r25, X
    1a12:	11 97       	sbiw	r26, 0x01	; 1
    1a14:	e8 0f       	add	r30, r24
    1a16:	f9 1f       	adc	r31, r25
    1a18:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1a1a:	8d 91       	ld	r24, X+
    1a1c:	9c 91       	ld	r25, X
    1a1e:	11 97       	sbiw	r26, 0x01	; 1
    1a20:	01 96       	adiw	r24, 0x01	; 1
    1a22:	8f 73       	andi	r24, 0x3F	; 63
    1a24:	90 70       	andi	r25, 0x00	; 0
    1a26:	11 96       	adiw	r26, 0x01	; 1
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
    return c;
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1a2e:	c9 01       	movw	r24, r18
    1a30:	08 95       	ret

00001a32 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1a32:	fc 01       	movw	r30, r24
    1a34:	86 85       	ldd	r24, Z+14	; 0x0e
    1a36:	97 85       	ldd	r25, Z+15	; 0x0f
    1a38:	dc 01       	movw	r26, r24
    1a3a:	a0 5c       	subi	r26, 0xC0	; 192
    1a3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3e:	fc 01       	movw	r30, r24
    1a40:	ee 5b       	subi	r30, 0xBE	; 190
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	2d 91       	ld	r18, X+
    1a46:	3c 91       	ld	r19, X
    1a48:	11 97       	sbiw	r26, 0x01	; 1
    1a4a:	80 81       	ld	r24, Z
    1a4c:	91 81       	ldd	r25, Z+1	; 0x01
    1a4e:	28 17       	cp	r18, r24
    1a50:	39 07       	cpc	r19, r25
    1a52:	c1 f7       	brne	.-16     	; 0x1a44 <_ZN14HardwareSerial5flushEv+0x12>
    ;
}
    1a54:	08 95       	ret

00001a56 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1a5c:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a5e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a60:	e0 5c       	subi	r30, 0xC0	; 192
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	20 81       	ld	r18, Z
    1a66:	31 81       	ldd	r19, Z+1	; 0x01
    1a68:	e0 54       	subi	r30, 0x40	; 64
    1a6a:	f0 40       	sbci	r31, 0x00	; 0
    1a6c:	2f 5f       	subi	r18, 0xFF	; 255
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	2f 73       	andi	r18, 0x3F	; 63
    1a72:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1a74:	df 01       	movw	r26, r30
    1a76:	ae 5b       	subi	r26, 0xBE	; 190
    1a78:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7a:	8d 91       	ld	r24, X+
    1a7c:	9c 91       	ld	r25, X
    1a7e:	11 97       	sbiw	r26, 0x01	; 1
    1a80:	28 17       	cp	r18, r24
    1a82:	39 07       	cpc	r19, r25
    1a84:	d1 f3       	breq	.-12     	; 0x1a7a <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1a86:	e0 5c       	subi	r30, 0xC0	; 192
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	e0 54       	subi	r30, 0x40	; 64
    1a90:	f0 40       	sbci	r31, 0x00	; 0
    1a92:	e8 0f       	add	r30, r24
    1a94:	f9 1f       	adc	r31, r25
    1a96:	60 83       	st	Z, r22
  _tx_buffer->head = i;
    1a98:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a9a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a9c:	e0 5c       	subi	r30, 0xC0	; 192
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	31 83       	std	Z+1, r19	; 0x01
    1aa2:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    1aa4:	ee 89       	ldd	r30, Y+22	; 0x16
    1aa6:	ff 89       	ldd	r31, Y+23	; 0x17
    1aa8:	20 81       	ld	r18, Z
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <_ZN14HardwareSerial5writeEh+0x60>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <_ZN14HardwareSerial5writeEh+0x5c>
    1aba:	28 2b       	or	r18, r24
    1abc:	20 83       	st	Z, r18
  
  return 1;
}
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	08 95       	ret

00001ac8 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1ac8:	10 92 57 03 	sts	0x0357, r1
    1acc:	10 92 56 03 	sts	0x0356, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1ad0:	88 ee       	ldi	r24, 0xE8	; 232
    1ad2:	93 e0       	ldi	r25, 0x03	; 3
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	80 93 58 03 	sts	0x0358, r24
    1adc:	90 93 59 03 	sts	0x0359, r25
    1ae0:	a0 93 5a 03 	sts	0x035A, r26
    1ae4:	b0 93 5b 03 	sts	0x035B, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1ae8:	8e ea       	ldi	r24, 0xAE	; 174
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	90 93 55 03 	sts	0x0355, r25
    1af0:	80 93 54 03 	sts	0x0354, r24
{
  _rx_buffer = rx_buffer;
    1af4:	8c ec       	ldi	r24, 0xCC	; 204
    1af6:	92 e0       	ldi	r25, 0x02	; 2
    1af8:	90 93 61 03 	sts	0x0361, r25
    1afc:	80 93 60 03 	sts	0x0360, r24
  _tx_buffer = tx_buffer;
    1b00:	80 e1       	ldi	r24, 0x10	; 16
    1b02:	93 e0       	ldi	r25, 0x03	; 3
    1b04:	90 93 63 03 	sts	0x0363, r25
    1b08:	80 93 62 03 	sts	0x0362, r24
  _ubrrh = ubrrh;
    1b0c:	85 ec       	ldi	r24, 0xC5	; 197
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	90 93 65 03 	sts	0x0365, r25
    1b14:	80 93 64 03 	sts	0x0364, r24
  _ubrrl = ubrrl;
    1b18:	84 ec       	ldi	r24, 0xC4	; 196
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	90 93 67 03 	sts	0x0367, r25
    1b20:	80 93 66 03 	sts	0x0366, r24
  _ucsra = ucsra;
    1b24:	80 ec       	ldi	r24, 0xC0	; 192
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	90 93 69 03 	sts	0x0369, r25
    1b2c:	80 93 68 03 	sts	0x0368, r24
  _ucsrb = ucsrb;
    1b30:	81 ec       	ldi	r24, 0xC1	; 193
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	90 93 6b 03 	sts	0x036B, r25
    1b38:	80 93 6a 03 	sts	0x036A, r24
  _udr = udr;
    1b3c:	86 ec       	ldi	r24, 0xC6	; 198
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	90 93 6d 03 	sts	0x036D, r25
    1b44:	80 93 6c 03 	sts	0x036C, r24
  _rxen = rxen;
    1b48:	84 e0       	ldi	r24, 0x04	; 4
    1b4a:	80 93 6e 03 	sts	0x036E, r24
  _txen = txen;
    1b4e:	83 e0       	ldi	r24, 0x03	; 3
    1b50:	80 93 6f 03 	sts	0x036F, r24
  _rxcie = rxcie;
    1b54:	87 e0       	ldi	r24, 0x07	; 7
    1b56:	80 93 70 03 	sts	0x0370, r24
  _udrie = udrie;
    1b5a:	85 e0       	ldi	r24, 0x05	; 5
    1b5c:	80 93 71 03 	sts	0x0371, r24
  _u2x = u2x;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 93 72 03 	sts	0x0372, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1b66:	08 95       	ret

00001b68 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	7c 01       	movw	r14, r24
    1b7a:	6b 01       	movw	r12, r22
    1b7c:	8a 01       	movw	r16, r20
    1b7e:	c0 e0       	ldi	r28, 0x00	; 0
    1b80:	d0 e0       	ldi	r29, 0x00	; 0
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
    1b84:	d6 01       	movw	r26, r12
    1b86:	6d 91       	ld	r22, X+
    1b88:	6d 01       	movw	r12, r26
    1b8a:	d7 01       	movw	r26, r14
    1b8c:	ed 91       	ld	r30, X+
    1b8e:	fc 91       	ld	r31, X
    1b90:	01 90       	ld	r0, Z+
    1b92:	f0 81       	ld	r31, Z
    1b94:	e0 2d       	mov	r30, r0
    1b96:	c7 01       	movw	r24, r14
    1b98:	09 95       	icall
    1b9a:	c8 0f       	add	r28, r24
    1b9c:	d9 1f       	adc	r29, r25
    1b9e:	01 50       	subi	r16, 0x01	; 1
    1ba0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    1ba2:	01 15       	cp	r16, r1
    1ba4:	11 05       	cpc	r17, r1
    1ba6:	71 f7       	brne	.-36     	; 0x1b84 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    1ba8:	ce 01       	movw	r24, r28
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	1f 91       	pop	r17
    1bb0:	0f 91       	pop	r16
    1bb2:	ff 90       	pop	r15
    1bb4:	ef 90       	pop	r14
    1bb6:	df 90       	pop	r13
    1bb8:	cf 90       	pop	r12
    1bba:	08 95       	ret

00001bbc <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	ed 91       	ld	r30, X+
    1bca:	fc 91       	ld	r31, X
    1bcc:	01 90       	ld	r0, Z+
    1bce:	f0 81       	ld	r31, Z
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	6d e0       	ldi	r22, 0x0D	; 13
    1bd4:	09 95       	icall
    1bd6:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
    1bd8:	d8 01       	movw	r26, r16
    1bda:	ed 91       	ld	r30, X+
    1bdc:	fc 91       	ld	r31, X
    1bde:	01 90       	ld	r0, Z+
    1be0:	f0 81       	ld	r31, Z
    1be2:	e0 2d       	mov	r30, r0
    1be4:	c8 01       	movw	r24, r16
    1be6:	6a e0       	ldi	r22, 0x0A	; 10
    1be8:	09 95       	icall
    1bea:	9c 01       	movw	r18, r24
    1bec:	2e 0d       	add	r18, r14
    1bee:	3f 1d       	adc	r19, r15
    1bf0:	c9 01       	movw	r24, r18
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	08 95       	ret

00001bfc <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	db 01       	movw	r26, r22
    1c02:	0d 90       	ld	r0, X+
    1c04:	00 20       	and	r0, r0
    1c06:	e9 f7       	brne	.-6      	; 0x1c02 <_ZN5Print5writeEPKc+0x6>
    1c08:	11 97       	sbiw	r26, 0x01	; 1
    1c0a:	a6 1b       	sub	r26, r22
    1c0c:	b7 0b       	sbc	r27, r23
    1c0e:	ec 01       	movw	r28, r24
    1c10:	e8 81       	ld	r30, Y
    1c12:	f9 81       	ldd	r31, Y+1	; 0x01
    1c14:	02 80       	ldd	r0, Z+2	; 0x02
    1c16:	f3 81       	ldd	r31, Z+3	; 0x03
    1c18:	e0 2d       	mov	r30, r0
    1c1a:	ad 01       	movw	r20, r26
    1c1c:	09 95       	icall
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

00001c24 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    1c24:	4f 92       	push	r4
    1c26:	5f 92       	push	r5
    1c28:	7f 92       	push	r7
    1c2a:	8f 92       	push	r8
    1c2c:	9f 92       	push	r9
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	a1 97       	sbiw	r28, 0x21	; 33
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	2c 01       	movw	r4, r24
    1c54:	74 2e       	mov	r7, r20
    1c56:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	08 f4       	brcc	.+2      	; 0x1c5e <_ZN5Print11printNumberEmh+0x3a>
    1c5c:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1c5e:	19 a2       	std	Y+33, r1	; 0x21
    1c60:	31 e2       	ldi	r19, 0x21	; 33
    1c62:	c3 2e       	mov	r12, r19
    1c64:	d1 2c       	mov	r13, r1
    1c66:	cc 0e       	add	r12, r28
    1c68:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
    1c6a:	82 2e       	mov	r8, r18
    1c6c:	99 24       	eor	r9, r9
    1c6e:	aa 24       	eor	r10, r10
    1c70:	bb 24       	eor	r11, r11
    1c72:	67 2d       	mov	r22, r7
    1c74:	75 2f       	mov	r23, r21
    1c76:	a5 01       	movw	r20, r10
    1c78:	94 01       	movw	r18, r8
    1c7a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    1c7e:	79 01       	movw	r14, r18
    1c80:	8a 01       	movw	r16, r20
    char c = m - base * n;
    1c82:	c8 01       	movw	r24, r16
    1c84:	b7 01       	movw	r22, r14
    1c86:	a5 01       	movw	r20, r10
    1c88:	94 01       	movw	r18, r8
    1c8a:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsi3>
    1c8e:	47 2d       	mov	r20, r7
    1c90:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1c92:	08 94       	sec
    1c94:	c1 08       	sbc	r12, r1
    1c96:	d1 08       	sbc	r13, r1
    1c98:	4a 30       	cpi	r20, 0x0A	; 10
    1c9a:	14 f4       	brge	.+4      	; 0x1ca0 <_ZN5Print11printNumberEmh+0x7c>
    1c9c:	40 5d       	subi	r20, 0xD0	; 208
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <_ZN5Print11printNumberEmh+0x7e>
    1ca0:	49 5c       	subi	r20, 0xC9	; 201
    1ca2:	f6 01       	movw	r30, r12
    1ca4:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1ca6:	e1 14       	cp	r14, r1
    1ca8:	f1 04       	cpc	r15, r1
    1caa:	01 05       	cpc	r16, r1
    1cac:	11 05       	cpc	r17, r1
    1cae:	21 f0       	breq	.+8      	; 0x1cb8 <_ZN5Print11printNumberEmh+0x94>
    1cb0:	7e 2c       	mov	r7, r14
    1cb2:	5f 2d       	mov	r21, r15
    1cb4:	c8 01       	movw	r24, r16
    1cb6:	dd cf       	rjmp	.-70     	; 0x1c72 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1cb8:	c2 01       	movw	r24, r4
    1cba:	b6 01       	movw	r22, r12
    1cbc:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN5Print5writeEPKc>
}
    1cc0:	a1 96       	adiw	r28, 0x21	; 33
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ff 90       	pop	r15
    1cd6:	ef 90       	pop	r14
    1cd8:	df 90       	pop	r13
    1cda:	cf 90       	pop	r12
    1cdc:	bf 90       	pop	r11
    1cde:	af 90       	pop	r10
    1ce0:	9f 90       	pop	r9
    1ce2:	8f 90       	pop	r8
    1ce4:	7f 90       	pop	r7
    1ce6:	5f 90       	pop	r5
    1ce8:	4f 90       	pop	r4
    1cea:	08 95       	ret

00001cec <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    1cec:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
    1cee:	21 15       	cp	r18, r1
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	41 f4       	brne	.+16     	; 0x1d04 <_ZN5Print5printEmi+0x18>
    1cf4:	ed 91       	ld	r30, X+
    1cf6:	fc 91       	ld	r31, X
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	f0 81       	ld	r31, Z
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	64 2f       	mov	r22, r20
    1d00:	09 95       	icall
    1d02:	08 95       	ret
  else return printNumber(n, base);
    1d04:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN5Print11printNumberEmh>
}
    1d08:	08 95       	ret

00001d0a <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	ec 01       	movw	r28, r24
    1d1c:	6a 01       	movw	r12, r20
    1d1e:	7b 01       	movw	r14, r22
{
  if (base == 0) {
    1d20:	21 15       	cp	r18, r1
    1d22:	31 05       	cpc	r19, r1
    1d24:	41 f4       	brne	.+16     	; 0x1d36 <_ZN5Print5printEli+0x2c>
    return write(n);
    1d26:	e8 81       	ld	r30, Y
    1d28:	f9 81       	ldd	r31, Y+1	; 0x01
    1d2a:	01 90       	ld	r0, Z+
    1d2c:	f0 81       	ld	r31, Z
    1d2e:	e0 2d       	mov	r30, r0
    1d30:	64 2f       	mov	r22, r20
    1d32:	09 95       	icall
    1d34:	1f c0       	rjmp	.+62     	; 0x1d74 <_ZN5Print5printEli+0x6a>
  } else if (base == 10) {
    1d36:	2a 30       	cpi	r18, 0x0A	; 10
    1d38:	31 05       	cpc	r19, r1
    1d3a:	d1 f4       	brne	.+52     	; 0x1d70 <_ZN5Print5printEli+0x66>
    if (n < 0) {
    1d3c:	77 ff       	sbrs	r23, 7
    1d3e:	17 c0       	rjmp	.+46     	; 0x1d6e <_ZN5Print5printEli+0x64>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1d40:	e8 81       	ld	r30, Y
    1d42:	f9 81       	ldd	r31, Y+1	; 0x01
    1d44:	01 90       	ld	r0, Z+
    1d46:	f0 81       	ld	r31, Z
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	6d e2       	ldi	r22, 0x2D	; 45
    1d4c:	09 95       	icall
    1d4e:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    1d50:	44 27       	eor	r20, r20
    1d52:	55 27       	eor	r21, r21
    1d54:	ba 01       	movw	r22, r20
    1d56:	4c 19       	sub	r20, r12
    1d58:	5d 09       	sbc	r21, r13
    1d5a:	6e 09       	sbc	r22, r14
    1d5c:	7f 09       	sbc	r23, r15
    1d5e:	ce 01       	movw	r24, r28
    1d60:	2a e0       	ldi	r18, 0x0A	; 10
    1d62:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN5Print11printNumberEmh>
    1d66:	98 01       	movw	r18, r16
    1d68:	28 0f       	add	r18, r24
    1d6a:	39 1f       	adc	r19, r25
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <_ZN5Print5printEli+0x6c>
    }
    return printNumber(n, 10);
    1d6e:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1d70:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <_ZN5Print11printNumberEmh>
    1d74:	9c 01       	movw	r18, r24
  }
}
    1d76:	c9 01       	movw	r24, r18
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ff 90       	pop	r15
    1d82:	ef 90       	pop	r14
    1d84:	df 90       	pop	r13
    1d86:	cf 90       	pop	r12
    1d88:	08 95       	ret

00001d8a <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    1d8a:	cf 92       	push	r12
    1d8c:	df 92       	push	r13
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	6c 01       	movw	r12, r24
    1d98:	7b 01       	movw	r14, r22
    1d9a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1d9c:	00 27       	eor	r16, r16
    1d9e:	f7 fc       	sbrc	r15, 7
    1da0:	00 95       	com	r16
    1da2:	10 2f       	mov	r17, r16
    1da4:	b8 01       	movw	r22, r16
    1da6:	a7 01       	movw	r20, r14
    1da8:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN5Print5printEli>
    1dac:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1dae:	c6 01       	movw	r24, r12
    1db0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print7printlnEv>
    1db4:	08 0f       	add	r16, r24
    1db6:	19 1f       	adc	r17, r25
  return n;
}
    1db8:	c8 01       	movw	r24, r16
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	ff 90       	pop	r15
    1dc0:	ef 90       	pop	r14
    1dc2:	df 90       	pop	r13
    1dc4:	cf 90       	pop	r12
    1dc6:	08 95       	ret

00001dc8 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1dc8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN5Print5writeEPKc>
}
    1dcc:	08 95       	ret

00001dce <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    1dce:	7f 92       	push	r7
    1dd0:	8f 92       	push	r8
    1dd2:	9f 92       	push	r9
    1dd4:	af 92       	push	r10
    1dd6:	bf 92       	push	r11
    1dd8:	cf 92       	push	r12
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	4c 01       	movw	r8, r24
    1dea:	7a 01       	movw	r14, r20
    1dec:	8b 01       	movw	r16, r22
    1dee:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    1df0:	cb 01       	movw	r24, r22
    1df2:	ba 01       	movw	r22, r20
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	0e 94 48 12 	call	0x2490	; 0x2490 <__cmpsf2>
    1e00:	87 fd       	sbrc	r24, 7
    1e02:	03 c0       	rjmp	.+6      	; 0x1e0a <_ZN5Print10printFloatEdh+0x3c>
    1e04:	c0 e0       	ldi	r28, 0x00	; 0
    1e06:	d0 e0       	ldi	r29, 0x00	; 0
    1e08:	0e c0       	rjmp	.+28     	; 0x1e26 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
    1e0a:	d4 01       	movw	r26, r8
    1e0c:	ed 91       	ld	r30, X+
    1e0e:	fc 91       	ld	r31, X
    1e10:	01 90       	ld	r0, Z+
    1e12:	f0 81       	ld	r31, Z
    1e14:	e0 2d       	mov	r30, r0
    1e16:	c4 01       	movw	r24, r8
    1e18:	6d e2       	ldi	r22, 0x2D	; 45
    1e1a:	09 95       	icall
    1e1c:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
    1e1e:	17 fb       	bst	r17, 7
    1e20:	10 95       	com	r17
    1e22:	17 f9       	bld	r17, 7
    1e24:	10 95       	com	r17
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	aa 24       	eor	r10, r10
    1e30:	0b c0       	rjmp	.+22     	; 0x1e48 <_ZN5Print10printFloatEdh+0x7a>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1e32:	ca 01       	movw	r24, r20
    1e34:	b9 01       	movw	r22, r18
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 4f 12 	call	0x249e	; 0x249e <__divsf3>
    1e42:	9b 01       	movw	r18, r22
    1e44:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1e46:	a3 94       	inc	r10
    1e48:	a7 14       	cp	r10, r7
    1e4a:	98 f3       	brcs	.-26     	; 0x1e32 <_ZN5Print10printFloatEdh+0x64>
    rounding /= 10.0;
  
  number += rounding;
    1e4c:	c8 01       	movw	r24, r16
    1e4e:	b7 01       	movw	r22, r14
    1e50:	0e 94 82 11 	call	0x2304	; 0x2304 <__addsf3>
    1e54:	5b 01       	movw	r10, r22
    1e56:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1e58:	0e 94 bc 12 	call	0x2578	; 0x2578 <__fixunssfsi>
    1e5c:	7b 01       	movw	r14, r22
    1e5e:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
    1e60:	c4 01       	movw	r24, r8
    1e62:	b8 01       	movw	r22, r16
    1e64:	a7 01       	movw	r20, r14
    1e66:	2a e0       	ldi	r18, 0x0A	; 10
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <_ZN5Print5printEmi>
    1e6e:	c8 0f       	add	r28, r24
    1e70:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1e72:	77 20       	and	r7, r7
    1e74:	39 f0       	breq	.+14     	; 0x1e84 <_ZN5Print10printFloatEdh+0xb6>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1e76:	c4 01       	movw	r24, r8
    1e78:	66 e5       	ldi	r22, 0x56	; 86
    1e7a:	71 e0       	ldi	r23, 0x01	; 1
    1e7c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1e80:	c8 0f       	add	r28, r24
    1e82:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    1e84:	c8 01       	movw	r24, r16
    1e86:	b7 01       	movw	r22, r14
    1e88:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__floatunsisf>
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	c6 01       	movw	r24, r12
    1e92:	b5 01       	movw	r22, r10
    1e94:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
    1e98:	24 c0       	rjmp	.+72     	; 0x1ee2 <_ZN5Print10printFloatEdh+0x114>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e2       	ldi	r20, 0x20	; 32
    1ea0:	51 e4       	ldi	r21, 0x41	; 65
    1ea2:	0e 94 0c 14 	call	0x2818	; 0x2818 <__mulsf3>
    1ea6:	7b 01       	movw	r14, r22
    1ea8:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    1eaa:	0e 94 b7 12 	call	0x256e	; 0x256e <__fixsfsi>
    1eae:	5b 01       	movw	r10, r22
    1eb0:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1eb2:	cc 24       	eor	r12, r12
    1eb4:	b7 fc       	sbrc	r11, 7
    1eb6:	c0 94       	com	r12
    1eb8:	dc 2c       	mov	r13, r12
    1eba:	c4 01       	movw	r24, r8
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	a5 01       	movw	r20, r10
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1ec8:	c8 0f       	add	r28, r24
    1eca:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1ecc:	c6 01       	movw	r24, r12
    1ece:	b5 01       	movw	r22, r10
    1ed0:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__floatsisf>
    1ed4:	9b 01       	movw	r18, r22
    1ed6:	ac 01       	movw	r20, r24
    1ed8:	c8 01       	movw	r24, r16
    1eda:	b7 01       	movw	r22, r14
    1edc:	0e 94 81 11 	call	0x2302	; 0x2302 <__subsf3>
    1ee0:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1ee2:	77 20       	and	r7, r7
    1ee4:	d1 f6       	brne	.-76     	; 0x1e9a <_ZN5Print10printFloatEdh+0xcc>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	bf 90       	pop	r11
    1efa:	af 90       	pop	r10
    1efc:	9f 90       	pop	r9
    1efe:	8f 90       	pop	r8
    1f00:	7f 90       	pop	r7
    1f02:	08 95       	ret

00001f04 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f04:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN5Print10printFloatEdh>
}
    1f08:	08 95       	ret

00001f0a <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1f14:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <_ZN5Print10printFloatEdh>
    1f18:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <_ZN5Print7printlnEv>
    1f20:	08 0f       	add	r16, r24
    1f22:	19 1f       	adc	r17, r25
  return n;
}
    1f24:	c8 01       	movw	r24, r16
    1f26:	1f 91       	pop	r17
    1f28:	0f 91       	pop	r16
    1f2a:	ff 90       	pop	r15
    1f2c:	ef 90       	pop	r14
    1f2e:	08 95       	ret

00001f30 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    1f30:	2f 92       	push	r2
    1f32:	3f 92       	push	r3
    1f34:	4f 92       	push	r4
    1f36:	5f 92       	push	r5
    1f38:	6f 92       	push	r6
    1f3a:	7f 92       	push	r7
    1f3c:	8f 92       	push	r8
    1f3e:	9f 92       	push	r9
    1f40:	af 92       	push	r10
    1f42:	bf 92       	push	r11
    1f44:	cf 92       	push	r12
    1f46:	df 92       	push	r13
    1f48:	ef 92       	push	r14
    1f4a:	ff 92       	push	r15
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
    1f58:	3b 01       	movw	r6, r22
    1f5a:	4c 01       	movw	r8, r24
    1f5c:	19 01       	movw	r2, r18
    1f5e:	2a 01       	movw	r4, r20
    1f60:	6d 89       	ldd	r22, Y+21	; 0x15
    1f62:	7e 89       	ldd	r23, Y+22	; 0x16
    1f64:	8f 89       	ldd	r24, Y+23	; 0x17
    1f66:	98 8d       	ldd	r25, Y+24	; 0x18
    1f68:	6a 19       	sub	r22, r10
    1f6a:	7b 09       	sbc	r23, r11
    1f6c:	8c 09       	sbc	r24, r12
    1f6e:	9d 09       	sbc	r25, r13
    1f70:	62 1a       	sub	r6, r18
    1f72:	73 0a       	sbc	r7, r19
    1f74:	84 0a       	sbc	r8, r20
    1f76:	95 0a       	sbc	r9, r21
    1f78:	a4 01       	movw	r20, r8
    1f7a:	93 01       	movw	r18, r6
    1f7c:	0e 94 99 14 	call	0x2932	; 0x2932 <__mulsi3>
    1f80:	e2 18       	sub	r14, r2
    1f82:	f3 08       	sbc	r15, r3
    1f84:	04 09       	sbc	r16, r4
    1f86:	15 09       	sbc	r17, r5
    1f88:	a8 01       	movw	r20, r16
    1f8a:	97 01       	movw	r18, r14
    1f8c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__divmodsi4>
    1f90:	2a 0d       	add	r18, r10
    1f92:	3b 1d       	adc	r19, r11
    1f94:	4c 1d       	adc	r20, r12
    1f96:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    1f98:	b9 01       	movw	r22, r18
    1f9a:	ca 01       	movw	r24, r20
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	df 90       	pop	r13
    1faa:	cf 90       	pop	r12
    1fac:	bf 90       	pop	r11
    1fae:	af 90       	pop	r10
    1fb0:	9f 90       	pop	r9
    1fb2:	8f 90       	pop	r8
    1fb4:	7f 90       	pop	r7
    1fb6:	6f 90       	pop	r6
    1fb8:	5f 90       	pop	r5
    1fba:	4f 90       	pop	r4
    1fbc:	3f 90       	pop	r3
    1fbe:	2f 90       	pop	r2
    1fc0:	08 95       	ret

00001fc2 <main>:
#include <Arduino.h>

int main(void)
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
{
	init();
    1fc6:	0e 94 91 10 	call	0x2122	; 0x2122 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1fca:	0e 94 1b 0b 	call	0x1636	; 0x1636 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1fce:	cb ee       	ldi	r28, 0xEB	; 235
    1fd0:	db e0       	ldi	r29, 0x0B	; 11
#endif
	
	setup();
    
	for (;;) {
		loop();
    1fd2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <loop>
		if (serialEventRun) serialEventRun();
    1fd6:	20 97       	sbiw	r28, 0x00	; 0
    1fd8:	e1 f3       	breq	.-8      	; 0x1fd2 <main+0x10>
    1fda:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <_Z14serialEventRunv>
    1fde:	f9 cf       	rjmp	.-14     	; 0x1fd2 <main+0x10>

00001fe0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1fe0:	1f 92       	push	r1
    1fe2:	0f 92       	push	r0
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	0f 92       	push	r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	2f 93       	push	r18
    1fec:	3f 93       	push	r19
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1ff6:	80 91 77 03 	lds	r24, 0x0377
    1ffa:	90 91 78 03 	lds	r25, 0x0378
    1ffe:	a0 91 79 03 	lds	r26, 0x0379
    2002:	b0 91 7a 03 	lds	r27, 0x037A
	unsigned char f = timer0_fract;
    2006:	30 91 7b 03 	lds	r19, 0x037B

	m += MILLIS_INC;
    200a:	01 96       	adiw	r24, 0x01	; 1
    200c:	a1 1d       	adc	r26, r1
    200e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2010:	23 2f       	mov	r18, r19
    2012:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2014:	2d 37       	cpi	r18, 0x7D	; 125
    2016:	20 f0       	brcs	.+8      	; 0x2020 <__vector_16+0x40>
		f -= FRACT_MAX;
    2018:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	a1 1d       	adc	r26, r1
    201e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2020:	20 93 7b 03 	sts	0x037B, r18
	timer0_millis = m;
    2024:	80 93 77 03 	sts	0x0377, r24
    2028:	90 93 78 03 	sts	0x0378, r25
    202c:	a0 93 79 03 	sts	0x0379, r26
    2030:	b0 93 7a 03 	sts	0x037A, r27
	timer0_overflow_count++;
    2034:	80 91 73 03 	lds	r24, 0x0373
    2038:	90 91 74 03 	lds	r25, 0x0374
    203c:	a0 91 75 03 	lds	r26, 0x0375
    2040:	b0 91 76 03 	lds	r27, 0x0376
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	a1 1d       	adc	r26, r1
    2048:	b1 1d       	adc	r27, r1
    204a:	80 93 73 03 	sts	0x0373, r24
    204e:	90 93 74 03 	sts	0x0374, r25
    2052:	a0 93 75 03 	sts	0x0375, r26
    2056:	b0 93 76 03 	sts	0x0376, r27
}
    205a:	bf 91       	pop	r27
    205c:	af 91       	pop	r26
    205e:	9f 91       	pop	r25
    2060:	8f 91       	pop	r24
    2062:	3f 91       	pop	r19
    2064:	2f 91       	pop	r18
    2066:	0f 90       	pop	r0
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	0f 90       	pop	r0
    206c:	1f 90       	pop	r1
    206e:	18 95       	reti

00002070 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
    2070:	9b 01       	movw	r18, r22
    2072:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2074:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    2076:	f8 94       	cli
	m = timer0_overflow_count;
    2078:	80 91 73 03 	lds	r24, 0x0373
    207c:	90 91 74 03 	lds	r25, 0x0374
    2080:	a0 91 75 03 	lds	r26, 0x0375
    2084:	b0 91 76 03 	lds	r27, 0x0376
#if defined(TCNT0)
	t = TCNT0;
    2088:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    208a:	a8 9b       	sbis	0x15, 0	; 21
    208c:	05 c0       	rjmp	.+10     	; 0x2098 <delay+0x28>
    208e:	6f 3f       	cpi	r22, 0xFF	; 255
    2090:	19 f0       	breq	.+6      	; 0x2098 <delay+0x28>
		m++;
    2092:	01 96       	adiw	r24, 0x01	; 1
    2094:	a1 1d       	adc	r26, r1
    2096:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2098:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    209a:	ba 2f       	mov	r27, r26
    209c:	a9 2f       	mov	r26, r25
    209e:	98 2f       	mov	r25, r24
    20a0:	88 27       	eor	r24, r24
    20a2:	86 0f       	add	r24, r22
    20a4:	91 1d       	adc	r25, r1
    20a6:	a1 1d       	adc	r26, r1
    20a8:	b1 1d       	adc	r27, r1
    20aa:	62 e0       	ldi	r22, 0x02	; 2
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	aa 1f       	adc	r26, r26
    20b2:	bb 1f       	adc	r27, r27
    20b4:	6a 95       	dec	r22
    20b6:	d1 f7       	brne	.-12     	; 0x20ac <delay+0x3c>
    20b8:	bc 01       	movw	r22, r24
    20ba:	2d c0       	rjmp	.+90     	; 0x2116 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    20bc:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    20be:	f8 94       	cli
	m = timer0_overflow_count;
    20c0:	80 91 73 03 	lds	r24, 0x0373
    20c4:	90 91 74 03 	lds	r25, 0x0374
    20c8:	a0 91 75 03 	lds	r26, 0x0375
    20cc:	b0 91 76 03 	lds	r27, 0x0376
#if defined(TCNT0)
	t = TCNT0;
    20d0:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    20d2:	a8 9b       	sbis	0x15, 0	; 21
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <delay+0x70>
    20d6:	ef 3f       	cpi	r30, 0xFF	; 255
    20d8:	19 f0       	breq	.+6      	; 0x20e0 <delay+0x70>
		m++;
    20da:	01 96       	adiw	r24, 0x01	; 1
    20dc:	a1 1d       	adc	r26, r1
    20de:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    20e0:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    20e2:	ba 2f       	mov	r27, r26
    20e4:	a9 2f       	mov	r26, r25
    20e6:	98 2f       	mov	r25, r24
    20e8:	88 27       	eor	r24, r24
    20ea:	8e 0f       	add	r24, r30
    20ec:	91 1d       	adc	r25, r1
    20ee:	a1 1d       	adc	r26, r1
    20f0:	b1 1d       	adc	r27, r1
    20f2:	e2 e0       	ldi	r30, 0x02	; 2
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	aa 1f       	adc	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	ea 95       	dec	r30
    20fe:	d1 f7       	brne	.-12     	; 0x20f4 <delay+0x84>
    2100:	86 1b       	sub	r24, r22
    2102:	97 0b       	sbc	r25, r23
    2104:	88 5e       	subi	r24, 0xE8	; 232
    2106:	93 40       	sbci	r25, 0x03	; 3
    2108:	c8 f2       	brcs	.-78     	; 0x20bc <delay+0x4c>
			ms--;
    210a:	21 50       	subi	r18, 0x01	; 1
    210c:	30 40       	sbci	r19, 0x00	; 0
    210e:	40 40       	sbci	r20, 0x00	; 0
    2110:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    2112:	68 51       	subi	r22, 0x18	; 24
    2114:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2116:	21 15       	cp	r18, r1
    2118:	31 05       	cpc	r19, r1
    211a:	41 05       	cpc	r20, r1
    211c:	51 05       	cpc	r21, r1
    211e:	71 f6       	brne	.-100    	; 0x20bc <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2120:	08 95       	ret

00002122 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2122:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2124:	84 b5       	in	r24, 0x24	; 36
    2126:	82 60       	ori	r24, 0x02	; 2
    2128:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    212a:	84 b5       	in	r24, 0x24	; 36
    212c:	81 60       	ori	r24, 0x01	; 1
    212e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2130:	85 b5       	in	r24, 0x25	; 37
    2132:	82 60       	ori	r24, 0x02	; 2
    2134:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2136:	85 b5       	in	r24, 0x25	; 37
    2138:	81 60       	ori	r24, 0x01	; 1
    213a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    213c:	ee e6       	ldi	r30, 0x6E	; 110
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	81 60       	ori	r24, 0x01	; 1
    2144:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2146:	e1 e8       	ldi	r30, 0x81	; 129
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    214c:	80 81       	ld	r24, Z
    214e:	82 60       	ori	r24, 0x02	; 2
    2150:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2152:	80 81       	ld	r24, Z
    2154:	81 60       	ori	r24, 0x01	; 1
    2156:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2158:	e0 e8       	ldi	r30, 0x80	; 128
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	81 60       	ori	r24, 0x01	; 1
    2160:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2162:	e1 eb       	ldi	r30, 0xB1	; 177
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	84 60       	ori	r24, 0x04	; 4
    216a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    216c:	e0 eb       	ldi	r30, 0xB0	; 176
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	81 60       	ori	r24, 0x01	; 1
    2174:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2176:	ea e7       	ldi	r30, 0x7A	; 122
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	84 60       	ori	r24, 0x04	; 4
    217e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2180:	80 81       	ld	r24, Z
    2182:	82 60       	ori	r24, 0x02	; 2
    2184:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2186:	80 81       	ld	r24, Z
    2188:	81 60       	ori	r24, 0x01	; 1
    218a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    218c:	80 81       	ld	r24, Z
    218e:	80 68       	ori	r24, 0x80	; 128
    2190:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2192:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2196:	08 95       	ret

00002198 <analogRead>:

int analogRead(uint8_t pin)
{
    2198:	98 2f       	mov	r25, r24
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    219a:	8e 30       	cpi	r24, 0x0E	; 14
    219c:	08 f0       	brcs	.+2      	; 0x21a0 <analogRead+0x8>
    219e:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    21a0:	97 70       	andi	r25, 0x07	; 7
    21a2:	80 91 99 01 	lds	r24, 0x0199
    21a6:	82 95       	swap	r24
    21a8:	88 0f       	add	r24, r24
    21aa:	88 0f       	add	r24, r24
    21ac:	80 7c       	andi	r24, 0xC0	; 192
    21ae:	89 2b       	or	r24, r25
    21b0:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    21b4:	80 91 7a 00 	lds	r24, 0x007A
    21b8:	80 64       	ori	r24, 0x40	; 64
    21ba:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    21be:	80 91 7a 00 	lds	r24, 0x007A
    21c2:	86 fd       	sbrc	r24, 6
    21c4:	fc cf       	rjmp	.-8      	; 0x21be <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    21c6:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    21ca:	40 91 79 00 	lds	r20, 0x0079
    21ce:	94 2f       	mov	r25, r20
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	28 2b       	or	r18, r24
    21d6:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    21d8:	c9 01       	movw	r24, r18
    21da:	08 95       	ret

000021dc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    21e0:	48 2f       	mov	r20, r24
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	ca 01       	movw	r24, r20
    21e6:	8b 51       	subi	r24, 0x1B	; 27
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	fc 01       	movw	r30, r24
    21ec:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
    21ee:	4f 52       	subi	r20, 0x2F	; 47
    21f0:	5f 4f       	sbci	r21, 0xFF	; 255
    21f2:	fa 01       	movw	r30, r20
    21f4:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    21f6:	88 23       	and	r24, r24
    21f8:	69 f1       	breq	.+90     	; 0x2254 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	fc 01       	movw	r30, r24
    2202:	ed 54       	subi	r30, 0x4D	; 77
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	a5 91       	lpm	r26, Z+
    2208:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
    220a:	fc 01       	movw	r30, r24
    220c:	e3 54       	subi	r30, 0x43	; 67
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	c5 91       	lpm	r28, Z+
    2212:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
    2214:	66 23       	and	r22, r22
    2216:	51 f4       	brne	.+20     	; 0x222c <pinMode+0x50>
		uint8_t oldSREG = SREG;
    2218:	2f b7       	in	r18, 0x3f	; 63
                cli();
    221a:	f8 94       	cli
		*reg &= ~bit;
    221c:	8c 91       	ld	r24, X
    221e:	93 2f       	mov	r25, r19
    2220:	90 95       	com	r25
    2222:	89 23       	and	r24, r25
    2224:	8c 93       	st	X, r24
		*out &= ~bit;
    2226:	88 81       	ld	r24, Y
    2228:	89 23       	and	r24, r25
    222a:	0b c0       	rjmp	.+22     	; 0x2242 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    222c:	62 30       	cpi	r22, 0x02	; 2
    222e:	61 f4       	brne	.+24     	; 0x2248 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    2230:	2f b7       	in	r18, 0x3f	; 63
                cli();
    2232:	f8 94       	cli
		*reg &= ~bit;
    2234:	8c 91       	ld	r24, X
    2236:	93 2f       	mov	r25, r19
    2238:	90 95       	com	r25
    223a:	89 23       	and	r24, r25
    223c:	8c 93       	st	X, r24
		*out |= bit;
    223e:	88 81       	ld	r24, Y
    2240:	83 2b       	or	r24, r19
    2242:	88 83       	st	Y, r24
		SREG = oldSREG;
    2244:	2f bf       	out	0x3f, r18	; 63
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    2248:	9f b7       	in	r25, 0x3f	; 63
                cli();
    224a:	f8 94       	cli
		*reg |= bit;
    224c:	8c 91       	ld	r24, X
    224e:	83 2b       	or	r24, r19
    2250:	8c 93       	st	X, r24
		SREG = oldSREG;
    2252:	9f bf       	out	0x3f, r25	; 63
	}
}
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	08 95       	ret

0000225a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    225a:	48 2f       	mov	r20, r24
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	ca 01       	movw	r24, r20
    2260:	87 50       	subi	r24, 0x07	; 7
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	fc 01       	movw	r30, r24
    2266:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2268:	ca 01       	movw	r24, r20
    226a:	8b 51       	subi	r24, 0x1B	; 27
    226c:	9f 4f       	sbci	r25, 0xFF	; 255
    226e:	fc 01       	movw	r30, r24
    2270:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
    2272:	4f 52       	subi	r20, 0x2F	; 47
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	fa 01       	movw	r30, r20
    2278:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    227a:	33 23       	and	r19, r19
    227c:	09 f4       	brne	.+2      	; 0x2280 <digitalWrite+0x26>
    227e:	40 c0       	rjmp	.+128    	; 0x2300 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2280:	22 23       	and	r18, r18
    2282:	51 f1       	breq	.+84     	; 0x22d8 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2284:	23 30       	cpi	r18, 0x03	; 3
    2286:	71 f0       	breq	.+28     	; 0x22a4 <digitalWrite+0x4a>
    2288:	24 30       	cpi	r18, 0x04	; 4
    228a:	28 f4       	brcc	.+10     	; 0x2296 <digitalWrite+0x3c>
    228c:	21 30       	cpi	r18, 0x01	; 1
    228e:	a1 f0       	breq	.+40     	; 0x22b8 <digitalWrite+0x5e>
    2290:	22 30       	cpi	r18, 0x02	; 2
    2292:	11 f5       	brne	.+68     	; 0x22d8 <digitalWrite+0x7e>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <digitalWrite+0x64>
    2296:	26 30       	cpi	r18, 0x06	; 6
    2298:	b1 f0       	breq	.+44     	; 0x22c6 <digitalWrite+0x6c>
    229a:	27 30       	cpi	r18, 0x07	; 7
    229c:	c1 f0       	breq	.+48     	; 0x22ce <digitalWrite+0x74>
    229e:	24 30       	cpi	r18, 0x04	; 4
    22a0:	d9 f4       	brne	.+54     	; 0x22d8 <digitalWrite+0x7e>
    22a2:	04 c0       	rjmp	.+8      	; 0x22ac <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    22a4:	80 91 80 00 	lds	r24, 0x0080
    22a8:	8f 77       	andi	r24, 0x7F	; 127
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    22ac:	80 91 80 00 	lds	r24, 0x0080
    22b0:	8f 7d       	andi	r24, 0xDF	; 223
    22b2:	80 93 80 00 	sts	0x0080, r24
    22b6:	10 c0       	rjmp	.+32     	; 0x22d8 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    22b8:	84 b5       	in	r24, 0x24	; 36
    22ba:	8f 77       	andi	r24, 0x7F	; 127
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    22be:	84 b5       	in	r24, 0x24	; 36
    22c0:	8f 7d       	andi	r24, 0xDF	; 223
    22c2:	84 bd       	out	0x24, r24	; 36
    22c4:	09 c0       	rjmp	.+18     	; 0x22d8 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    22c6:	80 91 b0 00 	lds	r24, 0x00B0
    22ca:	8f 77       	andi	r24, 0x7F	; 127
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    22ce:	80 91 b0 00 	lds	r24, 0x00B0
    22d2:	8f 7d       	andi	r24, 0xDF	; 223
    22d4:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    22d8:	e3 2f       	mov	r30, r19
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	e3 54       	subi	r30, 0x43	; 67
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	a5 91       	lpm	r26, Z+
    22e6:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
    22e8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    22ea:	f8 94       	cli

	if (val == LOW) {
    22ec:	66 23       	and	r22, r22
    22ee:	21 f4       	brne	.+8      	; 0x22f8 <digitalWrite+0x9e>
		*out &= ~bit;
    22f0:	8c 91       	ld	r24, X
    22f2:	90 95       	com	r25
    22f4:	89 23       	and	r24, r25
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <digitalWrite+0xa2>
	} else {
		*out |= bit;
    22f8:	8c 91       	ld	r24, X
    22fa:	89 2b       	or	r24, r25
    22fc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    22fe:	2f bf       	out	0x3f, r18	; 63
    2300:	08 95       	ret

00002302 <__subsf3>:
    2302:	50 58       	subi	r21, 0x80	; 128

00002304 <__addsf3>:
    2304:	bb 27       	eor	r27, r27
    2306:	aa 27       	eor	r26, r26
    2308:	0e d0       	rcall	.+28     	; 0x2326 <__addsf3x>
    230a:	30 c2       	rjmp	.+1120   	; 0x276c <__fp_round>
    230c:	f0 d1       	rcall	.+992    	; 0x26ee <__fp_pscA>
    230e:	30 f0       	brcs	.+12     	; 0x231c <__addsf3+0x18>
    2310:	f5 d1       	rcall	.+1002   	; 0x26fc <__fp_pscB>
    2312:	20 f0       	brcs	.+8      	; 0x231c <__addsf3+0x18>
    2314:	31 f4       	brne	.+12     	; 0x2322 <__addsf3+0x1e>
    2316:	9f 3f       	cpi	r25, 0xFF	; 255
    2318:	11 f4       	brne	.+4      	; 0x231e <__addsf3+0x1a>
    231a:	1e f4       	brtc	.+6      	; 0x2322 <__addsf3+0x1e>
    231c:	c0 c1       	rjmp	.+896    	; 0x269e <__fp_nan>
    231e:	0e f4       	brtc	.+2      	; 0x2322 <__addsf3+0x1e>
    2320:	e0 95       	com	r30
    2322:	e7 fb       	bst	r30, 7
    2324:	b6 c1       	rjmp	.+876    	; 0x2692 <__fp_inf>

00002326 <__addsf3x>:
    2326:	e9 2f       	mov	r30, r25
    2328:	43 d2       	rcall	.+1158   	; 0x27b0 <__fp_split3>
    232a:	80 f3       	brcs	.-32     	; 0x230c <__addsf3+0x8>
    232c:	ba 17       	cp	r27, r26
    232e:	62 07       	cpc	r22, r18
    2330:	73 07       	cpc	r23, r19
    2332:	84 07       	cpc	r24, r20
    2334:	95 07       	cpc	r25, r21
    2336:	18 f0       	brcs	.+6      	; 0x233e <__addsf3x+0x18>
    2338:	71 f4       	brne	.+28     	; 0x2356 <__addsf3x+0x30>
    233a:	9e f5       	brtc	.+102    	; 0x23a2 <__addsf3x+0x7c>
    233c:	5b c2       	rjmp	.+1206   	; 0x27f4 <__fp_zero>
    233e:	0e f4       	brtc	.+2      	; 0x2342 <__addsf3x+0x1c>
    2340:	e0 95       	com	r30
    2342:	0b 2e       	mov	r0, r27
    2344:	ba 2f       	mov	r27, r26
    2346:	a0 2d       	mov	r26, r0
    2348:	0b 01       	movw	r0, r22
    234a:	b9 01       	movw	r22, r18
    234c:	90 01       	movw	r18, r0
    234e:	0c 01       	movw	r0, r24
    2350:	ca 01       	movw	r24, r20
    2352:	a0 01       	movw	r20, r0
    2354:	11 24       	eor	r1, r1
    2356:	ff 27       	eor	r31, r31
    2358:	59 1b       	sub	r21, r25
    235a:	99 f0       	breq	.+38     	; 0x2382 <__addsf3x+0x5c>
    235c:	59 3f       	cpi	r21, 0xF9	; 249
    235e:	50 f4       	brcc	.+20     	; 0x2374 <__addsf3x+0x4e>
    2360:	50 3e       	cpi	r21, 0xE0	; 224
    2362:	68 f1       	brcs	.+90     	; 0x23be <__addsf3x+0x98>
    2364:	1a 16       	cp	r1, r26
    2366:	f0 40       	sbci	r31, 0x00	; 0
    2368:	a2 2f       	mov	r26, r18
    236a:	23 2f       	mov	r18, r19
    236c:	34 2f       	mov	r19, r20
    236e:	44 27       	eor	r20, r20
    2370:	58 5f       	subi	r21, 0xF8	; 248
    2372:	f3 cf       	rjmp	.-26     	; 0x235a <__addsf3x+0x34>
    2374:	46 95       	lsr	r20
    2376:	37 95       	ror	r19
    2378:	27 95       	ror	r18
    237a:	a7 95       	ror	r26
    237c:	f0 40       	sbci	r31, 0x00	; 0
    237e:	53 95       	inc	r21
    2380:	c9 f7       	brne	.-14     	; 0x2374 <__addsf3x+0x4e>
    2382:	7e f4       	brtc	.+30     	; 0x23a2 <__addsf3x+0x7c>
    2384:	1f 16       	cp	r1, r31
    2386:	ba 0b       	sbc	r27, r26
    2388:	62 0b       	sbc	r22, r18
    238a:	73 0b       	sbc	r23, r19
    238c:	84 0b       	sbc	r24, r20
    238e:	ba f0       	brmi	.+46     	; 0x23be <__addsf3x+0x98>
    2390:	91 50       	subi	r25, 0x01	; 1
    2392:	a1 f0       	breq	.+40     	; 0x23bc <__addsf3x+0x96>
    2394:	ff 0f       	add	r31, r31
    2396:	bb 1f       	adc	r27, r27
    2398:	66 1f       	adc	r22, r22
    239a:	77 1f       	adc	r23, r23
    239c:	88 1f       	adc	r24, r24
    239e:	c2 f7       	brpl	.-16     	; 0x2390 <__addsf3x+0x6a>
    23a0:	0e c0       	rjmp	.+28     	; 0x23be <__addsf3x+0x98>
    23a2:	ba 0f       	add	r27, r26
    23a4:	62 1f       	adc	r22, r18
    23a6:	73 1f       	adc	r23, r19
    23a8:	84 1f       	adc	r24, r20
    23aa:	48 f4       	brcc	.+18     	; 0x23be <__addsf3x+0x98>
    23ac:	87 95       	ror	r24
    23ae:	77 95       	ror	r23
    23b0:	67 95       	ror	r22
    23b2:	b7 95       	ror	r27
    23b4:	f7 95       	ror	r31
    23b6:	9e 3f       	cpi	r25, 0xFE	; 254
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <__addsf3x+0x96>
    23ba:	b3 cf       	rjmp	.-154    	; 0x2322 <__addsf3+0x1e>
    23bc:	93 95       	inc	r25
    23be:	88 0f       	add	r24, r24
    23c0:	08 f0       	brcs	.+2      	; 0x23c4 <__addsf3x+0x9e>
    23c2:	99 27       	eor	r25, r25
    23c4:	ee 0f       	add	r30, r30
    23c6:	97 95       	ror	r25
    23c8:	87 95       	ror	r24
    23ca:	08 95       	ret
    23cc:	90 d1       	rcall	.+800    	; 0x26ee <__fp_pscA>
    23ce:	58 f0       	brcs	.+22     	; 0x23e6 <__addsf3x+0xc0>
    23d0:	80 e8       	ldi	r24, 0x80	; 128
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <__addsf3x+0xb2>
    23d6:	9e ef       	ldi	r25, 0xFE	; 254
    23d8:	91 d1       	rcall	.+802    	; 0x26fc <__fp_pscB>
    23da:	28 f0       	brcs	.+10     	; 0x23e6 <__addsf3x+0xc0>
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	51 e0       	ldi	r21, 0x01	; 1
    23e0:	59 f4       	brne	.+22     	; 0x23f8 <atan2+0xe>
    23e2:	5e ef       	ldi	r21, 0xFE	; 254
    23e4:	09 c0       	rjmp	.+18     	; 0x23f8 <atan2+0xe>
    23e6:	5b c1       	rjmp	.+694    	; 0x269e <__fp_nan>
    23e8:	05 c2       	rjmp	.+1034   	; 0x27f4 <__fp_zero>

000023ea <atan2>:
    23ea:	e9 2f       	mov	r30, r25
    23ec:	e0 78       	andi	r30, 0x80	; 128
    23ee:	e0 d1       	rcall	.+960    	; 0x27b0 <__fp_split3>
    23f0:	68 f3       	brcs	.-38     	; 0x23cc <__addsf3x+0xa6>
    23f2:	09 2e       	mov	r0, r25
    23f4:	05 2a       	or	r0, r21
    23f6:	c1 f3       	breq	.-16     	; 0x23e8 <__addsf3x+0xc2>
    23f8:	26 17       	cp	r18, r22
    23fa:	37 07       	cpc	r19, r23
    23fc:	48 07       	cpc	r20, r24
    23fe:	59 07       	cpc	r21, r25
    2400:	38 f0       	brcs	.+14     	; 0x2410 <atan2+0x26>
    2402:	0e 2e       	mov	r0, r30
    2404:	07 f8       	bld	r0, 7
    2406:	e0 25       	eor	r30, r0
    2408:	69 f0       	breq	.+26     	; 0x2424 <atan2+0x3a>
    240a:	e0 25       	eor	r30, r0
    240c:	e0 64       	ori	r30, 0x40	; 64
    240e:	0a c0       	rjmp	.+20     	; 0x2424 <atan2+0x3a>
    2410:	ef 63       	ori	r30, 0x3F	; 63
    2412:	07 f8       	bld	r0, 7
    2414:	00 94       	com	r0
    2416:	07 fa       	bst	r0, 7
    2418:	db 01       	movw	r26, r22
    241a:	b9 01       	movw	r22, r18
    241c:	9d 01       	movw	r18, r26
    241e:	dc 01       	movw	r26, r24
    2420:	ca 01       	movw	r24, r20
    2422:	ad 01       	movw	r20, r26
    2424:	ef 93       	push	r30
    2426:	4a d0       	rcall	.+148    	; 0x24bc <__divsf3_pse>
    2428:	a1 d1       	rcall	.+834    	; 0x276c <__fp_round>
    242a:	0a d0       	rcall	.+20     	; 0x2440 <atan>
    242c:	5f 91       	pop	r21
    242e:	55 23       	and	r21, r21
    2430:	31 f0       	breq	.+12     	; 0x243e <atan2+0x54>
    2432:	2b ed       	ldi	r18, 0xDB	; 219
    2434:	3f e0       	ldi	r19, 0x0F	; 15
    2436:	49 e4       	ldi	r20, 0x49	; 73
    2438:	50 fd       	sbrc	r21, 0
    243a:	49 ec       	ldi	r20, 0xC9	; 201
    243c:	63 cf       	rjmp	.-314    	; 0x2304 <__addsf3>
    243e:	08 95       	ret

00002440 <atan>:
    2440:	df 93       	push	r29
    2442:	dd 27       	eor	r29, r29
    2444:	b9 2f       	mov	r27, r25
    2446:	bf 77       	andi	r27, 0x7F	; 127
    2448:	40 e8       	ldi	r20, 0x80	; 128
    244a:	5f e3       	ldi	r21, 0x3F	; 63
    244c:	16 16       	cp	r1, r22
    244e:	17 06       	cpc	r1, r23
    2450:	48 07       	cpc	r20, r24
    2452:	5b 07       	cpc	r21, r27
    2454:	10 f4       	brcc	.+4      	; 0x245a <atan+0x1a>
    2456:	d9 2f       	mov	r29, r25
    2458:	d8 d1       	rcall	.+944    	; 0x280a <inverse>
    245a:	9f 93       	push	r25
    245c:	8f 93       	push	r24
    245e:	7f 93       	push	r23
    2460:	6f 93       	push	r22
    2462:	43 d2       	rcall	.+1158   	; 0x28ea <square>
    2464:	e8 e6       	ldi	r30, 0x68	; 104
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	1d d1       	rcall	.+570    	; 0x26a4 <__fp_powser>
    246a:	80 d1       	rcall	.+768    	; 0x276c <__fp_round>
    246c:	2f 91       	pop	r18
    246e:	3f 91       	pop	r19
    2470:	4f 91       	pop	r20
    2472:	5f 91       	pop	r21
    2474:	dd d1       	rcall	.+954    	; 0x2830 <__mulsf3x>
    2476:	dd 23       	and	r29, r29
    2478:	49 f0       	breq	.+18     	; 0x248c <atan+0x4c>
    247a:	90 58       	subi	r25, 0x80	; 128
    247c:	a2 ea       	ldi	r26, 0xA2	; 162
    247e:	2a ed       	ldi	r18, 0xDA	; 218
    2480:	3f e0       	ldi	r19, 0x0F	; 15
    2482:	49 ec       	ldi	r20, 0xC9	; 201
    2484:	5f e3       	ldi	r21, 0x3F	; 63
    2486:	d0 78       	andi	r29, 0x80	; 128
    2488:	5d 27       	eor	r21, r29
    248a:	4d df       	rcall	.-358    	; 0x2326 <__addsf3x>
    248c:	df 91       	pop	r29
    248e:	6e c1       	rjmp	.+732    	; 0x276c <__fp_round>

00002490 <__cmpsf2>:
    2490:	dc d0       	rcall	.+440    	; 0x264a <__fp_cmp>
    2492:	08 f4       	brcc	.+2      	; 0x2496 <__cmpsf2+0x6>
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	08 95       	ret

00002498 <cos>:
    2498:	39 d1       	rcall	.+626    	; 0x270c <__fp_rempio2>
    249a:	e3 95       	inc	r30
    249c:	78 c1       	rjmp	.+752    	; 0x278e <__fp_sinus>

0000249e <__divsf3>:
    249e:	0c d0       	rcall	.+24     	; 0x24b8 <__divsf3x>
    24a0:	65 c1       	rjmp	.+714    	; 0x276c <__fp_round>
    24a2:	2c d1       	rcall	.+600    	; 0x26fc <__fp_pscB>
    24a4:	40 f0       	brcs	.+16     	; 0x24b6 <__divsf3+0x18>
    24a6:	23 d1       	rcall	.+582    	; 0x26ee <__fp_pscA>
    24a8:	30 f0       	brcs	.+12     	; 0x24b6 <__divsf3+0x18>
    24aa:	21 f4       	brne	.+8      	; 0x24b4 <__divsf3+0x16>
    24ac:	5f 3f       	cpi	r21, 0xFF	; 255
    24ae:	19 f0       	breq	.+6      	; 0x24b6 <__divsf3+0x18>
    24b0:	f0 c0       	rjmp	.+480    	; 0x2692 <__fp_inf>
    24b2:	51 11       	cpse	r21, r1
    24b4:	a0 c1       	rjmp	.+832    	; 0x27f6 <__fp_szero>
    24b6:	f3 c0       	rjmp	.+486    	; 0x269e <__fp_nan>

000024b8 <__divsf3x>:
    24b8:	7b d1       	rcall	.+758    	; 0x27b0 <__fp_split3>
    24ba:	98 f3       	brcs	.-26     	; 0x24a2 <__divsf3+0x4>

000024bc <__divsf3_pse>:
    24bc:	99 23       	and	r25, r25
    24be:	c9 f3       	breq	.-14     	; 0x24b2 <__divsf3+0x14>
    24c0:	55 23       	and	r21, r21
    24c2:	b1 f3       	breq	.-20     	; 0x24b0 <__divsf3+0x12>
    24c4:	95 1b       	sub	r25, r21
    24c6:	55 0b       	sbc	r21, r21
    24c8:	bb 27       	eor	r27, r27
    24ca:	aa 27       	eor	r26, r26
    24cc:	62 17       	cp	r22, r18
    24ce:	73 07       	cpc	r23, r19
    24d0:	84 07       	cpc	r24, r20
    24d2:	38 f0       	brcs	.+14     	; 0x24e2 <__divsf3_pse+0x26>
    24d4:	9f 5f       	subi	r25, 0xFF	; 255
    24d6:	5f 4f       	sbci	r21, 0xFF	; 255
    24d8:	22 0f       	add	r18, r18
    24da:	33 1f       	adc	r19, r19
    24dc:	44 1f       	adc	r20, r20
    24de:	aa 1f       	adc	r26, r26
    24e0:	a9 f3       	breq	.-22     	; 0x24cc <__divsf3_pse+0x10>
    24e2:	33 d0       	rcall	.+102    	; 0x254a <__divsf3_pse+0x8e>
    24e4:	0e 2e       	mov	r0, r30
    24e6:	3a f0       	brmi	.+14     	; 0x24f6 <__divsf3_pse+0x3a>
    24e8:	e0 e8       	ldi	r30, 0x80	; 128
    24ea:	30 d0       	rcall	.+96     	; 0x254c <__divsf3_pse+0x90>
    24ec:	91 50       	subi	r25, 0x01	; 1
    24ee:	50 40       	sbci	r21, 0x00	; 0
    24f0:	e6 95       	lsr	r30
    24f2:	00 1c       	adc	r0, r0
    24f4:	ca f7       	brpl	.-14     	; 0x24e8 <__divsf3_pse+0x2c>
    24f6:	29 d0       	rcall	.+82     	; 0x254a <__divsf3_pse+0x8e>
    24f8:	fe 2f       	mov	r31, r30
    24fa:	27 d0       	rcall	.+78     	; 0x254a <__divsf3_pse+0x8e>
    24fc:	66 0f       	add	r22, r22
    24fe:	77 1f       	adc	r23, r23
    2500:	88 1f       	adc	r24, r24
    2502:	bb 1f       	adc	r27, r27
    2504:	26 17       	cp	r18, r22
    2506:	37 07       	cpc	r19, r23
    2508:	48 07       	cpc	r20, r24
    250a:	ab 07       	cpc	r26, r27
    250c:	b0 e8       	ldi	r27, 0x80	; 128
    250e:	09 f0       	breq	.+2      	; 0x2512 <__divsf3_pse+0x56>
    2510:	bb 0b       	sbc	r27, r27
    2512:	80 2d       	mov	r24, r0
    2514:	bf 01       	movw	r22, r30
    2516:	ff 27       	eor	r31, r31
    2518:	93 58       	subi	r25, 0x83	; 131
    251a:	5f 4f       	sbci	r21, 0xFF	; 255
    251c:	2a f0       	brmi	.+10     	; 0x2528 <__divsf3_pse+0x6c>
    251e:	9e 3f       	cpi	r25, 0xFE	; 254
    2520:	51 05       	cpc	r21, r1
    2522:	68 f0       	brcs	.+26     	; 0x253e <__divsf3_pse+0x82>
    2524:	b6 c0       	rjmp	.+364    	; 0x2692 <__fp_inf>
    2526:	67 c1       	rjmp	.+718    	; 0x27f6 <__fp_szero>
    2528:	5f 3f       	cpi	r21, 0xFF	; 255
    252a:	ec f3       	brlt	.-6      	; 0x2526 <__divsf3_pse+0x6a>
    252c:	98 3e       	cpi	r25, 0xE8	; 232
    252e:	dc f3       	brlt	.-10     	; 0x2526 <__divsf3_pse+0x6a>
    2530:	86 95       	lsr	r24
    2532:	77 95       	ror	r23
    2534:	67 95       	ror	r22
    2536:	b7 95       	ror	r27
    2538:	f7 95       	ror	r31
    253a:	9f 5f       	subi	r25, 0xFF	; 255
    253c:	c9 f7       	brne	.-14     	; 0x2530 <__divsf3_pse+0x74>
    253e:	88 0f       	add	r24, r24
    2540:	91 1d       	adc	r25, r1
    2542:	96 95       	lsr	r25
    2544:	87 95       	ror	r24
    2546:	97 f9       	bld	r25, 7
    2548:	08 95       	ret
    254a:	e1 e0       	ldi	r30, 0x01	; 1
    254c:	66 0f       	add	r22, r22
    254e:	77 1f       	adc	r23, r23
    2550:	88 1f       	adc	r24, r24
    2552:	bb 1f       	adc	r27, r27
    2554:	62 17       	cp	r22, r18
    2556:	73 07       	cpc	r23, r19
    2558:	84 07       	cpc	r24, r20
    255a:	ba 07       	cpc	r27, r26
    255c:	20 f0       	brcs	.+8      	; 0x2566 <__divsf3_pse+0xaa>
    255e:	62 1b       	sub	r22, r18
    2560:	73 0b       	sbc	r23, r19
    2562:	84 0b       	sbc	r24, r20
    2564:	ba 0b       	sbc	r27, r26
    2566:	ee 1f       	adc	r30, r30
    2568:	88 f7       	brcc	.-30     	; 0x254c <__divsf3_pse+0x90>
    256a:	e0 95       	com	r30
    256c:	08 95       	ret

0000256e <__fixsfsi>:
    256e:	04 d0       	rcall	.+8      	; 0x2578 <__fixunssfsi>
    2570:	68 94       	set
    2572:	b1 11       	cpse	r27, r1
    2574:	40 c1       	rjmp	.+640    	; 0x27f6 <__fp_szero>
    2576:	08 95       	ret

00002578 <__fixunssfsi>:
    2578:	23 d1       	rcall	.+582    	; 0x27c0 <__fp_splitA>
    257a:	88 f0       	brcs	.+34     	; 0x259e <__fixunssfsi+0x26>
    257c:	9f 57       	subi	r25, 0x7F	; 127
    257e:	90 f0       	brcs	.+36     	; 0x25a4 <__fixunssfsi+0x2c>
    2580:	b9 2f       	mov	r27, r25
    2582:	99 27       	eor	r25, r25
    2584:	b7 51       	subi	r27, 0x17	; 23
    2586:	a0 f0       	brcs	.+40     	; 0x25b0 <__fixunssfsi+0x38>
    2588:	d1 f0       	breq	.+52     	; 0x25be <__fixunssfsi+0x46>
    258a:	66 0f       	add	r22, r22
    258c:	77 1f       	adc	r23, r23
    258e:	88 1f       	adc	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	1a f0       	brmi	.+6      	; 0x259a <__fixunssfsi+0x22>
    2594:	ba 95       	dec	r27
    2596:	c9 f7       	brne	.-14     	; 0x258a <__fixunssfsi+0x12>
    2598:	12 c0       	rjmp	.+36     	; 0x25be <__fixunssfsi+0x46>
    259a:	b1 30       	cpi	r27, 0x01	; 1
    259c:	81 f0       	breq	.+32     	; 0x25be <__fixunssfsi+0x46>
    259e:	2a d1       	rcall	.+596    	; 0x27f4 <__fp_zero>
    25a0:	b1 e0       	ldi	r27, 0x01	; 1
    25a2:	08 95       	ret
    25a4:	27 c1       	rjmp	.+590    	; 0x27f4 <__fp_zero>
    25a6:	67 2f       	mov	r22, r23
    25a8:	78 2f       	mov	r23, r24
    25aa:	88 27       	eor	r24, r24
    25ac:	b8 5f       	subi	r27, 0xF8	; 248
    25ae:	39 f0       	breq	.+14     	; 0x25be <__fixunssfsi+0x46>
    25b0:	b9 3f       	cpi	r27, 0xF9	; 249
    25b2:	cc f3       	brlt	.-14     	; 0x25a6 <__fixunssfsi+0x2e>
    25b4:	86 95       	lsr	r24
    25b6:	77 95       	ror	r23
    25b8:	67 95       	ror	r22
    25ba:	b3 95       	inc	r27
    25bc:	d9 f7       	brne	.-10     	; 0x25b4 <__fixunssfsi+0x3c>
    25be:	3e f4       	brtc	.+14     	; 0x25ce <__fixunssfsi+0x56>
    25c0:	90 95       	com	r25
    25c2:	80 95       	com	r24
    25c4:	70 95       	com	r23
    25c6:	61 95       	neg	r22
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8f 4f       	sbci	r24, 0xFF	; 255
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	08 95       	ret

000025d0 <__floatunsisf>:
    25d0:	e8 94       	clt
    25d2:	09 c0       	rjmp	.+18     	; 0x25e6 <__floatsisf+0x12>

000025d4 <__floatsisf>:
    25d4:	97 fb       	bst	r25, 7
    25d6:	3e f4       	brtc	.+14     	; 0x25e6 <__floatsisf+0x12>
    25d8:	90 95       	com	r25
    25da:	80 95       	com	r24
    25dc:	70 95       	com	r23
    25de:	61 95       	neg	r22
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	8f 4f       	sbci	r24, 0xFF	; 255
    25e4:	9f 4f       	sbci	r25, 0xFF	; 255
    25e6:	99 23       	and	r25, r25
    25e8:	a9 f0       	breq	.+42     	; 0x2614 <__floatsisf+0x40>
    25ea:	f9 2f       	mov	r31, r25
    25ec:	96 e9       	ldi	r25, 0x96	; 150
    25ee:	bb 27       	eor	r27, r27
    25f0:	93 95       	inc	r25
    25f2:	f6 95       	lsr	r31
    25f4:	87 95       	ror	r24
    25f6:	77 95       	ror	r23
    25f8:	67 95       	ror	r22
    25fa:	b7 95       	ror	r27
    25fc:	f1 11       	cpse	r31, r1
    25fe:	f8 cf       	rjmp	.-16     	; 0x25f0 <__floatsisf+0x1c>
    2600:	fa f4       	brpl	.+62     	; 0x2640 <__floatsisf+0x6c>
    2602:	bb 0f       	add	r27, r27
    2604:	11 f4       	brne	.+4      	; 0x260a <__floatsisf+0x36>
    2606:	60 ff       	sbrs	r22, 0
    2608:	1b c0       	rjmp	.+54     	; 0x2640 <__floatsisf+0x6c>
    260a:	6f 5f       	subi	r22, 0xFF	; 255
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	8f 4f       	sbci	r24, 0xFF	; 255
    2610:	9f 4f       	sbci	r25, 0xFF	; 255
    2612:	16 c0       	rjmp	.+44     	; 0x2640 <__floatsisf+0x6c>
    2614:	88 23       	and	r24, r24
    2616:	11 f0       	breq	.+4      	; 0x261c <__floatsisf+0x48>
    2618:	96 e9       	ldi	r25, 0x96	; 150
    261a:	11 c0       	rjmp	.+34     	; 0x263e <__floatsisf+0x6a>
    261c:	77 23       	and	r23, r23
    261e:	21 f0       	breq	.+8      	; 0x2628 <__floatsisf+0x54>
    2620:	9e e8       	ldi	r25, 0x8E	; 142
    2622:	87 2f       	mov	r24, r23
    2624:	76 2f       	mov	r23, r22
    2626:	05 c0       	rjmp	.+10     	; 0x2632 <__floatsisf+0x5e>
    2628:	66 23       	and	r22, r22
    262a:	71 f0       	breq	.+28     	; 0x2648 <__floatsisf+0x74>
    262c:	96 e8       	ldi	r25, 0x86	; 134
    262e:	86 2f       	mov	r24, r22
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	2a f0       	brmi	.+10     	; 0x2640 <__floatsisf+0x6c>
    2636:	9a 95       	dec	r25
    2638:	66 0f       	add	r22, r22
    263a:	77 1f       	adc	r23, r23
    263c:	88 1f       	adc	r24, r24
    263e:	da f7       	brpl	.-10     	; 0x2636 <__floatsisf+0x62>
    2640:	88 0f       	add	r24, r24
    2642:	96 95       	lsr	r25
    2644:	87 95       	ror	r24
    2646:	97 f9       	bld	r25, 7
    2648:	08 95       	ret

0000264a <__fp_cmp>:
    264a:	99 0f       	add	r25, r25
    264c:	00 08       	sbc	r0, r0
    264e:	55 0f       	add	r21, r21
    2650:	aa 0b       	sbc	r26, r26
    2652:	e0 e8       	ldi	r30, 0x80	; 128
    2654:	fe ef       	ldi	r31, 0xFE	; 254
    2656:	16 16       	cp	r1, r22
    2658:	17 06       	cpc	r1, r23
    265a:	e8 07       	cpc	r30, r24
    265c:	f9 07       	cpc	r31, r25
    265e:	c0 f0       	brcs	.+48     	; 0x2690 <__fp_cmp+0x46>
    2660:	12 16       	cp	r1, r18
    2662:	13 06       	cpc	r1, r19
    2664:	e4 07       	cpc	r30, r20
    2666:	f5 07       	cpc	r31, r21
    2668:	98 f0       	brcs	.+38     	; 0x2690 <__fp_cmp+0x46>
    266a:	62 1b       	sub	r22, r18
    266c:	73 0b       	sbc	r23, r19
    266e:	84 0b       	sbc	r24, r20
    2670:	95 0b       	sbc	r25, r21
    2672:	39 f4       	brne	.+14     	; 0x2682 <__fp_cmp+0x38>
    2674:	0a 26       	eor	r0, r26
    2676:	61 f0       	breq	.+24     	; 0x2690 <__fp_cmp+0x46>
    2678:	23 2b       	or	r18, r19
    267a:	24 2b       	or	r18, r20
    267c:	25 2b       	or	r18, r21
    267e:	21 f4       	brne	.+8      	; 0x2688 <__fp_cmp+0x3e>
    2680:	08 95       	ret
    2682:	0a 26       	eor	r0, r26
    2684:	09 f4       	brne	.+2      	; 0x2688 <__fp_cmp+0x3e>
    2686:	a1 40       	sbci	r26, 0x01	; 1
    2688:	a6 95       	lsr	r26
    268a:	8f ef       	ldi	r24, 0xFF	; 255
    268c:	81 1d       	adc	r24, r1
    268e:	81 1d       	adc	r24, r1
    2690:	08 95       	ret

00002692 <__fp_inf>:
    2692:	97 f9       	bld	r25, 7
    2694:	9f 67       	ori	r25, 0x7F	; 127
    2696:	80 e8       	ldi	r24, 0x80	; 128
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	08 95       	ret

0000269e <__fp_nan>:
    269e:	9f ef       	ldi	r25, 0xFF	; 255
    26a0:	80 ec       	ldi	r24, 0xC0	; 192
    26a2:	08 95       	ret

000026a4 <__fp_powser>:
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	1f 93       	push	r17
    26aa:	0f 93       	push	r16
    26ac:	ff 92       	push	r15
    26ae:	ef 92       	push	r14
    26b0:	df 92       	push	r13
    26b2:	7b 01       	movw	r14, r22
    26b4:	8c 01       	movw	r16, r24
    26b6:	68 94       	set
    26b8:	05 c0       	rjmp	.+10     	; 0x26c4 <__fp_powser+0x20>
    26ba:	da 2e       	mov	r13, r26
    26bc:	ef 01       	movw	r28, r30
    26be:	b8 d0       	rcall	.+368    	; 0x2830 <__mulsf3x>
    26c0:	fe 01       	movw	r30, r28
    26c2:	e8 94       	clt
    26c4:	a5 91       	lpm	r26, Z+
    26c6:	25 91       	lpm	r18, Z+
    26c8:	35 91       	lpm	r19, Z+
    26ca:	45 91       	lpm	r20, Z+
    26cc:	55 91       	lpm	r21, Z+
    26ce:	ae f3       	brts	.-22     	; 0x26ba <__fp_powser+0x16>
    26d0:	ef 01       	movw	r28, r30
    26d2:	29 de       	rcall	.-942    	; 0x2326 <__addsf3x>
    26d4:	fe 01       	movw	r30, r28
    26d6:	97 01       	movw	r18, r14
    26d8:	a8 01       	movw	r20, r16
    26da:	da 94       	dec	r13
    26dc:	79 f7       	brne	.-34     	; 0x26bc <__fp_powser+0x18>
    26de:	df 90       	pop	r13
    26e0:	ef 90       	pop	r14
    26e2:	ff 90       	pop	r15
    26e4:	0f 91       	pop	r16
    26e6:	1f 91       	pop	r17
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <__fp_pscA>:
    26ee:	00 24       	eor	r0, r0
    26f0:	0a 94       	dec	r0
    26f2:	16 16       	cp	r1, r22
    26f4:	17 06       	cpc	r1, r23
    26f6:	18 06       	cpc	r1, r24
    26f8:	09 06       	cpc	r0, r25
    26fa:	08 95       	ret

000026fc <__fp_pscB>:
    26fc:	00 24       	eor	r0, r0
    26fe:	0a 94       	dec	r0
    2700:	12 16       	cp	r1, r18
    2702:	13 06       	cpc	r1, r19
    2704:	14 06       	cpc	r1, r20
    2706:	05 06       	cpc	r0, r21
    2708:	08 95       	ret
    270a:	c9 cf       	rjmp	.-110    	; 0x269e <__fp_nan>

0000270c <__fp_rempio2>:
    270c:	59 d0       	rcall	.+178    	; 0x27c0 <__fp_splitA>
    270e:	e8 f3       	brcs	.-6      	; 0x270a <__fp_pscB+0xe>
    2710:	e8 94       	clt
    2712:	ef ef       	ldi	r30, 0xFF	; 255
    2714:	bb 27       	eor	r27, r27
    2716:	3f e0       	ldi	r19, 0x0F	; 15
    2718:	48 ec       	ldi	r20, 0xC8	; 200
    271a:	5f e7       	ldi	r21, 0x7F	; 127
    271c:	6b 3d       	cpi	r22, 0xDB	; 219
    271e:	73 07       	cpc	r23, r19
    2720:	84 07       	cpc	r24, r20
    2722:	95 07       	cpc	r25, r21
    2724:	08 f1       	brcs	.+66     	; 0x2768 <__fp_rempio2+0x5c>
    2726:	ff 27       	eor	r31, r31
    2728:	9f 57       	subi	r25, 0x7F	; 127
    272a:	b2 5a       	subi	r27, 0xA2	; 162
    272c:	6a 4d       	sbci	r22, 0xDA	; 218
    272e:	7f 40       	sbci	r23, 0x0F	; 15
    2730:	89 4c       	sbci	r24, 0xC9	; 201
    2732:	f0 40       	sbci	r31, 0x00	; 0
    2734:	32 f4       	brpl	.+12     	; 0x2742 <__fp_rempio2+0x36>
    2736:	be 55       	subi	r27, 0x5E	; 94
    2738:	65 42       	sbci	r22, 0x25	; 37
    273a:	70 4f       	sbci	r23, 0xF0	; 240
    273c:	86 43       	sbci	r24, 0x36	; 54
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	08 94       	sec
    2742:	ee 1f       	adc	r30, r30
    2744:	91 50       	subi	r25, 0x01	; 1
    2746:	30 f0       	brcs	.+12     	; 0x2754 <__fp_rempio2+0x48>
    2748:	bb 0f       	add	r27, r27
    274a:	66 1f       	adc	r22, r22
    274c:	77 1f       	adc	r23, r23
    274e:	88 1f       	adc	r24, r24
    2750:	ff 1f       	adc	r31, r31
    2752:	eb cf       	rjmp	.-42     	; 0x272a <__fp_rempio2+0x1e>
    2754:	9e e7       	ldi	r25, 0x7E	; 126
    2756:	88 23       	and	r24, r24
    2758:	32 f0       	brmi	.+12     	; 0x2766 <__fp_rempio2+0x5a>
    275a:	bb 0f       	add	r27, r27
    275c:	66 1f       	adc	r22, r22
    275e:	77 1f       	adc	r23, r23
    2760:	88 1f       	adc	r24, r24
    2762:	9a 95       	dec	r25
    2764:	c1 f7       	brne	.-16     	; 0x2756 <__fp_rempio2+0x4a>
    2766:	93 95       	inc	r25
    2768:	e0 95       	com	r30
    276a:	c2 c0       	rjmp	.+388    	; 0x28f0 <__fp_mpack>

0000276c <__fp_round>:
    276c:	09 2e       	mov	r0, r25
    276e:	03 94       	inc	r0
    2770:	00 0c       	add	r0, r0
    2772:	11 f4       	brne	.+4      	; 0x2778 <__fp_round+0xc>
    2774:	88 23       	and	r24, r24
    2776:	52 f0       	brmi	.+20     	; 0x278c <__fp_round+0x20>
    2778:	bb 0f       	add	r27, r27
    277a:	40 f4       	brcc	.+16     	; 0x278c <__fp_round+0x20>
    277c:	bf 2b       	or	r27, r31
    277e:	11 f4       	brne	.+4      	; 0x2784 <__fp_round+0x18>
    2780:	60 ff       	sbrs	r22, 0
    2782:	04 c0       	rjmp	.+8      	; 0x278c <__fp_round+0x20>
    2784:	6f 5f       	subi	r22, 0xFF	; 255
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	8f 4f       	sbci	r24, 0xFF	; 255
    278a:	9f 4f       	sbci	r25, 0xFF	; 255
    278c:	08 95       	ret

0000278e <__fp_sinus>:
    278e:	ef 93       	push	r30
    2790:	e0 ff       	sbrs	r30, 0
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <__fp_sinus+0x12>
    2794:	a2 ea       	ldi	r26, 0xA2	; 162
    2796:	2a ed       	ldi	r18, 0xDA	; 218
    2798:	3f e0       	ldi	r19, 0x0F	; 15
    279a:	49 ec       	ldi	r20, 0xC9	; 201
    279c:	5f eb       	ldi	r21, 0xBF	; 191
    279e:	c3 dd       	rcall	.-1146   	; 0x2326 <__addsf3x>
    27a0:	e5 df       	rcall	.-54     	; 0x276c <__fp_round>
    27a2:	0f 90       	pop	r0
    27a4:	03 94       	inc	r0
    27a6:	01 fc       	sbrc	r0, 1
    27a8:	90 58       	subi	r25, 0x80	; 128
    27aa:	e5 e9       	ldi	r30, 0x95	; 149
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	b0 c0       	rjmp	.+352    	; 0x2910 <__fp_powsodd>

000027b0 <__fp_split3>:
    27b0:	57 fd       	sbrc	r21, 7
    27b2:	90 58       	subi	r25, 0x80	; 128
    27b4:	44 0f       	add	r20, r20
    27b6:	55 1f       	adc	r21, r21
    27b8:	59 f0       	breq	.+22     	; 0x27d0 <__fp_splitA+0x10>
    27ba:	5f 3f       	cpi	r21, 0xFF	; 255
    27bc:	71 f0       	breq	.+28     	; 0x27da <__fp_splitA+0x1a>
    27be:	47 95       	ror	r20

000027c0 <__fp_splitA>:
    27c0:	88 0f       	add	r24, r24
    27c2:	97 fb       	bst	r25, 7
    27c4:	99 1f       	adc	r25, r25
    27c6:	61 f0       	breq	.+24     	; 0x27e0 <__fp_splitA+0x20>
    27c8:	9f 3f       	cpi	r25, 0xFF	; 255
    27ca:	79 f0       	breq	.+30     	; 0x27ea <__fp_splitA+0x2a>
    27cc:	87 95       	ror	r24
    27ce:	08 95       	ret
    27d0:	12 16       	cp	r1, r18
    27d2:	13 06       	cpc	r1, r19
    27d4:	14 06       	cpc	r1, r20
    27d6:	55 1f       	adc	r21, r21
    27d8:	f2 cf       	rjmp	.-28     	; 0x27be <__fp_split3+0xe>
    27da:	46 95       	lsr	r20
    27dc:	f1 df       	rcall	.-30     	; 0x27c0 <__fp_splitA>
    27de:	08 c0       	rjmp	.+16     	; 0x27f0 <__fp_splitA+0x30>
    27e0:	16 16       	cp	r1, r22
    27e2:	17 06       	cpc	r1, r23
    27e4:	18 06       	cpc	r1, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	f1 cf       	rjmp	.-30     	; 0x27cc <__fp_splitA+0xc>
    27ea:	86 95       	lsr	r24
    27ec:	71 05       	cpc	r23, r1
    27ee:	61 05       	cpc	r22, r1
    27f0:	08 94       	sec
    27f2:	08 95       	ret

000027f4 <__fp_zero>:
    27f4:	e8 94       	clt

000027f6 <__fp_szero>:
    27f6:	bb 27       	eor	r27, r27
    27f8:	66 27       	eor	r22, r22
    27fa:	77 27       	eor	r23, r23
    27fc:	cb 01       	movw	r24, r22
    27fe:	97 f9       	bld	r25, 7
    2800:	08 95       	ret

00002802 <__gesf2>:
    2802:	23 df       	rcall	.-442    	; 0x264a <__fp_cmp>
    2804:	08 f4       	brcc	.+2      	; 0x2808 <__gesf2+0x6>
    2806:	8f ef       	ldi	r24, 0xFF	; 255
    2808:	08 95       	ret

0000280a <inverse>:
    280a:	9b 01       	movw	r18, r22
    280c:	ac 01       	movw	r20, r24
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	80 e8       	ldi	r24, 0x80	; 128
    2814:	9f e3       	ldi	r25, 0x3F	; 63
    2816:	43 ce       	rjmp	.-890    	; 0x249e <__divsf3>

00002818 <__mulsf3>:
    2818:	0b d0       	rcall	.+22     	; 0x2830 <__mulsf3x>
    281a:	a8 cf       	rjmp	.-176    	; 0x276c <__fp_round>
    281c:	68 df       	rcall	.-304    	; 0x26ee <__fp_pscA>
    281e:	28 f0       	brcs	.+10     	; 0x282a <__mulsf3+0x12>
    2820:	6d df       	rcall	.-294    	; 0x26fc <__fp_pscB>
    2822:	18 f0       	brcs	.+6      	; 0x282a <__mulsf3+0x12>
    2824:	95 23       	and	r25, r21
    2826:	09 f0       	breq	.+2      	; 0x282a <__mulsf3+0x12>
    2828:	34 cf       	rjmp	.-408    	; 0x2692 <__fp_inf>
    282a:	39 cf       	rjmp	.-398    	; 0x269e <__fp_nan>
    282c:	11 24       	eor	r1, r1
    282e:	e3 cf       	rjmp	.-58     	; 0x27f6 <__fp_szero>

00002830 <__mulsf3x>:
    2830:	bf df       	rcall	.-130    	; 0x27b0 <__fp_split3>
    2832:	a0 f3       	brcs	.-24     	; 0x281c <__mulsf3+0x4>

00002834 <__mulsf3_pse>:
    2834:	95 9f       	mul	r25, r21
    2836:	d1 f3       	breq	.-12     	; 0x282c <__mulsf3+0x14>
    2838:	95 0f       	add	r25, r21
    283a:	50 e0       	ldi	r21, 0x00	; 0
    283c:	55 1f       	adc	r21, r21
    283e:	62 9f       	mul	r22, r18
    2840:	f0 01       	movw	r30, r0
    2842:	72 9f       	mul	r23, r18
    2844:	bb 27       	eor	r27, r27
    2846:	f0 0d       	add	r31, r0
    2848:	b1 1d       	adc	r27, r1
    284a:	63 9f       	mul	r22, r19
    284c:	aa 27       	eor	r26, r26
    284e:	f0 0d       	add	r31, r0
    2850:	b1 1d       	adc	r27, r1
    2852:	aa 1f       	adc	r26, r26
    2854:	64 9f       	mul	r22, r20
    2856:	66 27       	eor	r22, r22
    2858:	b0 0d       	add	r27, r0
    285a:	a1 1d       	adc	r26, r1
    285c:	66 1f       	adc	r22, r22
    285e:	82 9f       	mul	r24, r18
    2860:	22 27       	eor	r18, r18
    2862:	b0 0d       	add	r27, r0
    2864:	a1 1d       	adc	r26, r1
    2866:	62 1f       	adc	r22, r18
    2868:	73 9f       	mul	r23, r19
    286a:	b0 0d       	add	r27, r0
    286c:	a1 1d       	adc	r26, r1
    286e:	62 1f       	adc	r22, r18
    2870:	83 9f       	mul	r24, r19
    2872:	a0 0d       	add	r26, r0
    2874:	61 1d       	adc	r22, r1
    2876:	22 1f       	adc	r18, r18
    2878:	74 9f       	mul	r23, r20
    287a:	33 27       	eor	r19, r19
    287c:	a0 0d       	add	r26, r0
    287e:	61 1d       	adc	r22, r1
    2880:	23 1f       	adc	r18, r19
    2882:	84 9f       	mul	r24, r20
    2884:	60 0d       	add	r22, r0
    2886:	21 1d       	adc	r18, r1
    2888:	82 2f       	mov	r24, r18
    288a:	76 2f       	mov	r23, r22
    288c:	6a 2f       	mov	r22, r26
    288e:	11 24       	eor	r1, r1
    2890:	9f 57       	subi	r25, 0x7F	; 127
    2892:	50 40       	sbci	r21, 0x00	; 0
    2894:	8a f0       	brmi	.+34     	; 0x28b8 <__mulsf3_pse+0x84>
    2896:	e1 f0       	breq	.+56     	; 0x28d0 <__mulsf3_pse+0x9c>
    2898:	88 23       	and	r24, r24
    289a:	4a f0       	brmi	.+18     	; 0x28ae <__mulsf3_pse+0x7a>
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	bb 1f       	adc	r27, r27
    28a2:	66 1f       	adc	r22, r22
    28a4:	77 1f       	adc	r23, r23
    28a6:	88 1f       	adc	r24, r24
    28a8:	91 50       	subi	r25, 0x01	; 1
    28aa:	50 40       	sbci	r21, 0x00	; 0
    28ac:	a9 f7       	brne	.-22     	; 0x2898 <__mulsf3_pse+0x64>
    28ae:	9e 3f       	cpi	r25, 0xFE	; 254
    28b0:	51 05       	cpc	r21, r1
    28b2:	70 f0       	brcs	.+28     	; 0x28d0 <__mulsf3_pse+0x9c>
    28b4:	ee ce       	rjmp	.-548    	; 0x2692 <__fp_inf>
    28b6:	9f cf       	rjmp	.-194    	; 0x27f6 <__fp_szero>
    28b8:	5f 3f       	cpi	r21, 0xFF	; 255
    28ba:	ec f3       	brlt	.-6      	; 0x28b6 <__mulsf3_pse+0x82>
    28bc:	98 3e       	cpi	r25, 0xE8	; 232
    28be:	dc f3       	brlt	.-10     	; 0x28b6 <__mulsf3_pse+0x82>
    28c0:	86 95       	lsr	r24
    28c2:	77 95       	ror	r23
    28c4:	67 95       	ror	r22
    28c6:	b7 95       	ror	r27
    28c8:	f7 95       	ror	r31
    28ca:	e7 95       	ror	r30
    28cc:	9f 5f       	subi	r25, 0xFF	; 255
    28ce:	c1 f7       	brne	.-16     	; 0x28c0 <__mulsf3_pse+0x8c>
    28d0:	fe 2b       	or	r31, r30
    28d2:	88 0f       	add	r24, r24
    28d4:	91 1d       	adc	r25, r1
    28d6:	96 95       	lsr	r25
    28d8:	87 95       	ror	r24
    28da:	97 f9       	bld	r25, 7
    28dc:	08 95       	ret

000028de <sin>:
    28de:	9f 93       	push	r25
    28e0:	15 df       	rcall	.-470    	; 0x270c <__fp_rempio2>
    28e2:	0f 90       	pop	r0
    28e4:	07 fc       	sbrc	r0, 7
    28e6:	ee 5f       	subi	r30, 0xFE	; 254
    28e8:	52 cf       	rjmp	.-348    	; 0x278e <__fp_sinus>

000028ea <square>:
    28ea:	9b 01       	movw	r18, r22
    28ec:	ac 01       	movw	r20, r24
    28ee:	94 cf       	rjmp	.-216    	; 0x2818 <__mulsf3>

000028f0 <__fp_mpack>:
    28f0:	9f 3f       	cpi	r25, 0xFF	; 255
    28f2:	49 f0       	breq	.+18     	; 0x2906 <__fp_mpack+0x16>
    28f4:	91 50       	subi	r25, 0x01	; 1
    28f6:	28 f4       	brcc	.+10     	; 0x2902 <__fp_mpack+0x12>
    28f8:	86 95       	lsr	r24
    28fa:	77 95       	ror	r23
    28fc:	67 95       	ror	r22
    28fe:	b7 95       	ror	r27
    2900:	9f 5f       	subi	r25, 0xFF	; 255
    2902:	80 38       	cpi	r24, 0x80	; 128
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	88 0f       	add	r24, r24
    2908:	96 95       	lsr	r25
    290a:	87 95       	ror	r24
    290c:	97 f9       	bld	r25, 7
    290e:	08 95       	ret

00002910 <__fp_powsodd>:
    2910:	9f 93       	push	r25
    2912:	8f 93       	push	r24
    2914:	7f 93       	push	r23
    2916:	6f 93       	push	r22
    2918:	ff 93       	push	r31
    291a:	ef 93       	push	r30
    291c:	9b 01       	movw	r18, r22
    291e:	ac 01       	movw	r20, r24
    2920:	7b df       	rcall	.-266    	; 0x2818 <__mulsf3>
    2922:	ef 91       	pop	r30
    2924:	ff 91       	pop	r31
    2926:	be de       	rcall	.-644    	; 0x26a4 <__fp_powser>
    2928:	2f 91       	pop	r18
    292a:	3f 91       	pop	r19
    292c:	4f 91       	pop	r20
    292e:	5f 91       	pop	r21
    2930:	73 cf       	rjmp	.-282    	; 0x2818 <__mulsf3>

00002932 <__mulsi3>:
    2932:	62 9f       	mul	r22, r18
    2934:	d0 01       	movw	r26, r0
    2936:	73 9f       	mul	r23, r19
    2938:	f0 01       	movw	r30, r0
    293a:	82 9f       	mul	r24, r18
    293c:	e0 0d       	add	r30, r0
    293e:	f1 1d       	adc	r31, r1
    2940:	64 9f       	mul	r22, r20
    2942:	e0 0d       	add	r30, r0
    2944:	f1 1d       	adc	r31, r1
    2946:	92 9f       	mul	r25, r18
    2948:	f0 0d       	add	r31, r0
    294a:	83 9f       	mul	r24, r19
    294c:	f0 0d       	add	r31, r0
    294e:	74 9f       	mul	r23, r20
    2950:	f0 0d       	add	r31, r0
    2952:	65 9f       	mul	r22, r21
    2954:	f0 0d       	add	r31, r0
    2956:	99 27       	eor	r25, r25
    2958:	72 9f       	mul	r23, r18
    295a:	b0 0d       	add	r27, r0
    295c:	e1 1d       	adc	r30, r1
    295e:	f9 1f       	adc	r31, r25
    2960:	63 9f       	mul	r22, r19
    2962:	b0 0d       	add	r27, r0
    2964:	e1 1d       	adc	r30, r1
    2966:	f9 1f       	adc	r31, r25
    2968:	bd 01       	movw	r22, r26
    296a:	cf 01       	movw	r24, r30
    296c:	11 24       	eor	r1, r1
    296e:	08 95       	ret

00002970 <__udivmodqi4>:
    2970:	99 1b       	sub	r25, r25
    2972:	79 e0       	ldi	r23, 0x09	; 9
    2974:	04 c0       	rjmp	.+8      	; 0x297e <__udivmodqi4_ep>

00002976 <__udivmodqi4_loop>:
    2976:	99 1f       	adc	r25, r25
    2978:	96 17       	cp	r25, r22
    297a:	08 f0       	brcs	.+2      	; 0x297e <__udivmodqi4_ep>
    297c:	96 1b       	sub	r25, r22

0000297e <__udivmodqi4_ep>:
    297e:	88 1f       	adc	r24, r24
    2980:	7a 95       	dec	r23
    2982:	c9 f7       	brne	.-14     	; 0x2976 <__udivmodqi4_loop>
    2984:	80 95       	com	r24
    2986:	08 95       	ret

00002988 <__divmodhi4>:
    2988:	97 fb       	bst	r25, 7
    298a:	09 2e       	mov	r0, r25
    298c:	07 26       	eor	r0, r23
    298e:	0a d0       	rcall	.+20     	; 0x29a4 <__divmodhi4_neg1>
    2990:	77 fd       	sbrc	r23, 7
    2992:	04 d0       	rcall	.+8      	; 0x299c <__divmodhi4_neg2>
    2994:	49 d0       	rcall	.+146    	; 0x2a28 <__udivmodhi4>
    2996:	06 d0       	rcall	.+12     	; 0x29a4 <__divmodhi4_neg1>
    2998:	00 20       	and	r0, r0
    299a:	1a f4       	brpl	.+6      	; 0x29a2 <__divmodhi4_exit>

0000299c <__divmodhi4_neg2>:
    299c:	70 95       	com	r23
    299e:	61 95       	neg	r22
    29a0:	7f 4f       	sbci	r23, 0xFF	; 255

000029a2 <__divmodhi4_exit>:
    29a2:	08 95       	ret

000029a4 <__divmodhi4_neg1>:
    29a4:	f6 f7       	brtc	.-4      	; 0x29a2 <__divmodhi4_exit>
    29a6:	90 95       	com	r25
    29a8:	81 95       	neg	r24
    29aa:	9f 4f       	sbci	r25, 0xFF	; 255
    29ac:	08 95       	ret

000029ae <__udivmodsi4>:
    29ae:	a1 e2       	ldi	r26, 0x21	; 33
    29b0:	1a 2e       	mov	r1, r26
    29b2:	aa 1b       	sub	r26, r26
    29b4:	bb 1b       	sub	r27, r27
    29b6:	fd 01       	movw	r30, r26
    29b8:	0d c0       	rjmp	.+26     	; 0x29d4 <__udivmodsi4_ep>

000029ba <__udivmodsi4_loop>:
    29ba:	aa 1f       	adc	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	ee 1f       	adc	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	a2 17       	cp	r26, r18
    29c4:	b3 07       	cpc	r27, r19
    29c6:	e4 07       	cpc	r30, r20
    29c8:	f5 07       	cpc	r31, r21
    29ca:	20 f0       	brcs	.+8      	; 0x29d4 <__udivmodsi4_ep>
    29cc:	a2 1b       	sub	r26, r18
    29ce:	b3 0b       	sbc	r27, r19
    29d0:	e4 0b       	sbc	r30, r20
    29d2:	f5 0b       	sbc	r31, r21

000029d4 <__udivmodsi4_ep>:
    29d4:	66 1f       	adc	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	88 1f       	adc	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	1a 94       	dec	r1
    29de:	69 f7       	brne	.-38     	; 0x29ba <__udivmodsi4_loop>
    29e0:	60 95       	com	r22
    29e2:	70 95       	com	r23
    29e4:	80 95       	com	r24
    29e6:	90 95       	com	r25
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	bd 01       	movw	r22, r26
    29ee:	cf 01       	movw	r24, r30
    29f0:	08 95       	ret

000029f2 <__divmodsi4>:
    29f2:	97 fb       	bst	r25, 7
    29f4:	09 2e       	mov	r0, r25
    29f6:	05 26       	eor	r0, r21
    29f8:	0e d0       	rcall	.+28     	; 0x2a16 <__divmodsi4_neg1>
    29fa:	57 fd       	sbrc	r21, 7
    29fc:	04 d0       	rcall	.+8      	; 0x2a06 <__divmodsi4_neg2>
    29fe:	d7 df       	rcall	.-82     	; 0x29ae <__udivmodsi4>
    2a00:	0a d0       	rcall	.+20     	; 0x2a16 <__divmodsi4_neg1>
    2a02:	00 1c       	adc	r0, r0
    2a04:	38 f4       	brcc	.+14     	; 0x2a14 <__divmodsi4_exit>

00002a06 <__divmodsi4_neg2>:
    2a06:	50 95       	com	r21
    2a08:	40 95       	com	r20
    2a0a:	30 95       	com	r19
    2a0c:	21 95       	neg	r18
    2a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a10:	4f 4f       	sbci	r20, 0xFF	; 255
    2a12:	5f 4f       	sbci	r21, 0xFF	; 255

00002a14 <__divmodsi4_exit>:
    2a14:	08 95       	ret

00002a16 <__divmodsi4_neg1>:
    2a16:	f6 f7       	brtc	.-4      	; 0x2a14 <__divmodsi4_exit>
    2a18:	90 95       	com	r25
    2a1a:	80 95       	com	r24
    2a1c:	70 95       	com	r23
    2a1e:	61 95       	neg	r22
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255
    2a22:	8f 4f       	sbci	r24, 0xFF	; 255
    2a24:	9f 4f       	sbci	r25, 0xFF	; 255
    2a26:	08 95       	ret

00002a28 <__udivmodhi4>:
    2a28:	aa 1b       	sub	r26, r26
    2a2a:	bb 1b       	sub	r27, r27
    2a2c:	51 e1       	ldi	r21, 0x11	; 17
    2a2e:	07 c0       	rjmp	.+14     	; 0x2a3e <__udivmodhi4_ep>

00002a30 <__udivmodhi4_loop>:
    2a30:	aa 1f       	adc	r26, r26
    2a32:	bb 1f       	adc	r27, r27
    2a34:	a6 17       	cp	r26, r22
    2a36:	b7 07       	cpc	r27, r23
    2a38:	10 f0       	brcs	.+4      	; 0x2a3e <__udivmodhi4_ep>
    2a3a:	a6 1b       	sub	r26, r22
    2a3c:	b7 0b       	sbc	r27, r23

00002a3e <__udivmodhi4_ep>:
    2a3e:	88 1f       	adc	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	5a 95       	dec	r21
    2a44:	a9 f7       	brne	.-22     	; 0x2a30 <__udivmodhi4_loop>
    2a46:	80 95       	com	r24
    2a48:	90 95       	com	r25
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	08 95       	ret

00002a50 <__tablejump2__>:
    2a50:	ee 0f       	add	r30, r30
    2a52:	ff 1f       	adc	r31, r31

00002a54 <__tablejump__>:
    2a54:	05 90       	lpm	r0, Z+
    2a56:	f4 91       	lpm	r31, Z+
    2a58:	e0 2d       	mov	r30, r0
    2a5a:	09 94       	ijmp

00002a5c <_exit>:
    2a5c:	f8 94       	cli

00002a5e <__stop_program>:
    2a5e:	ff cf       	rjmp	.-2      	; 0x2a5e <__stop_program>
